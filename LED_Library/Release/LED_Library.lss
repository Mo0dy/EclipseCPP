
LED_Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  000039a4  00003a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029d  00800200  00800200  00003b38  2**0
                  ALLOC
  3 .stab         00010e48  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000c38f  00000000  00000000  00014980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00020d0f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00020d20  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00020d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00021354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000218f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00021910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a5 c0       	rjmp	.+330    	; 0x14c <__dtors_end>
       2:	00 00       	nop
       4:	cb c0       	rjmp	.+406    	; 0x19c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c0       	rjmp	.+402    	; 0x19c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c0       	rjmp	.+398    	; 0x19c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c0       	rjmp	.+394    	; 0x19c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c0       	rjmp	.+390    	; 0x19c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c0       	rjmp	.+386    	; 0x19c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c0       	rjmp	.+382    	; 0x19c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c0       	rjmp	.+378    	; 0x19c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c0       	rjmp	.+374    	; 0x19c <__bad_interrupt>
      26:	00 00       	nop
      28:	b9 c0       	rjmp	.+370    	; 0x19c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b7 c0       	rjmp	.+366    	; 0x19c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b5 c0       	rjmp	.+362    	; 0x19c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c0       	rjmp	.+358    	; 0x19c <__bad_interrupt>
      36:	00 00       	nop
      38:	b1 c0       	rjmp	.+354    	; 0x19c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c0       	rjmp	.+350    	; 0x19c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c0       	rjmp	.+348    	; 0x19e <__vector_16>
      42:	00 00       	nop
      44:	ab c0       	rjmp	.+342    	; 0x19c <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c6       	rjmp	.+3580   	; 0xe46 <__vector_18>
      4a:	00 00       	nop
      4c:	29 c7       	rjmp	.+3666   	; 0xea0 <__vector_19>
      4e:	00 00       	nop
      50:	a5 c0       	rjmp	.+330    	; 0x19c <__bad_interrupt>
      52:	00 00       	nop
      54:	a3 c0       	rjmp	.+326    	; 0x19c <__bad_interrupt>
      56:	00 00       	nop
      58:	a1 c0       	rjmp	.+322    	; 0x19c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c0       	rjmp	.+318    	; 0x19c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c0       	rjmp	.+314    	; 0x19c <__bad_interrupt>
      62:	00 00       	nop
      64:	9b c0       	rjmp	.+310    	; 0x19c <__bad_interrupt>
      66:	00 00       	nop
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x8c>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	24 00       	.word	0x0024	; ????
      f0:	27 00       	.word	0x0027	; ????
      f2:	2a 00       	.word	0x002a	; ????

000000f4 <port_to_output_PGM>:
      f4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fe <port_to_input_PGM>:
      fe:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000108 <digital_pin_to_port_PGM>:
     108:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     118:	03 03 03 03                                         ....

0000011c <digital_pin_to_bit_mask_PGM>:
     11c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     12c:	04 08 10 20                                         ... 

00000130 <digital_pin_to_timer_PGM>:
     130:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     140:	00 00 00 00                                         ....

00000144 <__ctors_start>:
     144:	38 13       	cpse	r19, r24
     146:	3c 16       	cp	r3, r28
     148:	f5 07       	cpc	r31, r21

0000014a <__ctors_end>:
     14a:	9e 17       	cp	r25, r30

0000014c <__dtors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d8 e0       	ldi	r29, 0x08	; 8
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	12 e0       	ldi	r17, 0x02	; 2
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	e4 ea       	ldi	r30, 0xA4	; 164
     160:	f9 e3       	ldi	r31, 0x39	; 57
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	a0 30       	cpi	r26, 0x00	; 0
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
     16e:	24 e0       	ldi	r18, 0x04	; 4
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b2 e0       	ldi	r27, 0x02	; 2
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	ad 39       	cpi	r26, 0x9D	; 157
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>

0000017e <__do_global_ctors>:
     17e:	10 e0       	ldi	r17, 0x00	; 0
     180:	c5 ea       	ldi	r28, 0xA5	; 165
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	04 c0       	rjmp	.+8      	; 0x18e <__do_global_ctors+0x10>
     186:	21 97       	sbiw	r28, 0x01	; 1
     188:	fe 01       	movw	r30, r28
     18a:	0e 94 33 18 	call	0x3066	; 0x3066 <__tablejump2__>
     18e:	c2 3a       	cpi	r28, 0xA2	; 162
     190:	d1 07       	cpc	r29, r17
     192:	c9 f7       	brne	.-14     	; 0x186 <__do_global_ctors+0x8>
     194:	0e 94 46 0b 	call	0x168c	; 0x168c <main>
     198:	0c 94 c6 1c 	jmp	0x398c	; 0x398c <__do_global_dtors>

0000019c <__bad_interrupt>:
     19c:	31 cf       	rjmp	.-414    	; 0x0 <__vectors>

0000019e <__vector_16>:
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	8f 93       	push	r24
     1ac:	9f 93       	push	r25
     1ae:	af 93       	push	r26
     1b0:	bf 93       	push	r27
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	2a 97       	sbiw	r28, 0x0a	; 10
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     1c4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
     1c8:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__data_end+0x2>
     1cc:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__data_end+0x3>
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	ab 83       	std	Y+3, r26	; 0x03
     1d6:	bc 83       	std	Y+4, r27	; 0x04
     1d8:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <timer0_fract>
     1dc:	8d 83       	std	Y+5, r24	; 0x05
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	9a 81       	ldd	r25, Y+2	; 0x02
     1e2:	ab 81       	ldd	r26, Y+3	; 0x03
     1e4:	bc 81       	ldd	r27, Y+4	; 0x04
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	a1 1d       	adc	r26, r1
     1ea:	b1 1d       	adc	r27, r1
     1ec:	8e 83       	std	Y+6, r24	; 0x06
     1ee:	9f 83       	std	Y+7, r25	; 0x07
     1f0:	a8 87       	std	Y+8, r26	; 0x08
     1f2:	b9 87       	std	Y+9, r27	; 0x09
     1f4:	8d 81       	ldd	r24, Y+5	; 0x05
     1f6:	8d 5f       	subi	r24, 0xFD	; 253
     1f8:	8a 87       	std	Y+10, r24	; 0x0a
     1fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     1fc:	8d 37       	cpi	r24, 0x7D	; 125
     1fe:	78 f0       	brcs	.+30     	; 0x21e <__vector_16+0x80>
     200:	8d 81       	ldd	r24, Y+5	; 0x05
     202:	8a 57       	subi	r24, 0x7A	; 122
     204:	8d 83       	std	Y+5, r24	; 0x05
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	9a 81       	ldd	r25, Y+2	; 0x02
     20a:	ab 81       	ldd	r26, Y+3	; 0x03
     20c:	bc 81       	ldd	r27, Y+4	; 0x04
     20e:	02 96       	adiw	r24, 0x02	; 2
     210:	a1 1d       	adc	r26, r1
     212:	b1 1d       	adc	r27, r1
     214:	89 83       	std	Y+1, r24	; 0x01
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	ab 83       	std	Y+3, r26	; 0x03
     21a:	bc 83       	std	Y+4, r27	; 0x04
     21c:	0a c0       	rjmp	.+20     	; 0x232 <__vector_16+0x94>
     21e:	8a 85       	ldd	r24, Y+10	; 0x0a
     220:	8d 83       	std	Y+5, r24	; 0x05
     222:	8e 81       	ldd	r24, Y+6	; 0x06
     224:	9f 81       	ldd	r25, Y+7	; 0x07
     226:	a8 85       	ldd	r26, Y+8	; 0x08
     228:	b9 85       	ldd	r27, Y+9	; 0x09
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	9a 83       	std	Y+2, r25	; 0x02
     22e:	ab 83       	std	Y+3, r26	; 0x03
     230:	bc 83       	std	Y+4, r27	; 0x04
     232:	8d 81       	ldd	r24, Y+5	; 0x05
     234:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <timer0_fract>
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	9a 81       	ldd	r25, Y+2	; 0x02
     23c:	ab 81       	ldd	r26, Y+3	; 0x03
     23e:	bc 81       	ldd	r27, Y+4	; 0x04
     240:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
     244:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
     248:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_end+0x2>
     24c:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_end+0x3>
     250:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <timer0_overflow_count>
     254:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <timer0_overflow_count+0x1>
     258:	a0 91 a3 02 	lds	r26, 0x02A3	; 0x8002a3 <timer0_overflow_count+0x2>
     25c:	b0 91 a4 02 	lds	r27, 0x02A4	; 0x8002a4 <timer0_overflow_count+0x3>
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	a1 1d       	adc	r26, r1
     264:	b1 1d       	adc	r27, r1
     266:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <timer0_overflow_count>
     26a:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <timer0_overflow_count+0x1>
     26e:	a0 93 a3 02 	sts	0x02A3, r26	; 0x8002a3 <timer0_overflow_count+0x2>
     272:	b0 93 a4 02 	sts	0x02A4, r27	; 0x8002a4 <timer0_overflow_count+0x3>
     276:	2a 96       	adiw	r28, 0x0a	; 10
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	0f 90       	pop	r0
     290:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__data_load_end+0x7fc5bb>
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <millis>:
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <millis+0x6>
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <millis+0x8>
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	80 91 5f 00 	lds	r24, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     2ac:	89 83       	std	Y+1, r24	; 0x01
     2ae:	f8 94       	cli
     2b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     2b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
     2b8:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__data_end+0x2>
     2bc:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__data_end+0x3>
     2c0:	8a 83       	std	Y+2, r24	; 0x02
     2c2:	9b 83       	std	Y+3, r25	; 0x03
     2c4:	ac 83       	std	Y+4, r26	; 0x04
     2c6:	bd 83       	std	Y+5, r27	; 0x05
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	80 93 5f 00 	sts	0x005F, r24	; 0x80005f <__data_load_end+0x7fc5bb>
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	9b 81       	ldd	r25, Y+3	; 0x03
     2d2:	ac 81       	ldd	r26, Y+4	; 0x04
     2d4:	bd 81       	ldd	r27, Y+5	; 0x05
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <micros>:
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <micros+0x6>
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <micros+0x8>
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <micros+0xa>
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	80 91 5f 00 	lds	r24, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     2fc:	8d 83       	std	Y+5, r24	; 0x05
     2fe:	f8 94       	cli
     300:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <timer0_overflow_count>
     304:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <timer0_overflow_count+0x1>
     308:	a0 91 a3 02 	lds	r26, 0x02A3	; 0x8002a3 <timer0_overflow_count+0x2>
     30c:	b0 91 a4 02 	lds	r27, 0x02A4	; 0x8002a4 <timer0_overflow_count+0x3>
     310:	89 83       	std	Y+1, r24	; 0x01
     312:	9a 83       	std	Y+2, r25	; 0x02
     314:	ab 83       	std	Y+3, r26	; 0x03
     316:	bc 83       	std	Y+4, r27	; 0x04
     318:	80 91 46 00 	lds	r24, 0x0046	; 0x800046 <__data_load_end+0x7fc5a2>
     31c:	8e 83       	std	Y+6, r24	; 0x06
     31e:	80 91 35 00 	lds	r24, 0x0035	; 0x800035 <__data_load_end+0x7fc591>
     322:	81 70       	andi	r24, 0x01	; 1
     324:	88 23       	and	r24, r24
     326:	71 f0       	breq	.+28     	; 0x344 <micros+0x5a>
     328:	8e 81       	ldd	r24, Y+6	; 0x06
     32a:	8f 3f       	cpi	r24, 0xFF	; 255
     32c:	59 f0       	breq	.+22     	; 0x344 <micros+0x5a>
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	ab 81       	ldd	r26, Y+3	; 0x03
     334:	bc 81       	ldd	r27, Y+4	; 0x04
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	a1 1d       	adc	r26, r1
     33a:	b1 1d       	adc	r27, r1
     33c:	89 83       	std	Y+1, r24	; 0x01
     33e:	9a 83       	std	Y+2, r25	; 0x02
     340:	ab 83       	std	Y+3, r26	; 0x03
     342:	bc 83       	std	Y+4, r27	; 0x04
     344:	8d 81       	ldd	r24, Y+5	; 0x05
     346:	80 93 5f 00 	sts	0x005F, r24	; 0x80005f <__data_load_end+0x7fc5bb>
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	9a 81       	ldd	r25, Y+2	; 0x02
     34e:	ab 81       	ldd	r26, Y+3	; 0x03
     350:	bc 81       	ldd	r27, Y+4	; 0x04
     352:	22 27       	eor	r18, r18
     354:	38 2f       	mov	r19, r24
     356:	49 2f       	mov	r20, r25
     358:	5a 2f       	mov	r21, r26
     35a:	8e 81       	ldd	r24, Y+6	; 0x06
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	a4 1f       	adc	r26, r20
     36a:	b5 1f       	adc	r27, r21
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	aa 1f       	adc	r26, r26
     372:	bb 1f       	adc	r27, r27
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	aa 1f       	adc	r26, r26
     37a:	bb 1f       	adc	r27, r27
     37c:	bc 01       	movw	r22, r24
     37e:	cd 01       	movw	r24, r26
     380:	26 96       	adiw	r28, 0x06	; 6
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <delay>:
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	28 97       	sbiw	r28, 0x08	; 8
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	6d 83       	std	Y+5, r22	; 0x05
     3b0:	7e 83       	std	Y+6, r23	; 0x06
     3b2:	8f 83       	std	Y+7, r24	; 0x07
     3b4:	98 87       	std	Y+8, r25	; 0x08
     3b6:	99 df       	rcall	.-206    	; 0x2ea <micros>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	89 83       	std	Y+1, r24	; 0x01
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	ab 83       	std	Y+3, r26	; 0x03
     3c2:	bc 83       	std	Y+4, r27	; 0x04
     3c4:	36 c0       	rjmp	.+108    	; 0x432 <delay+0xa0>
     3c6:	0e 94 37 13 	call	0x266e	; 0x266e <yield>
     3ca:	17 c0       	rjmp	.+46     	; 0x3fa <delay+0x68>
     3cc:	8d 81       	ldd	r24, Y+5	; 0x05
     3ce:	9e 81       	ldd	r25, Y+6	; 0x06
     3d0:	af 81       	ldd	r26, Y+7	; 0x07
     3d2:	b8 85       	ldd	r27, Y+8	; 0x08
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	a1 09       	sbc	r26, r1
     3d8:	b1 09       	sbc	r27, r1
     3da:	8d 83       	std	Y+5, r24	; 0x05
     3dc:	9e 83       	std	Y+6, r25	; 0x06
     3de:	af 83       	std	Y+7, r26	; 0x07
     3e0:	b8 87       	std	Y+8, r27	; 0x08
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	ab 81       	ldd	r26, Y+3	; 0x03
     3e8:	bc 81       	ldd	r27, Y+4	; 0x04
     3ea:	88 51       	subi	r24, 0x18	; 24
     3ec:	9c 4f       	sbci	r25, 0xFC	; 252
     3ee:	af 4f       	sbci	r26, 0xFF	; 255
     3f0:	bf 4f       	sbci	r27, 0xFF	; 255
     3f2:	89 83       	std	Y+1, r24	; 0x01
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	ab 83       	std	Y+3, r26	; 0x03
     3f8:	bc 83       	std	Y+4, r27	; 0x04
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	9e 81       	ldd	r25, Y+6	; 0x06
     3fe:	af 81       	ldd	r26, Y+7	; 0x07
     400:	b8 85       	ldd	r27, Y+8	; 0x08
     402:	89 2b       	or	r24, r25
     404:	8a 2b       	or	r24, r26
     406:	8b 2b       	or	r24, r27
     408:	a1 f0       	breq	.+40     	; 0x432 <delay+0xa0>
     40a:	6f df       	rcall	.-290    	; 0x2ea <micros>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	ab 81       	ldd	r26, Y+3	; 0x03
     416:	bc 81       	ldd	r27, Y+4	; 0x04
     418:	79 01       	movw	r14, r18
     41a:	8a 01       	movw	r16, r20
     41c:	e8 1a       	sub	r14, r24
     41e:	f9 0a       	sbc	r15, r25
     420:	0a 0b       	sbc	r16, r26
     422:	1b 0b       	sbc	r17, r27
     424:	d8 01       	movw	r26, r16
     426:	c7 01       	movw	r24, r14
     428:	88 3e       	cpi	r24, 0xE8	; 232
     42a:	93 40       	sbci	r25, 0x03	; 3
     42c:	a1 05       	cpc	r26, r1
     42e:	b1 05       	cpc	r27, r1
     430:	68 f6       	brcc	.-102    	; 0x3cc <delay+0x3a>
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	9e 81       	ldd	r25, Y+6	; 0x06
     436:	af 81       	ldd	r26, Y+7	; 0x07
     438:	b8 85       	ldd	r27, Y+8	; 0x08
     43a:	89 2b       	or	r24, r25
     43c:	8a 2b       	or	r24, r26
     43e:	8b 2b       	or	r24, r27
     440:	11 f6       	brne	.-124    	; 0x3c6 <delay+0x34>
     442:	28 96       	adiw	r28, 0x08	; 8
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	08 95       	ret

0000045c <delayMicroseconds>:
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <delayMicroseconds+0x6>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	9a 83       	std	Y+2, r25	; 0x02
     468:	89 83       	std	Y+1, r24	; 0x01
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
     46e:	02 97       	sbiw	r24, 0x02	; 2
     470:	98 f0       	brcs	.+38     	; 0x498 <delayMicroseconds+0x3c>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	9a 81       	ldd	r25, Y+2	; 0x02
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	9a 83       	std	Y+2, r25	; 0x02
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	05 97       	sbiw	r24, 0x05	; 5
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <delayMicroseconds+0x34>
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <init>:
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	78 94       	sei
     4ac:	80 91 44 00 	lds	r24, 0x0044	; 0x800044 <__data_load_end+0x7fc5a0>
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	80 93 44 00 	sts	0x0044, r24	; 0x800044 <__data_load_end+0x7fc5a0>
     4b6:	80 91 44 00 	lds	r24, 0x0044	; 0x800044 <__data_load_end+0x7fc5a0>
     4ba:	81 60       	ori	r24, 0x01	; 1
     4bc:	80 93 44 00 	sts	0x0044, r24	; 0x800044 <__data_load_end+0x7fc5a0>
     4c0:	80 91 45 00 	lds	r24, 0x0045	; 0x800045 <__data_load_end+0x7fc5a1>
     4c4:	82 60       	ori	r24, 0x02	; 2
     4c6:	80 93 45 00 	sts	0x0045, r24	; 0x800045 <__data_load_end+0x7fc5a1>
     4ca:	80 91 45 00 	lds	r24, 0x0045	; 0x800045 <__data_load_end+0x7fc5a1>
     4ce:	81 60       	ori	r24, 0x01	; 1
     4d0:	80 93 45 00 	sts	0x0045, r24	; 0x800045 <__data_load_end+0x7fc5a1>
     4d4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_load_end+0x7fc5ca>
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_load_end+0x7fc5ca>
     4de:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__data_load_end+0x7fc5dd>
     4e2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__data_load_end+0x7fc5dd>
     4e6:	82 60       	ori	r24, 0x02	; 2
     4e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__data_load_end+0x7fc5dd>
     4ec:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__data_load_end+0x7fc5dd>
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__data_load_end+0x7fc5dd>
     4f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_load_end+0x7fc5dc>
     4fa:	81 60       	ori	r24, 0x01	; 1
     4fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_load_end+0x7fc5dc>
     500:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__data_load_end+0x7fc60d>
     504:	84 60       	ori	r24, 0x04	; 4
     506:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__data_load_end+0x7fc60d>
     50a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_load_end+0x7fc60c>
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_load_end+0x7fc60c>
     514:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_load_end+0x7fc5d6>
     518:	84 60       	ori	r24, 0x04	; 4
     51a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_load_end+0x7fc5d6>
     51e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_load_end+0x7fc5d6>
     522:	82 60       	ori	r24, 0x02	; 2
     524:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_load_end+0x7fc5d6>
     528:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_load_end+0x7fc5d6>
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_load_end+0x7fc5d6>
     532:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_load_end+0x7fc5d6>
     536:	80 68       	ori	r24, 0x80	; 128
     538:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_load_end+0x7fc5d6>
     53c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__data_load_end+0x7fc61d>
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <pinMode>:
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	67 97       	sbiw	r28, 0x17	; 23
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	8e 8b       	std	Y+22, r24	; 0x16
     55c:	6f 8b       	std	Y+23, r22	; 0x17
     55e:	8e 89       	ldd	r24, Y+22	; 0x16
     560:	88 2f       	mov	r24, r24
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9c 01       	movw	r18, r24
     566:	24 5e       	subi	r18, 0xE4	; 228
     568:	3e 4f       	sbci	r19, 0xFE	; 254
     56a:	3a 83       	std	Y+2, r19	; 0x02
     56c:	29 83       	std	Y+1, r18	; 0x01
     56e:	29 81       	ldd	r18, Y+1	; 0x01
     570:	3a 81       	ldd	r19, Y+2	; 0x02
     572:	f9 01       	movw	r30, r18
     574:	24 91       	lpm	r18, Z
     576:	2b 83       	std	Y+3, r18	; 0x03
     578:	88 5f       	subi	r24, 0xF8	; 248
     57a:	9e 4f       	sbci	r25, 0xFE	; 254
     57c:	9d 83       	std	Y+5, r25	; 0x05
     57e:	8c 83       	std	Y+4, r24	; 0x04
     580:	8c 81       	ldd	r24, Y+4	; 0x04
     582:	9d 81       	ldd	r25, Y+5	; 0x05
     584:	fc 01       	movw	r30, r24
     586:	84 91       	lpm	r24, Z
     588:	8e 83       	std	Y+6, r24	; 0x06
     58a:	8e 81       	ldd	r24, Y+6	; 0x06
     58c:	88 23       	and	r24, r24
     58e:	09 f4       	brne	.+2      	; 0x592 <pinMode+0x4c>
     590:	85 c0       	rjmp	.+266    	; 0x69c <pinMode+0x156>
     592:	8e 81       	ldd	r24, Y+6	; 0x06
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	9c 01       	movw	r18, r24
     59a:	22 0f       	add	r18, r18
     59c:	33 1f       	adc	r19, r19
     59e:	c9 01       	movw	r24, r18
     5a0:	86 51       	subi	r24, 0x16	; 22
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	98 87       	std	Y+8, r25	; 0x08
     5a6:	8f 83       	std	Y+7, r24	; 0x07
     5a8:	8f 81       	ldd	r24, Y+7	; 0x07
     5aa:	98 85       	ldd	r25, Y+8	; 0x08
     5ac:	fc 01       	movw	r30, r24
     5ae:	45 91       	lpm	r20, Z+
     5b0:	54 91       	lpm	r21, Z
     5b2:	cf 01       	movw	r24, r30
     5b4:	5a 87       	std	Y+10, r21	; 0x0a
     5b6:	49 87       	std	Y+9, r20	; 0x09
     5b8:	98 87       	std	Y+8, r25	; 0x08
     5ba:	8f 83       	std	Y+7, r24	; 0x07
     5bc:	89 85       	ldd	r24, Y+9	; 0x09
     5be:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c0:	9c 87       	std	Y+12, r25	; 0x0c
     5c2:	8b 87       	std	Y+11, r24	; 0x0b
     5c4:	c9 01       	movw	r24, r18
     5c6:	8c 50       	subi	r24, 0x0C	; 12
     5c8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ca:	9e 87       	std	Y+14, r25	; 0x0e
     5cc:	8d 87       	std	Y+13, r24	; 0x0d
     5ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     5d2:	fc 01       	movw	r30, r24
     5d4:	25 91       	lpm	r18, Z+
     5d6:	34 91       	lpm	r19, Z
     5d8:	cf 01       	movw	r24, r30
     5da:	38 8b       	std	Y+16, r19	; 0x10
     5dc:	2f 87       	std	Y+15, r18	; 0x0f
     5de:	9e 87       	std	Y+14, r25	; 0x0e
     5e0:	8d 87       	std	Y+13, r24	; 0x0d
     5e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     5e4:	98 89       	ldd	r25, Y+16	; 0x10
     5e6:	9a 8b       	std	Y+18, r25	; 0x12
     5e8:	89 8b       	std	Y+17, r24	; 0x11
     5ea:	8f 89       	ldd	r24, Y+23	; 0x17
     5ec:	88 23       	and	r24, r24
     5ee:	09 f5       	brne	.+66     	; 0x632 <pinMode+0xec>
     5f0:	80 91 5f 00 	lds	r24, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     5f4:	8b 8b       	std	Y+19, r24	; 0x13
     5f6:	f8 94       	cli
     5f8:	8b 85       	ldd	r24, Y+11	; 0x0b
     5fa:	9c 85       	ldd	r25, Y+12	; 0x0c
     5fc:	fc 01       	movw	r30, r24
     5fe:	80 81       	ld	r24, Z
     600:	98 2f       	mov	r25, r24
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	28 2f       	mov	r18, r24
     606:	20 95       	com	r18
     608:	89 2f       	mov	r24, r25
     60a:	82 23       	and	r24, r18
     60c:	38 2f       	mov	r19, r24
     60e:	8b 85       	ldd	r24, Y+11	; 0x0b
     610:	9c 85       	ldd	r25, Y+12	; 0x0c
     612:	fc 01       	movw	r30, r24
     614:	30 83       	st	Z, r19
     616:	89 89       	ldd	r24, Y+17	; 0x11
     618:	9a 89       	ldd	r25, Y+18	; 0x12
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	82 23       	and	r24, r18
     620:	28 2f       	mov	r18, r24
     622:	89 89       	ldd	r24, Y+17	; 0x11
     624:	9a 89       	ldd	r25, Y+18	; 0x12
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	8b 89       	ldd	r24, Y+19	; 0x13
     62c:	80 93 5f 00 	sts	0x005F, r24	; 0x80005f <__data_load_end+0x7fc5bb>
     630:	35 c0       	rjmp	.+106    	; 0x69c <pinMode+0x156>
     632:	8f 89       	ldd	r24, Y+23	; 0x17
     634:	82 30       	cpi	r24, 0x02	; 2
     636:	01 f5       	brne	.+64     	; 0x678 <pinMode+0x132>
     638:	80 91 5f 00 	lds	r24, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     63c:	8c 8b       	std	Y+20, r24	; 0x14
     63e:	f8 94       	cli
     640:	8b 85       	ldd	r24, Y+11	; 0x0b
     642:	9c 85       	ldd	r25, Y+12	; 0x0c
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	98 2f       	mov	r25, r24
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	80 95       	com	r24
     64e:	89 23       	and	r24, r25
     650:	28 2f       	mov	r18, r24
     652:	8b 85       	ldd	r24, Y+11	; 0x0b
     654:	9c 85       	ldd	r25, Y+12	; 0x0c
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
     65a:	89 89       	ldd	r24, Y+17	; 0x11
     65c:	9a 89       	ldd	r25, Y+18	; 0x12
     65e:	fc 01       	movw	r30, r24
     660:	90 81       	ld	r25, Z
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	29 2f       	mov	r18, r25
     666:	28 2b       	or	r18, r24
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	9a 89       	ldd	r25, Y+18	; 0x12
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
     670:	8c 89       	ldd	r24, Y+20	; 0x14
     672:	80 93 5f 00 	sts	0x005F, r24	; 0x80005f <__data_load_end+0x7fc5bb>
     676:	12 c0       	rjmp	.+36     	; 0x69c <pinMode+0x156>
     678:	80 91 5f 00 	lds	r24, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     67c:	8d 8b       	std	Y+21, r24	; 0x15
     67e:	f8 94       	cli
     680:	8b 85       	ldd	r24, Y+11	; 0x0b
     682:	9c 85       	ldd	r25, Y+12	; 0x0c
     684:	fc 01       	movw	r30, r24
     686:	90 81       	ld	r25, Z
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	29 2f       	mov	r18, r25
     68c:	28 2b       	or	r18, r24
     68e:	8b 85       	ldd	r24, Y+11	; 0x0b
     690:	9c 85       	ldd	r25, Y+12	; 0x0c
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
     696:	8d 89       	ldd	r24, Y+21	; 0x15
     698:	80 93 5f 00 	sts	0x005F, r24	; 0x80005f <__data_load_end+0x7fc5bb>
     69c:	67 96       	adiw	r28, 0x17	; 23
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <turnOffPWM>:
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	1f 92       	push	r1
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	89 83       	std	Y+1, r24	; 0x01
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	71 f0       	breq	.+28     	; 0x6dc <turnOffPWM+0x2e>
     6c0:	84 30       	cpi	r24, 0x04	; 4
     6c2:	28 f4       	brcc	.+10     	; 0x6ce <turnOffPWM+0x20>
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	b1 f0       	breq	.+44     	; 0x6f4 <turnOffPWM+0x46>
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	b1 f0       	breq	.+44     	; 0x6f8 <turnOffPWM+0x4a>
     6cc:	26 c0       	rjmp	.+76     	; 0x71a <turnOffPWM+0x6c>
     6ce:	87 30       	cpi	r24, 0x07	; 7
     6d0:	c9 f0       	breq	.+50     	; 0x704 <turnOffPWM+0x56>
     6d2:	88 30       	cpi	r24, 0x08	; 8
     6d4:	e9 f0       	breq	.+58     	; 0x710 <turnOffPWM+0x62>
     6d6:	84 30       	cpi	r24, 0x04	; 4
     6d8:	01 f5       	brne	.+64     	; 0x71a <turnOffPWM+0x6c>
     6da:	06 c0       	rjmp	.+12     	; 0x6e8 <turnOffPWM+0x3a>
     6dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_load_end+0x7fc5dc>
     6e0:	8f 77       	andi	r24, 0x7F	; 127
     6e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_load_end+0x7fc5dc>
     6e6:	19 c0       	rjmp	.+50     	; 0x71a <turnOffPWM+0x6c>
     6e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_load_end+0x7fc5dc>
     6ec:	8f 7d       	andi	r24, 0xDF	; 223
     6ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_load_end+0x7fc5dc>
     6f2:	13 c0       	rjmp	.+38     	; 0x71a <turnOffPWM+0x6c>
     6f4:	8e d0       	rcall	.+284    	; 0x812 <turnOffPWM.part.0>
     6f6:	11 c0       	rjmp	.+34     	; 0x71a <turnOffPWM+0x6c>
     6f8:	80 91 44 00 	lds	r24, 0x0044	; 0x800044 <__data_load_end+0x7fc5a0>
     6fc:	8f 7d       	andi	r24, 0xDF	; 223
     6fe:	80 93 44 00 	sts	0x0044, r24	; 0x800044 <__data_load_end+0x7fc5a0>
     702:	0b c0       	rjmp	.+22     	; 0x71a <turnOffPWM+0x6c>
     704:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_load_end+0x7fc60c>
     708:	8f 77       	andi	r24, 0x7F	; 127
     70a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_load_end+0x7fc60c>
     70e:	05 c0       	rjmp	.+10     	; 0x71a <turnOffPWM+0x6c>
     710:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_load_end+0x7fc60c>
     714:	8f 7d       	andi	r24, 0xDF	; 223
     716:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_load_end+0x7fc60c>
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <digitalWrite>:
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	62 97       	sbiw	r28, 0x12	; 18
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	89 8b       	std	Y+17, r24	; 0x11
     738:	6a 8b       	std	Y+18, r22	; 0x12
     73a:	89 89       	ldd	r24, Y+17	; 0x11
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9c 01       	movw	r18, r24
     742:	20 5d       	subi	r18, 0xD0	; 208
     744:	3e 4f       	sbci	r19, 0xFE	; 254
     746:	3a 83       	std	Y+2, r19	; 0x02
     748:	29 83       	std	Y+1, r18	; 0x01
     74a:	29 81       	ldd	r18, Y+1	; 0x01
     74c:	3a 81       	ldd	r19, Y+2	; 0x02
     74e:	f9 01       	movw	r30, r18
     750:	24 91       	lpm	r18, Z
     752:	2b 83       	std	Y+3, r18	; 0x03
     754:	9c 01       	movw	r18, r24
     756:	24 5e       	subi	r18, 0xE4	; 228
     758:	3e 4f       	sbci	r19, 0xFE	; 254
     75a:	3d 83       	std	Y+5, r19	; 0x05
     75c:	2c 83       	std	Y+4, r18	; 0x04
     75e:	2c 81       	ldd	r18, Y+4	; 0x04
     760:	3d 81       	ldd	r19, Y+5	; 0x05
     762:	f9 01       	movw	r30, r18
     764:	24 91       	lpm	r18, Z
     766:	2e 83       	std	Y+6, r18	; 0x06
     768:	88 5f       	subi	r24, 0xF8	; 248
     76a:	9e 4f       	sbci	r25, 0xFE	; 254
     76c:	98 87       	std	Y+8, r25	; 0x08
     76e:	8f 83       	std	Y+7, r24	; 0x07
     770:	8f 81       	ldd	r24, Y+7	; 0x07
     772:	98 85       	ldd	r25, Y+8	; 0x08
     774:	fc 01       	movw	r30, r24
     776:	84 91       	lpm	r24, Z
     778:	89 87       	std	Y+9, r24	; 0x09
     77a:	89 85       	ldd	r24, Y+9	; 0x09
     77c:	88 23       	and	r24, r24
     77e:	09 f4       	brne	.+2      	; 0x782 <digitalWrite+0x60>
     780:	3f c0       	rjmp	.+126    	; 0x800 <digitalWrite+0xde>
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	88 23       	and	r24, r24
     786:	11 f0       	breq	.+4      	; 0x78c <digitalWrite+0x6a>
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	91 df       	rcall	.-222    	; 0x6ae <turnOffPWM>
     78c:	89 85       	ldd	r24, Y+9	; 0x09
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	8c 50       	subi	r24, 0x0C	; 12
     798:	9f 4f       	sbci	r25, 0xFF	; 255
     79a:	9b 87       	std	Y+11, r25	; 0x0b
     79c:	8a 87       	std	Y+10, r24	; 0x0a
     79e:	8a 85       	ldd	r24, Y+10	; 0x0a
     7a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a2:	fc 01       	movw	r30, r24
     7a4:	25 91       	lpm	r18, Z+
     7a6:	34 91       	lpm	r19, Z
     7a8:	cf 01       	movw	r24, r30
     7aa:	3d 87       	std	Y+13, r19	; 0x0d
     7ac:	2c 87       	std	Y+12, r18	; 0x0c
     7ae:	9b 87       	std	Y+11, r25	; 0x0b
     7b0:	8a 87       	std	Y+10, r24	; 0x0a
     7b2:	8c 85       	ldd	r24, Y+12	; 0x0c
     7b4:	9d 85       	ldd	r25, Y+13	; 0x0d
     7b6:	9f 87       	std	Y+15, r25	; 0x0f
     7b8:	8e 87       	std	Y+14, r24	; 0x0e
     7ba:	80 91 5f 00 	lds	r24, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     7be:	88 8b       	std	Y+16, r24	; 0x10
     7c0:	f8 94       	cli
     7c2:	8a 89       	ldd	r24, Y+18	; 0x12
     7c4:	88 23       	and	r24, r24
     7c6:	71 f4       	brne	.+28     	; 0x7e4 <digitalWrite+0xc2>
     7c8:	8e 85       	ldd	r24, Y+14	; 0x0e
     7ca:	9f 85       	ldd	r25, Y+15	; 0x0f
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	98 2f       	mov	r25, r24
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	80 95       	com	r24
     7d6:	89 23       	and	r24, r25
     7d8:	28 2f       	mov	r18, r24
     7da:	8e 85       	ldd	r24, Y+14	; 0x0e
     7dc:	9f 85       	ldd	r25, Y+15	; 0x0f
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
     7e2:	0b c0       	rjmp	.+22     	; 0x7fa <digitalWrite+0xd8>
     7e4:	8e 85       	ldd	r24, Y+14	; 0x0e
     7e6:	9f 85       	ldd	r25, Y+15	; 0x0f
     7e8:	fc 01       	movw	r30, r24
     7ea:	90 81       	ld	r25, Z
     7ec:	8e 81       	ldd	r24, Y+6	; 0x06
     7ee:	29 2f       	mov	r18, r25
     7f0:	28 2b       	or	r18, r24
     7f2:	8e 85       	ldd	r24, Y+14	; 0x0e
     7f4:	9f 85       	ldd	r25, Y+15	; 0x0f
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
     7fa:	88 89       	ldd	r24, Y+16	; 0x10
     7fc:	80 93 5f 00 	sts	0x005F, r24	; 0x80005f <__data_load_end+0x7fc5bb>
     800:	62 96       	adiw	r28, 0x12	; 18
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <turnOffPWM.part.0>:
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	80 91 44 00 	lds	r24, 0x0044	; 0x800044 <__data_load_end+0x7fc5a0>
     81e:	8f 77       	andi	r24, 0x7F	; 127
     820:	80 93 44 00 	sts	0x0044, r24	; 0x800044 <__data_load_end+0x7fc5a0>
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <_Z14serialEventRunv>:
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	89 2b       	or	r24, r25
     838:	29 f0       	breq	.+10     	; 0x844 <_Z14serialEventRunv+0x1a>
     83a:	5f d3       	rcall	.+1726   	; 0xefa <_Z17Serial0_availablev>
     83c:	88 23       	and	r24, r24
     83e:	21 f4       	brne	.+8      	; 0x848 <_Z14serialEventRunv+0x1e>
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	03 c0       	rjmp	.+6      	; 0x84a <_Z14serialEventRunv+0x20>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	01 c0       	rjmp	.+2      	; 0x84a <_Z14serialEventRunv+0x20>
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	88 23       	and	r24, r24
     84c:	11 f0       	breq	.+4      	; 0x852 <_Z14serialEventRunv+0x28>
     84e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	00 d0       	rcall	.+0      	; 0x85e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
     85e:	1f 92       	push	r1
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	9b 83       	std	Y+3, r25	; 0x03
     866:	8a 83       	std	Y+2, r24	; 0x02
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	fc 01       	movw	r30, r24
     86e:	84 8d       	ldd	r24, Z+28	; 0x1c
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2a 81       	ldd	r18, Y+2	; 0x02
     876:	3b 81       	ldd	r19, Y+3	; 0x03
     878:	82 0f       	add	r24, r18
     87a:	93 1f       	adc	r25, r19
     87c:	83 5a       	subi	r24, 0xA3	; 163
     87e:	9f 4f       	sbci	r25, 0xFF	; 255
     880:	fc 01       	movw	r30, r24
     882:	80 81       	ld	r24, Z
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	9b 81       	ldd	r25, Y+3	; 0x03
     88a:	fc 01       	movw	r30, r24
     88c:	84 8d       	ldd	r24, Z+28	; 0x1c
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	8f 73       	andi	r24, 0x3F	; 63
     896:	90 78       	andi	r25, 0x80	; 128
     898:	99 23       	and	r25, r25
     89a:	24 f4       	brge	.+8      	; 0x8a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4c>
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	80 6c       	ori	r24, 0xC0	; 192
     8a0:	9f 6f       	ori	r25, 0xFF	; 255
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	28 2f       	mov	r18, r24
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	9b 81       	ldd	r25, Y+3	; 0x03
     8aa:	fc 01       	movw	r30, r24
     8ac:	24 8f       	std	Z+28, r18	; 0x1c
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	9b 81       	ldd	r25, Y+3	; 0x03
     8b2:	fc 01       	movw	r30, r24
     8b4:	86 89       	ldd	r24, Z+22	; 0x16
     8b6:	97 89       	ldd	r25, Z+23	; 0x17
     8b8:	29 81       	ldd	r18, Y+1	; 0x01
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	9b 81       	ldd	r25, Y+3	; 0x03
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 89       	ldd	r24, Z+16	; 0x10
     8c6:	91 89       	ldd	r25, Z+17	; 0x11
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 81       	ld	r18, Z
     8cc:	20 64       	ori	r18, 0x40	; 64
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	9b 81       	ldd	r25, Y+3	; 0x03
     8d6:	fc 01       	movw	r30, r24
     8d8:	23 8d       	ldd	r18, Z+27	; 0x1b
     8da:	8a 81       	ldd	r24, Y+2	; 0x02
     8dc:	9b 81       	ldd	r25, Y+3	; 0x03
     8de:	fc 01       	movw	r30, r24
     8e0:	84 8d       	ldd	r24, Z+28	; 0x1c
     8e2:	28 17       	cp	r18, r24
     8e4:	19 f4       	brne	.+6      	; 0x8ec <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x94>
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ea:	c2 d1       	rcall	.+900    	; 0xc70 <_ZN14HardwareSerial17_tx_udr_empty_irqEv.part.0>
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <_ZN14HardwareSerial5beginEmh>:
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	61 97       	sbiw	r28, 0x11	; 17
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	8b 83       	std	Y+3, r24	; 0x03
     910:	4d 83       	std	Y+5, r20	; 0x05
     912:	5e 83       	std	Y+6, r21	; 0x06
     914:	6f 83       	std	Y+7, r22	; 0x07
     916:	78 87       	std	Y+8, r23	; 0x08
     918:	29 87       	std	Y+9, r18	; 0x09
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	99 e0       	ldi	r25, 0x09	; 9
     91e:	ad e3       	ldi	r26, 0x3D	; 61
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	2d 81       	ldd	r18, Y+5	; 0x05
     924:	3e 81       	ldd	r19, Y+6	; 0x06
     926:	4f 81       	ldd	r20, Y+7	; 0x07
     928:	58 85       	ldd	r21, Y+8	; 0x08
     92a:	bc 01       	movw	r22, r24
     92c:	cd 01       	movw	r24, r26
     92e:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__udivmodsi4>
     932:	da 01       	movw	r26, r20
     934:	c9 01       	movw	r24, r18
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	fc 01       	movw	r30, r24
     94e:	80 89       	ldd	r24, Z+16	; 0x10
     950:	91 89       	ldd	r25, Z+17	; 0x11
     952:	22 e0       	ldi	r18, 0x02	; 2
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
     958:	8d 81       	ldd	r24, Y+5	; 0x05
     95a:	9e 81       	ldd	r25, Y+6	; 0x06
     95c:	af 81       	ldd	r26, Y+7	; 0x07
     95e:	b8 85       	ldd	r27, Y+8	; 0x08
     960:	81 15       	cp	r24, r1
     962:	91 4e       	sbci	r25, 0xE1	; 225
     964:	a1 05       	cpc	r26, r1
     966:	b1 05       	cpc	r27, r1
     968:	29 f0       	breq	.+10     	; 0x974 <__stack+0x75>
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	9a 81       	ldd	r25, Y+2	; 0x02
     96e:	81 15       	cp	r24, r1
     970:	90 41       	sbci	r25, 0x10	; 16
     972:	f0 f0       	brcs	.+60     	; 0x9b0 <__stack+0xb1>
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	fc 01       	movw	r30, r24
     97a:	80 89       	ldd	r24, Z+16	; 0x10
     97c:	91 89       	ldd	r25, Z+17	; 0x11
     97e:	fc 01       	movw	r30, r24
     980:	10 82       	st	Z, r1
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	94 e8       	ldi	r25, 0x84	; 132
     986:	ae e1       	ldi	r26, 0x1E	; 30
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	2d 81       	ldd	r18, Y+5	; 0x05
     98c:	3e 81       	ldd	r19, Y+6	; 0x06
     98e:	4f 81       	ldd	r20, Y+7	; 0x07
     990:	58 85       	ldd	r21, Y+8	; 0x08
     992:	bc 01       	movw	r22, r24
     994:	cd 01       	movw	r24, r26
     996:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__udivmodsi4>
     99a:	da 01       	movw	r26, r20
     99c:	c9 01       	movw	r24, r18
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	a1 09       	sbc	r26, r1
     9a2:	b1 09       	sbc	r27, r1
     9a4:	b6 95       	lsr	r27
     9a6:	a7 95       	ror	r26
     9a8:	97 95       	ror	r25
     9aa:	87 95       	ror	r24
     9ac:	9a 83       	std	Y+2, r25	; 0x02
     9ae:	89 83       	std	Y+1, r24	; 0x01
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	fc 01       	movw	r30, r24
     9b6:	84 85       	ldd	r24, Z+12	; 0x0c
     9b8:	95 85       	ldd	r25, Z+13	; 0x0d
     9ba:	29 81       	ldd	r18, Y+1	; 0x01
     9bc:	3a 81       	ldd	r19, Y+2	; 0x02
     9be:	23 2f       	mov	r18, r19
     9c0:	33 27       	eor	r19, r19
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
     9c6:	8b 81       	ldd	r24, Y+3	; 0x03
     9c8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ca:	fc 01       	movw	r30, r24
     9cc:	86 85       	ldd	r24, Z+14	; 0x0e
     9ce:	97 85       	ldd	r25, Z+15	; 0x0f
     9d0:	29 81       	ldd	r18, Y+1	; 0x01
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	9c 81       	ldd	r25, Y+4	; 0x04
     9da:	fc 01       	movw	r30, r24
     9dc:	10 8e       	std	Z+24, r1	; 0x18
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	9c 81       	ldd	r25, Y+4	; 0x04
     9e2:	fc 01       	movw	r30, r24
     9e4:	84 89       	ldd	r24, Z+20	; 0x14
     9e6:	95 89       	ldd	r25, Z+21	; 0x15
     9e8:	29 85       	ldd	r18, Y+9	; 0x09
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	fc 01       	movw	r30, r24
     9f4:	82 89       	ldd	r24, Z+18	; 0x12
     9f6:	93 89       	ldd	r25, Z+19	; 0x13
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 81       	ld	r18, Z
     9fc:	20 61       	ori	r18, 0x10	; 16
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	9c 81       	ldd	r25, Y+4	; 0x04
     a06:	fc 01       	movw	r30, r24
     a08:	82 89       	ldd	r24, Z+18	; 0x12
     a0a:	93 89       	ldd	r25, Z+19	; 0x13
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 81       	ld	r18, Z
     a10:	28 60       	ori	r18, 0x08	; 8
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	fc 01       	movw	r30, r24
     a1c:	82 89       	ldd	r24, Z+18	; 0x12
     a1e:	93 89       	ldd	r25, Z+19	; 0x13
     a20:	fc 01       	movw	r30, r24
     a22:	20 81       	ld	r18, Z
     a24:	20 68       	ori	r18, 0x80	; 128
     a26:	fc 01       	movw	r30, r24
     a28:	20 83       	st	Z, r18
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	fc 01       	movw	r30, r24
     a30:	82 89       	ldd	r24, Z+18	; 0x12
     a32:	93 89       	ldd	r25, Z+19	; 0x13
     a34:	fc 01       	movw	r30, r24
     a36:	20 81       	ld	r18, Z
     a38:	2f 7d       	andi	r18, 0xDF	; 223
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	61 96       	adiw	r28, 0x11	; 17
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <_ZN14HardwareSerial9availableEv>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	00 d0       	rcall	.+0      	; 0xa56 <_ZN14HardwareSerial9availableEv+0x6>
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	fc 01       	movw	r30, r24
     a64:	81 8d       	ldd	r24, Z+25	; 0x19
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9c 01       	movw	r18, r24
     a6c:	20 5c       	subi	r18, 0xC0	; 192
     a6e:	3f 4f       	sbci	r19, 0xFF	; 255
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	fc 01       	movw	r30, r24
     a76:	82 8d       	ldd	r24, Z+26	; 0x1a
     a78:	88 2f       	mov	r24, r24
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a9 01       	movw	r20, r18
     a7e:	48 1b       	sub	r20, r24
     a80:	59 0b       	sbc	r21, r25
     a82:	ca 01       	movw	r24, r20
     a84:	8f 73       	andi	r24, 0x3F	; 63
     a86:	99 27       	eor	r25, r25
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <_ZN14HardwareSerial4peekEv>:
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	00 d0       	rcall	.+0      	; 0xa98 <_ZN14HardwareSerial4peekEv+0x6>
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	89 83       	std	Y+1, r24	; 0x01
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	fc 01       	movw	r30, r24
     aa6:	21 8d       	ldd	r18, Z+25	; 0x19
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	fc 01       	movw	r30, r24
     aae:	82 8d       	ldd	r24, Z+26	; 0x1a
     ab0:	28 17       	cp	r18, r24
     ab2:	81 f0       	breq	.+32     	; 0xad4 <_ZN14HardwareSerial4peekEv+0x42>
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	9a 81       	ldd	r25, Y+2	; 0x02
     ab8:	fc 01       	movw	r30, r24
     aba:	82 8d       	ldd	r24, Z+26	; 0x1a
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	29 81       	ldd	r18, Y+1	; 0x01
     ac2:	3a 81       	ldd	r19, Y+2	; 0x02
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	4d 96       	adiw	r24, 0x1d	; 29
     aca:	fc 01       	movw	r30, r24
     acc:	80 81       	ld	r24, Z
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <_ZN14HardwareSerial4peekEv+0x46>
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <_ZN14HardwareSerial4readEv>:
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <_ZN14HardwareSerial4readEv+0x6>
     ae8:	1f 92       	push	r1
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	9b 83       	std	Y+3, r25	; 0x03
     af0:	8a 83       	std	Y+2, r24	; 0x02
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	9b 81       	ldd	r25, Y+3	; 0x03
     af6:	fc 01       	movw	r30, r24
     af8:	21 8d       	ldd	r18, Z+25	; 0x19
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	9b 81       	ldd	r25, Y+3	; 0x03
     afe:	fc 01       	movw	r30, r24
     b00:	82 8d       	ldd	r24, Z+26	; 0x1a
     b02:	28 17       	cp	r18, r24
     b04:	e9 f0       	breq	.+58     	; 0xb40 <_ZN14HardwareSerial4readEv+0x5e>
     b06:	8a 81       	ldd	r24, Y+2	; 0x02
     b08:	9b 81       	ldd	r25, Y+3	; 0x03
     b0a:	fc 01       	movw	r30, r24
     b0c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	2a 81       	ldd	r18, Y+2	; 0x02
     b14:	3b 81       	ldd	r19, Y+3	; 0x03
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	4d 96       	adiw	r24, 0x1d	; 29
     b1c:	fc 01       	movw	r30, r24
     b1e:	80 81       	ld	r24, Z
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	9b 81       	ldd	r25, Y+3	; 0x03
     b26:	fc 01       	movw	r30, r24
     b28:	82 8d       	ldd	r24, Z+26	; 0x1a
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	28 2f       	mov	r18, r24
     b2e:	2f 73       	andi	r18, 0x3F	; 63
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	9b 81       	ldd	r25, Y+3	; 0x03
     b34:	fc 01       	movw	r30, r24
     b36:	22 8f       	std	Z+26, r18	; 0x1a
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <_ZN14HardwareSerial4readEv+0x62>
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <_ZN14HardwareSerial17availableForWriteEv>:
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN14HardwareSerial17availableForWriteEv+0x6>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <_ZN14HardwareSerial17availableForWriteEv+0x8>
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	9c 83       	std	Y+4, r25	; 0x04
     b5e:	8b 83       	std	Y+3, r24	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	fc 01       	movw	r30, r24
     b66:	83 8d       	ldd	r24, Z+27	; 0x1b
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	fc 01       	movw	r30, r24
     b70:	84 8d       	ldd	r24, Z+28	; 0x1c
     b72:	8a 83       	std	Y+2, r24	; 0x02
     b74:	99 81       	ldd	r25, Y+1	; 0x01
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	98 17       	cp	r25, r24
     b7a:	68 f0       	brcs	.+26     	; 0xb96 <_ZN14HardwareSerial17availableForWriteEv+0x46>
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	2f e3       	ldi	r18, 0x3F	; 63
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	28 1b       	sub	r18, r24
     b88:	39 0b       	sbc	r19, r25
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	82 0f       	add	r24, r18
     b92:	93 1f       	adc	r25, r19
     b94:	0b c0       	rjmp	.+22     	; 0xbac <_ZN14HardwareSerial17availableForWriteEv+0x5c>
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a9 01       	movw	r20, r18
     ba4:	48 1b       	sub	r20, r24
     ba6:	59 0b       	sbc	r21, r25
     ba8:	ca 01       	movw	r24, r20
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <_ZN14HardwareSerial5flushEv>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <_ZN14HardwareSerial5flushEv+0x6>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	9a 83       	std	Y+2, r25	; 0x02
     bc6:	89 83       	std	Y+1, r24	; 0x01
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	fc 01       	movw	r30, r24
     bce:	80 8d       	ldd	r24, Z+24	; 0x18
     bd0:	88 23       	and	r24, r24
     bd2:	19 f0       	breq	.+6      	; 0xbda <_ZN14HardwareSerial5flushEv+0x20>
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	61 d0       	rcall	.+194    	; 0xc9c <_ZN14HardwareSerial5flushEv.part.1>
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <_ZN14HardwareSerial5writeEh>:
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <_ZN14HardwareSerial5writeEh+0x6>
     bea:	1f 92       	push	r1
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	6b 83       	std	Y+3, r22	; 0x03
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	21 e0       	ldi	r18, 0x01	; 1
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 8f       	std	Z+24, r18	; 0x18
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	fc 01       	movw	r30, r24
     c06:	23 8d       	ldd	r18, Z+27	; 0x1b
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	fc 01       	movw	r30, r24
     c0e:	84 8d       	ldd	r24, Z+28	; 0x1c
     c10:	28 17       	cp	r18, r24
     c12:	51 f4       	brne	.+20     	; 0xc28 <_ZN14HardwareSerial5writeEh+0x44>
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	fc 01       	movw	r30, r24
     c1a:	80 89       	ldd	r24, Z+16	; 0x10
     c1c:	91 89       	ldd	r25, Z+17	; 0x11
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
     c22:	80 72       	andi	r24, 0x20	; 32
     c24:	88 23       	and	r24, r24
     c26:	11 f4       	brne	.+4      	; 0xc2c <_ZN14HardwareSerial5writeEh+0x48>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <_ZN14HardwareSerial5writeEh+0x4a>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	88 23       	and	r24, r24
     c30:	99 f0       	breq	.+38     	; 0xc58 <_ZN14HardwareSerial5writeEh+0x74>
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	fc 01       	movw	r30, r24
     c38:	86 89       	ldd	r24, Z+22	; 0x16
     c3a:	97 89       	ldd	r25, Z+23	; 0x17
     c3c:	2b 81       	ldd	r18, Y+3	; 0x03
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	fc 01       	movw	r30, r24
     c48:	80 89       	ldd	r24, Z+16	; 0x10
     c4a:	91 89       	ldd	r25, Z+17	; 0x11
     c4c:	fc 01       	movw	r30, r24
     c4e:	20 81       	ld	r18, Z
     c50:	20 64       	ori	r18, 0x40	; 64
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18
     c56:	04 c0       	rjmp	.+8      	; 0xc60 <_ZN14HardwareSerial5writeEh+0x7c>
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	6b 81       	ldd	r22, Y+3	; 0x03
     c5e:	61 d0       	rcall	.+194    	; 0xd22 <_ZN14HardwareSerial5writeEh.part.2>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <_ZN14HardwareSerial17_tx_udr_empty_irqEv.part.0>:
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	00 d0       	rcall	.+0      	; 0xc76 <_ZN14HardwareSerial17_tx_udr_empty_irqEv.part.0+0x6>
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	9a 83       	std	Y+2, r25	; 0x02
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	fc 01       	movw	r30, r24
     c84:	82 89       	ldd	r24, Z+18	; 0x12
     c86:	93 89       	ldd	r25, Z+19	; 0x13
     c88:	fc 01       	movw	r30, r24
     c8a:	20 81       	ld	r18, Z
     c8c:	2f 7d       	andi	r18, 0xDF	; 223
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <_ZN14HardwareSerial5flushEv.part.1>:
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <_ZN14HardwareSerial5flushEv.part.1+0x6>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	1b c0       	rjmp	.+54     	; 0xce2 <_ZN14HardwareSerial5flushEv.part.1+0x46>
     cac:	20 91 5f 00 	lds	r18, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     cb0:	22 23       	and	r18, r18
     cb2:	2c f0       	brlt	.+10     	; 0xcbe <_ZN14HardwareSerial5flushEv.part.1+0x22>
     cb4:	fc 01       	movw	r30, r24
     cb6:	80 81       	ld	r24, Z
     cb8:	80 72       	andi	r24, 0x20	; 32
     cba:	88 23       	and	r24, r24
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <_ZN14HardwareSerial5flushEv.part.1+0x26>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <_ZN14HardwareSerial5flushEv.part.1+0x28>
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	88 23       	and	r24, r24
     cc6:	69 f0       	breq	.+26     	; 0xce2 <_ZN14HardwareSerial5flushEv.part.1+0x46>
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	fc 01       	movw	r30, r24
     cce:	80 89       	ldd	r24, Z+16	; 0x10
     cd0:	91 89       	ldd	r25, Z+17	; 0x11
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	80 72       	andi	r24, 0x20	; 32
     cd8:	88 23       	and	r24, r24
     cda:	19 f0       	breq	.+6      	; 0xce2 <_ZN14HardwareSerial5flushEv.part.1+0x46>
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	bb dd       	rcall	.-1162   	; 0x858 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	fc 01       	movw	r30, r24
     ce8:	82 89       	ldd	r24, Z+18	; 0x12
     cea:	93 89       	ldd	r25, Z+19	; 0x13
     cec:	fc 01       	movw	r30, r24
     cee:	20 81       	ld	r18, Z
     cf0:	20 72       	andi	r18, 0x20	; 32
     cf2:	22 23       	and	r18, r18
     cf4:	61 f4       	brne	.+24     	; 0xd0e <_ZN14HardwareSerial5flushEv.part.1+0x72>
     cf6:	29 81       	ldd	r18, Y+1	; 0x01
     cf8:	3a 81       	ldd	r19, Y+2	; 0x02
     cfa:	f9 01       	movw	r30, r18
     cfc:	20 89       	ldd	r18, Z+16	; 0x10
     cfe:	31 89       	ldd	r19, Z+17	; 0x11
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	20 74       	andi	r18, 0x40	; 64
     d06:	22 23       	and	r18, r18
     d08:	21 f0       	breq	.+8      	; 0xd12 <_ZN14HardwareSerial5flushEv.part.1+0x76>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <_ZN14HardwareSerial5flushEv.part.1+0x78>
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <_ZN14HardwareSerial5flushEv.part.1+0x78>
     d12:	21 e0       	ldi	r18, 0x01	; 1
     d14:	22 23       	and	r18, r18
     d16:	51 f6       	brne	.-108    	; 0xcac <_ZN14HardwareSerial5flushEv.part.1+0x10>
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <_ZN14HardwareSerial5writeEh.part.2>:
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	00 d0       	rcall	.+0      	; 0xd28 <_ZN14HardwareSerial5writeEh.part.2+0x6>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <_ZN14HardwareSerial5writeEh.part.2+0x8>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9b 83       	std	Y+3, r25	; 0x03
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	6c 83       	std	Y+4, r22	; 0x04
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	fc 01       	movw	r30, r24
     d3a:	83 8d       	ldd	r24, Z+27	; 0x1b
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	8f 73       	andi	r24, 0x3F	; 63
     d44:	90 78       	andi	r25, 0x80	; 128
     d46:	99 23       	and	r25, r25
     d48:	24 f4       	brge	.+8      	; 0xd52 <_ZN14HardwareSerial5writeEh.part.2+0x30>
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	80 6c       	ori	r24, 0xC0	; 192
     d4e:	9f 6f       	ori	r25, 0xFF	; 255
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	89 83       	std	Y+1, r24	; 0x01
     d54:	11 c0       	rjmp	.+34     	; 0xd78 <_ZN14HardwareSerial5writeEh.part.2+0x56>
     d56:	80 91 5f 00 	lds	r24, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     d5a:	88 23       	and	r24, r24
     d5c:	6c f0       	brlt	.+26     	; 0xd78 <_ZN14HardwareSerial5writeEh.part.2+0x56>
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	fc 01       	movw	r30, r24
     d64:	80 89       	ldd	r24, Z+16	; 0x10
     d66:	91 89       	ldd	r25, Z+17	; 0x11
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	80 72       	andi	r24, 0x20	; 32
     d6e:	88 23       	and	r24, r24
     d70:	19 f0       	breq	.+6      	; 0xd78 <_ZN14HardwareSerial5writeEh.part.2+0x56>
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9b 81       	ldd	r25, Y+3	; 0x03
     d76:	70 dd       	rcall	.-1312   	; 0x858 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	9b 81       	ldd	r25, Y+3	; 0x03
     d7c:	fc 01       	movw	r30, r24
     d7e:	84 8d       	ldd	r24, Z+28	; 0x1c
     d80:	99 81       	ldd	r25, Y+1	; 0x01
     d82:	98 17       	cp	r25, r24
     d84:	41 f3       	breq	.-48     	; 0xd56 <_ZN14HardwareSerial5writeEh.part.2+0x34>
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	fc 01       	movw	r30, r24
     d8c:	83 8d       	ldd	r24, Z+27	; 0x1b
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	2a 81       	ldd	r18, Y+2	; 0x02
     d94:	3b 81       	ldd	r19, Y+3	; 0x03
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	83 5a       	subi	r24, 0xA3	; 163
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	2c 81       	ldd	r18, Y+4	; 0x04
     da0:	fc 01       	movw	r30, r24
     da2:	20 83       	st	Z, r18
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	9b 81       	ldd	r25, Y+3	; 0x03
     da8:	29 81       	ldd	r18, Y+1	; 0x01
     daa:	fc 01       	movw	r30, r24
     dac:	23 8f       	std	Z+27, r18	; 0x1b
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	9b 81       	ldd	r25, Y+3	; 0x03
     db2:	fc 01       	movw	r30, r24
     db4:	82 89       	ldd	r24, Z+18	; 0x12
     db6:	93 89       	ldd	r25, Z+19	; 0x13
     db8:	fc 01       	movw	r30, r24
     dba:	20 81       	ld	r18, Z
     dbc:	20 62       	ori	r18, 0x20	; 32
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 83       	st	Z, r18
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <_ZN5Print17availableForWriteEv>:
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <_ZN5Print17availableForWriteEv+0x6>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <_ZN5Print5flushEv>:
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <_ZN5Print5flushEv+0x6>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <_ZN14HardwareSerial16_rx_complete_irqEv>:
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	00 d0       	rcall	.+0      	; 0xe0a <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	9a 83       	std	Y+2, r25	; 0x02
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	fc 01       	movw	r30, r24
     e18:	80 89       	ldd	r24, Z+16	; 0x10
     e1a:	91 89       	ldd	r25, Z+17	; 0x11
     e1c:	fc 01       	movw	r30, r24
     e1e:	80 81       	ld	r24, Z
     e20:	84 70       	andi	r24, 0x04	; 4
     e22:	88 23       	and	r24, r24
     e24:	21 f4       	brne	.+8      	; 0xe2e <_ZN14HardwareSerial16_rx_complete_irqEv+0x2a>
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	eb d0       	rcall	.+470    	; 0x1002 <_ZN14HardwareSerial16_rx_complete_irqEv.part.0>
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <_ZN14HardwareSerial16_rx_complete_irqEv+0x38>
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	fc 01       	movw	r30, r24
     e34:	86 89       	ldd	r24, Z+22	; 0x16
     e36:	97 89       	ldd	r25, Z+23	; 0x17
     e38:	fc 01       	movw	r30, r24
     e3a:	80 81       	ld	r24, Z
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <__vector_18>:
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	84 e0       	ldi	r24, 0x04	; 4
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	c6 df       	rcall	.-116    	; 0xe04 <_ZN14HardwareSerial16_rx_complete_irqEv>
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	bf 91       	pop	r27
     e82:	af 91       	pop	r26
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	7f 91       	pop	r23
     e8a:	6f 91       	pop	r22
     e8c:	5f 91       	pop	r21
     e8e:	4f 91       	pop	r20
     e90:	3f 91       	pop	r19
     e92:	2f 91       	pop	r18
     e94:	0f 90       	pop	r0
     e96:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__data_load_end+0x7fc5bb>
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_19>:
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__data_load_end+0x7fc5bb>
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	84 e0       	ldi	r24, 0x04	; 4
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	c3 dc       	rcall	.-1658   	; 0x858 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__data_load_end+0x7fc5bb>
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <_Z17Serial0_availablev>:
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	a4 dd       	rcall	.-1208   	; 0xa50 <_ZN14HardwareSerial9availableEv>
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	89 2b       	or	r24, r25
     f0c:	09 f4       	brne	.+2      	; 0xf10 <_Z17Serial0_availablev+0x16>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	82 2f       	mov	r24, r18
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <_Z41__static_initialization_and_destruction_0ii>:
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <_Z41__static_initialization_and_destruction_0ii+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <_Z41__static_initialization_and_destruction_0ii+0x8>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	7c 83       	std	Y+4, r23	; 0x04
     f2a:	6b 83       	std	Y+3, r22	; 0x03
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	09 f0       	breq	.+2      	; 0xf36 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     f34:	53 c0       	rjmp	.+166    	; 0xfdc <_Z41__static_initialization_and_destruction_0ii+0xc4>
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <_Z41__static_initialization_and_destruction_0ii+0x28>
     f3e:	4e c0       	rjmp	.+156    	; 0xfdc <_Z41__static_initialization_and_destruction_0ii+0xc4>
     f40:	85 e4       	ldi	r24, 0x45	; 69
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <Serial+0x1>
     f48:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <Serial>
     f4c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Serial+0x3>
     f50:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <Serial+0x2>
     f54:	80 e3       	ldi	r24, 0x30	; 48
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <Serial+0x1>
     f5c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <Serial>
     f60:	88 ee       	ldi	r24, 0xE8	; 232
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <Serial+0x4>
     f6c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <Serial+0x5>
     f70:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <Serial+0x6>
     f74:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <Serial+0x7>
     f78:	8e e1       	ldi	r24, 0x1E	; 30
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <Serial+0x1>
     f80:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <Serial>
     f84:	85 ec       	ldi	r24, 0xC5	; 197
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Serial+0xd>
     f8c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Serial+0xc>
     f90:	84 ec       	ldi	r24, 0xC4	; 196
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <Serial+0xf>
     f98:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <Serial+0xe>
     f9c:	80 ec       	ldi	r24, 0xC0	; 192
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <Serial+0x11>
     fa4:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <Serial+0x10>
     fa8:	81 ec       	ldi	r24, 0xC1	; 193
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <Serial+0x13>
     fb0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <Serial+0x12>
     fb4:	82 ec       	ldi	r24, 0xC2	; 194
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <Serial+0x15>
     fbc:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <Serial+0x14>
     fc0:	86 ec       	ldi	r24, 0xC6	; 198
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <Serial+0x17>
     fc8:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <Serial+0x16>
     fcc:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <Serial+0x19>
     fd0:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <Serial+0x1a>
     fd4:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <Serial+0x1b>
     fd8:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <Serial+0x1c>
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <_GLOBAL__sub_I___vector_18>:
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	6f ef       	ldi	r22, 0xFF	; 255
     ff4:	7f ef       	ldi	r23, 0xFF	; 255
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	8e df       	rcall	.-228    	; 0xf18 <_Z41__static_initialization_and_destruction_0ii>
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <_ZN14HardwareSerial16_rx_complete_irqEv.part.0>:
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	00 d0       	rcall	.+0      	; 0x1008 <_ZN14HardwareSerial16_rx_complete_irqEv.part.0+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <_ZN14HardwareSerial16_rx_complete_irqEv.part.0+0x8>
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	fc 01       	movw	r30, r24
    1018:	86 89       	ldd	r24, Z+22	; 0x16
    101a:	97 89       	ldd	r25, Z+23	; 0x17
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	fc 01       	movw	r30, r24
    1028:	81 8d       	ldd	r24, Z+25	; 0x19
    102a:	8f 5f       	subi	r24, 0xFF	; 255
    102c:	8f 73       	andi	r24, 0x3F	; 63
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	fc 01       	movw	r30, r24
    1036:	82 8d       	ldd	r24, Z+26	; 0x1a
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	98 17       	cp	r25, r24
    103c:	99 f0       	breq	.+38     	; 0x1064 <_ZN14HardwareSerial16_rx_complete_irqEv.part.0+0x62>
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	fc 01       	movw	r30, r24
    1044:	81 8d       	ldd	r24, Z+25	; 0x19
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	2b 81       	ldd	r18, Y+3	; 0x03
    104c:	3c 81       	ldd	r19, Y+4	; 0x04
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	4d 96       	adiw	r24, 0x1d	; 29
    1054:	29 81       	ldd	r18, Y+1	; 0x01
    1056:	fc 01       	movw	r30, r24
    1058:	20 83       	st	Z, r18
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	2a 81       	ldd	r18, Y+2	; 0x02
    1060:	fc 01       	movw	r30, r24
    1062:	21 8f       	std	Z+25, r18	; 0x19
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <_ZN5Print5writeEPKc>:
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	00 d0       	rcall	.+0      	; 0x107c <_ZN5Print5writeEPKc+0xa>
    107c:	00 d0       	rcall	.+0      	; 0x107e <_ZN5Print5writeEPKc+0xc>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	7c 83       	std	Y+4, r23	; 0x04
    1088:	6b 83       	std	Y+3, r22	; 0x03
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	89 2b       	or	r24, r25
    1090:	a9 f0       	breq	.+42     	; 0x10bc <_ZN5Print5writeEPKc+0x4a>
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	fc 01       	movw	r30, r24
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	fc 01       	movw	r30, r24
    109e:	02 81       	ldd	r16, Z+2	; 0x02
    10a0:	13 81       	ldd	r17, Z+3	; 0x03
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <strlen>
    10aa:	ac 01       	movw	r20, r24
    10ac:	2b 81       	ldd	r18, Y+3	; 0x03
    10ae:	3c 81       	ldd	r19, Y+4	; 0x04
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	b9 01       	movw	r22, r18
    10b6:	f8 01       	movw	r30, r16
    10b8:	09 95       	icall
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <_ZN5Print5writeEPKc+0x4e>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	08 95       	ret

000010d2 <_ZN5Print5writeEPKhj>:
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	2c 97       	sbiw	r28, 0x0c	; 12
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	98 87       	std	Y+8, r25	; 0x08
    10e8:	8f 83       	std	Y+7, r24	; 0x07
    10ea:	7a 87       	std	Y+10, r23	; 0x0a
    10ec:	69 87       	std	Y+9, r22	; 0x09
    10ee:	5c 87       	std	Y+12, r21	; 0x0c
    10f0:	4b 87       	std	Y+11, r20	; 0x0b
    10f2:	1a 82       	std	Y+2, r1	; 0x02
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	25 c0       	rjmp	.+74     	; 0x1142 <_ZN5Print5writeEPKhj+0x70>
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	98 85       	ldd	r25, Y+8	; 0x08
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	fc 01       	movw	r30, r24
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	89 85       	ldd	r24, Y+9	; 0x09
    110a:	9a 85       	ldd	r25, Y+10	; 0x0a
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	89 85       	ldd	r24, Y+9	; 0x09
    1114:	9a 85       	ldd	r25, Y+10	; 0x0a
    1116:	fc 01       	movw	r30, r24
    1118:	40 81       	ld	r20, Z
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
    111c:	98 85       	ldd	r25, Y+8	; 0x08
    111e:	64 2f       	mov	r22, r20
    1120:	f9 01       	movw	r30, r18
    1122:	09 95       	icall
    1124:	89 2b       	or	r24, r25
    1126:	b1 f0       	breq	.+44     	; 0x1154 <_ZN5Print5writeEPKhj+0x82>
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	9c 87       	std	Y+12, r25	; 0x0c
    1138:	8b 87       	std	Y+11, r24	; 0x0b
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	9a 87       	std	Y+10, r25	; 0x0a
    1140:	89 87       	std	Y+9, r24	; 0x09
    1142:	8b 85       	ldd	r24, Y+11	; 0x0b
    1144:	9c 85       	ldd	r25, Y+12	; 0x0c
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	9c 83       	std	Y+4, r25	; 0x04
    114a:	8b 83       	std	Y+3, r24	; 0x03
    114c:	8b 85       	ldd	r24, Y+11	; 0x0b
    114e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1150:	89 2b       	or	r24, r25
    1152:	91 f6       	brne	.-92     	; 0x10f8 <_ZN5Print5writeEPKhj+0x26>
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	2c 96       	adiw	r28, 0x0c	; 12
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <_ZN5Print5printEPKc>:
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	00 d0       	rcall	.+0      	; 0x1170 <_ZN5Print5printEPKc+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <_ZN5Print5printEPKc+0x8>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	7c 83       	std	Y+4, r23	; 0x04
    117c:	6b 83       	std	Y+3, r22	; 0x03
    117e:	2b 81       	ldd	r18, Y+3	; 0x03
    1180:	3c 81       	ldd	r19, Y+4	; 0x04
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	b9 01       	movw	r22, r18
    1188:	74 df       	rcall	.-280    	; 0x1072 <_ZN5Print5writeEPKc>
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <_ZN5Print5printEc>:
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	00 d0       	rcall	.+0      	; 0x119e <_ZN5Print5printEc+0x6>
    119e:	1f 92       	push	r1
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	fc 01       	movw	r30, r24
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 81       	ld	r18, Z
    11b8:	31 81       	ldd	r19, Z+1	; 0x01
    11ba:	4b 81       	ldd	r20, Y+3	; 0x03
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	64 2f       	mov	r22, r20
    11c2:	f9 01       	movw	r30, r18
    11c4:	09 95       	icall
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <_ZN5Print5printEhi>:
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <_ZN5Print5printEhi+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <_ZN5Print5printEhi+0x8>
    11da:	1f 92       	push	r1
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	6b 83       	std	Y+3, r22	; 0x03
    11e6:	5d 83       	std	Y+5, r21	; 0x05
    11e8:	4c 83       	std	Y+4, r20	; 0x04
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a0 e0       	ldi	r26, 0x00	; 0
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	2c 81       	ldd	r18, Y+4	; 0x04
    11f6:	3d 81       	ldd	r19, Y+5	; 0x05
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	ac 01       	movw	r20, r24
    11fe:	bd 01       	movw	r22, r26
    1200:	cf 01       	movw	r24, r30
    1202:	a9 d0       	rcall	.+338    	; 0x1356 <_ZN5Print5printEmi>
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <_ZN5Print5printEii>:
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	00 d0       	rcall	.+0      	; 0x121a <_ZN5Print5printEii+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <_ZN5Print5printEii+0x8>
    121c:	00 d0       	rcall	.+0      	; 0x121e <_ZN5Print5printEii+0xa>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	7c 83       	std	Y+4, r23	; 0x04
    1228:	6b 83       	std	Y+3, r22	; 0x03
    122a:	5e 83       	std	Y+6, r21	; 0x06
    122c:	4d 83       	std	Y+5, r20	; 0x05
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	09 2e       	mov	r0, r25
    1234:	00 0c       	add	r0, r0
    1236:	aa 0b       	sbc	r26, r26
    1238:	bb 0b       	sbc	r27, r27
    123a:	2d 81       	ldd	r18, Y+5	; 0x05
    123c:	3e 81       	ldd	r19, Y+6	; 0x06
    123e:	e9 81       	ldd	r30, Y+1	; 0x01
    1240:	fa 81       	ldd	r31, Y+2	; 0x02
    1242:	ac 01       	movw	r20, r24
    1244:	bd 01       	movw	r22, r26
    1246:	cf 01       	movw	r24, r30
    1248:	2c d0       	rcall	.+88     	; 0x12a2 <_ZN5Print5printEli>
    124a:	26 96       	adiw	r28, 0x06	; 6
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <_ZN5Print5printEji>:
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	00 d0       	rcall	.+0      	; 0x1262 <_ZN5Print5printEji+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <_ZN5Print5printEji+0x8>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <_ZN5Print5printEji+0xa>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	7c 83       	std	Y+4, r23	; 0x04
    1270:	6b 83       	std	Y+3, r22	; 0x03
    1272:	5e 83       	std	Y+6, r21	; 0x06
    1274:	4d 83       	std	Y+5, r20	; 0x05
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	cc 01       	movw	r24, r24
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	2d 81       	ldd	r18, Y+5	; 0x05
    1282:	3e 81       	ldd	r19, Y+6	; 0x06
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	ac 01       	movw	r20, r24
    128a:	bd 01       	movw	r22, r26
    128c:	cf 01       	movw	r24, r30
    128e:	63 d0       	rcall	.+198    	; 0x1356 <_ZN5Print5printEmi>
    1290:	26 96       	adiw	r28, 0x06	; 6
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <_ZN5Print5printEli>:
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	28 97       	sbiw	r28, 0x08	; 8
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	4b 83       	std	Y+3, r20	; 0x03
    12bc:	5c 83       	std	Y+4, r21	; 0x04
    12be:	6d 83       	std	Y+5, r22	; 0x05
    12c0:	7e 83       	std	Y+6, r23	; 0x06
    12c2:	38 87       	std	Y+8, r19	; 0x08
    12c4:	2f 83       	std	Y+7, r18	; 0x07
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	98 85       	ldd	r25, Y+8	; 0x08
    12ca:	89 2b       	or	r24, r25
    12cc:	79 f4       	brne	.+30     	; 0x12ec <_ZN5Print5printEli+0x4a>
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	fc 01       	movw	r30, r24
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	fc 01       	movw	r30, r24
    12da:	20 81       	ld	r18, Z
    12dc:	31 81       	ldd	r19, Z+1	; 0x01
    12de:	4b 81       	ldd	r20, Y+3	; 0x03
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	64 2f       	mov	r22, r20
    12e6:	f9 01       	movw	r30, r18
    12e8:	09 95       	icall
    12ea:	2c c0       	rjmp	.+88     	; 0x1344 <_ZN5Print5printEli+0xa2>
    12ec:	8f 81       	ldd	r24, Y+7	; 0x07
    12ee:	98 85       	ldd	r25, Y+8	; 0x08
    12f0:	0a 97       	sbiw	r24, 0x0a	; 10
    12f2:	e9 f4       	brne	.+58     	; 0x132e <_ZN5Print5printEli+0x8c>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	ad 81       	ldd	r26, Y+5	; 0x05
    12fa:	be 81       	ldd	r27, Y+6	; 0x06
    12fc:	bb 23       	and	r27, r27
    12fe:	5c f4       	brge	.+22     	; 0x1316 <_ZN5Print5printEli+0x74>
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	ad 81       	ldd	r26, Y+5	; 0x05
    1306:	be 81       	ldd	r27, Y+6	; 0x06
    1308:	29 81       	ldd	r18, Y+1	; 0x01
    130a:	3a 81       	ldd	r19, Y+2	; 0x02
    130c:	ac 01       	movw	r20, r24
    130e:	bd 01       	movw	r22, r26
    1310:	c9 01       	movw	r24, r18
    1312:	42 d1       	rcall	.+644    	; 0x1598 <_ZN5Print5printEli.part.2>
    1314:	17 c0       	rjmp	.+46     	; 0x1344 <_ZN5Print5printEli+0xa2>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	ad 81       	ldd	r26, Y+5	; 0x05
    131c:	be 81       	ldd	r27, Y+6	; 0x06
    131e:	e9 81       	ldd	r30, Y+1	; 0x01
    1320:	fa 81       	ldd	r31, Y+2	; 0x02
    1322:	2a e0       	ldi	r18, 0x0A	; 10
    1324:	ac 01       	movw	r20, r24
    1326:	bd 01       	movw	r22, r26
    1328:	cf 01       	movw	r24, r30
    132a:	b6 d0       	rcall	.+364    	; 0x1498 <_ZN5Print11printNumberEmh>
    132c:	0b c0       	rjmp	.+22     	; 0x1344 <_ZN5Print5printEli+0xa2>
    132e:	2f 81       	ldd	r18, Y+7	; 0x07
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	ad 81       	ldd	r26, Y+5	; 0x05
    1336:	be 81       	ldd	r27, Y+6	; 0x06
    1338:	e9 81       	ldd	r30, Y+1	; 0x01
    133a:	fa 81       	ldd	r31, Y+2	; 0x02
    133c:	ac 01       	movw	r20, r24
    133e:	bd 01       	movw	r22, r26
    1340:	cf 01       	movw	r24, r30
    1342:	aa d0       	rcall	.+340    	; 0x1498 <_ZN5Print11printNumberEmh>
    1344:	28 96       	adiw	r28, 0x08	; 8
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <_ZN5Print5printEmi>:
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	28 97       	sbiw	r28, 0x08	; 8
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	4b 83       	std	Y+3, r20	; 0x03
    1370:	5c 83       	std	Y+4, r21	; 0x04
    1372:	6d 83       	std	Y+5, r22	; 0x05
    1374:	7e 83       	std	Y+6, r23	; 0x06
    1376:	38 87       	std	Y+8, r19	; 0x08
    1378:	2f 83       	std	Y+7, r18	; 0x07
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	89 2b       	or	r24, r25
    1380:	59 f4       	brne	.+22     	; 0x1398 <_ZN5Print5printEmi+0x42>
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	ad 81       	ldd	r26, Y+5	; 0x05
    1388:	be 81       	ldd	r27, Y+6	; 0x06
    138a:	29 81       	ldd	r18, Y+1	; 0x01
    138c:	3a 81       	ldd	r19, Y+2	; 0x02
    138e:	ac 01       	movw	r20, r24
    1390:	bd 01       	movw	r22, r26
    1392:	c9 01       	movw	r24, r18
    1394:	3c d1       	rcall	.+632    	; 0x160e <_ZN5Print5printEmi.part.3>
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <_ZN5Print5printEmi+0x58>
    1398:	2f 81       	ldd	r18, Y+7	; 0x07
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	ad 81       	ldd	r26, Y+5	; 0x05
    13a0:	be 81       	ldd	r27, Y+6	; 0x06
    13a2:	e9 81       	ldd	r30, Y+1	; 0x01
    13a4:	fa 81       	ldd	r31, Y+2	; 0x02
    13a6:	ac 01       	movw	r20, r24
    13a8:	bd 01       	movw	r22, r26
    13aa:	cf 01       	movw	r24, r30
    13ac:	75 d0       	rcall	.+234    	; 0x1498 <_ZN5Print11printNumberEmh>
    13ae:	28 96       	adiw	r28, 0x08	; 8
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <_ZN5Print7printlnEv>:
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <_ZN5Print7printlnEv+0x6>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	6e e3       	ldi	r22, 0x3E	; 62
    13d4:	71 e0       	ldi	r23, 0x01	; 1
    13d6:	4d de       	rcall	.-870    	; 0x1072 <_ZN5Print5writeEPKc>
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <_ZN5Print7printlnEPKc>:
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <_ZN5Print7printlnEPKc+0xa>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <_ZN5Print7printlnEPKc+0xc>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <_ZN5Print7printlnEPKc+0xe>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	9c 83       	std	Y+4, r25	; 0x04
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	7e 83       	std	Y+6, r23	; 0x06
    13fa:	6d 83       	std	Y+5, r22	; 0x05
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	b9 01       	movw	r22, r18
    1406:	35 de       	rcall	.-918    	; 0x1072 <_ZN5Print5writeEPKc>
    1408:	8c 01       	movw	r16, r24
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	d8 df       	rcall	.-80     	; 0x13c0 <_ZN5Print7printlnEv>
    1410:	80 0f       	add	r24, r16
    1412:	91 1f       	adc	r25, r17
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	26 96       	adiw	r28, 0x06	; 6
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <_ZN5Print7printlnEhi>:
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	27 97       	sbiw	r28, 0x07	; 7
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	6d 83       	std	Y+5, r22	; 0x05
    1450:	5f 83       	std	Y+7, r21	; 0x07
    1452:	4e 83       	std	Y+6, r20	; 0x06
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a0 e0       	ldi	r26, 0x00	; 0
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	2e 81       	ldd	r18, Y+6	; 0x06
    1460:	3f 81       	ldd	r19, Y+7	; 0x07
    1462:	eb 81       	ldd	r30, Y+3	; 0x03
    1464:	fc 81       	ldd	r31, Y+4	; 0x04
    1466:	ac 01       	movw	r20, r24
    1468:	bd 01       	movw	r22, r26
    146a:	cf 01       	movw	r24, r30
    146c:	74 df       	rcall	.-280    	; 0x1356 <_ZN5Print5printEmi>
    146e:	8c 01       	movw	r16, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	a5 df       	rcall	.-182    	; 0x13c0 <_ZN5Print7printlnEv>
    1476:	80 0f       	add	r24, r16
    1478:	91 1f       	adc	r25, r17
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	27 96       	adiw	r28, 0x07	; 7
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <_ZN5Print11printNumberEmh>:
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	e3 97       	sbiw	r28, 0x33	; 51
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	9e a3       	std	Y+38, r25	; 0x26
    14be:	8d a3       	std	Y+37, r24	; 0x25
    14c0:	4f a3       	std	Y+39, r20	; 0x27
    14c2:	58 a7       	std	Y+40, r21	; 0x28
    14c4:	69 a7       	std	Y+41, r22	; 0x29
    14c6:	7a a7       	std	Y+42, r23	; 0x2a
    14c8:	2b a7       	std	Y+43, r18	; 0x2b
    14ca:	1c a2       	std	Y+36, r1	; 0x24
    14cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	40 f4       	brcc	.+16     	; 0x14e2 <_ZN5Print11printNumberEmh+0x4a>
    14d2:	ce 01       	movw	r24, r28
    14d4:	04 96       	adiw	r24, 0x04	; 4
    14d6:	80 96       	adiw	r24, 0x20	; 32
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	8a e0       	ldi	r24, 0x0A	; 10
    14de:	8b a7       	std	Y+43, r24	; 0x2b
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <_ZN5Print11printNumberEmh+0x54>
    14e2:	ce 01       	movw	r24, r28
    14e4:	04 96       	adiw	r24, 0x04	; 4
    14e6:	80 96       	adiw	r24, 0x20	; 32
    14e8:	9a 83       	std	Y+2, r25	; 0x02
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ee:	e8 2e       	mov	r14, r24
    14f0:	f1 2c       	mov	r15, r1
    14f2:	00 e0       	ldi	r16, 0x00	; 0
    14f4:	10 e0       	ldi	r17, 0x00	; 0
    14f6:	8f a1       	ldd	r24, Y+39	; 0x27
    14f8:	98 a5       	ldd	r25, Y+40	; 0x28
    14fa:	a9 a5       	ldd	r26, Y+41	; 0x29
    14fc:	ba a5       	ldd	r27, Y+42	; 0x2a
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	a8 01       	movw	r20, r16
    1504:	97 01       	movw	r18, r14
    1506:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__udivmodsi4>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	5c 01       	movw	r10, r24
    1510:	6d 01       	movw	r12, r26
    1512:	ab 82       	std	Y+3, r10	; 0x03
    1514:	8f a1       	ldd	r24, Y+39	; 0x27
    1516:	98 a5       	ldd	r25, Y+40	; 0x28
    1518:	a9 a5       	ldd	r26, Y+41	; 0x29
    151a:	ba a5       	ldd	r27, Y+42	; 0x2a
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	a8 01       	movw	r20, r16
    1522:	97 01       	movw	r18, r14
    1524:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__udivmodsi4>
    1528:	da 01       	movw	r26, r20
    152a:	c9 01       	movw	r24, r18
    152c:	8f a3       	std	Y+39, r24	; 0x27
    152e:	98 a7       	std	Y+40, r25	; 0x28
    1530:	a9 a7       	std	Y+41, r26	; 0x29
    1532:	ba a7       	std	Y+42, r27	; 0x2a
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	8a 30       	cpi	r24, 0x0A	; 10
    1542:	24 f4       	brge	.+8      	; 0x154c <_ZN5Print11printNumberEmh+0xb4>
    1544:	8a 2d       	mov	r24, r10
    1546:	80 5d       	subi	r24, 0xD0	; 208
    1548:	28 2f       	mov	r18, r24
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <_ZN5Print11printNumberEmh+0xba>
    154c:	8a 2d       	mov	r24, r10
    154e:	89 5c       	subi	r24, 0xC9	; 201
    1550:	28 2f       	mov	r18, r24
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
    155a:	8f a1       	ldd	r24, Y+39	; 0x27
    155c:	98 a5       	ldd	r25, Y+40	; 0x28
    155e:	a9 a5       	ldd	r26, Y+41	; 0x29
    1560:	ba a5       	ldd	r27, Y+42	; 0x2a
    1562:	89 2b       	or	r24, r25
    1564:	8a 2b       	or	r24, r26
    1566:	8b 2b       	or	r24, r27
    1568:	09 f6       	brne	.-126    	; 0x14ec <_ZN5Print11printNumberEmh+0x54>
    156a:	29 81       	ldd	r18, Y+1	; 0x01
    156c:	3a 81       	ldd	r19, Y+2	; 0x02
    156e:	8d a1       	ldd	r24, Y+37	; 0x25
    1570:	9e a1       	ldd	r25, Y+38	; 0x26
    1572:	b9 01       	movw	r22, r18
    1574:	7e dd       	rcall	.-1284   	; 0x1072 <_ZN5Print5writeEPKc>
    1576:	e3 96       	adiw	r28, 0x33	; 51
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	08 95       	ret

00001598 <_ZN5Print5printEli.part.2>:
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <_ZN5Print5printEli.part.2+0xa>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <_ZN5Print5printEli.part.2+0xc>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <_ZN5Print5printEli.part.2+0xe>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	4b 83       	std	Y+3, r20	; 0x03
    15b0:	5c 83       	std	Y+4, r21	; 0x04
    15b2:	6d 83       	std	Y+5, r22	; 0x05
    15b4:	7e 83       	std	Y+6, r23	; 0x06
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	6d e2       	ldi	r22, 0x2D	; 45
    15bc:	ed dd       	rcall	.-1062   	; 0x1198 <_ZN5Print5printEc>
    15be:	8c 01       	movw	r16, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	ad 81       	ldd	r26, Y+5	; 0x05
    15c6:	be 81       	ldd	r27, Y+6	; 0x06
    15c8:	b0 95       	com	r27
    15ca:	a0 95       	com	r26
    15cc:	90 95       	com	r25
    15ce:	81 95       	neg	r24
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	af 4f       	sbci	r26, 0xFF	; 255
    15d4:	bf 4f       	sbci	r27, 0xFF	; 255
    15d6:	8b 83       	std	Y+3, r24	; 0x03
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	ad 83       	std	Y+5, r26	; 0x05
    15dc:	be 83       	std	Y+6, r27	; 0x06
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	ad 81       	ldd	r26, Y+5	; 0x05
    15e4:	be 81       	ldd	r27, Y+6	; 0x06
    15e6:	e9 81       	ldd	r30, Y+1	; 0x01
    15e8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ea:	2a e0       	ldi	r18, 0x0A	; 10
    15ec:	ac 01       	movw	r20, r24
    15ee:	bd 01       	movw	r22, r26
    15f0:	cf 01       	movw	r24, r30
    15f2:	52 df       	rcall	.-348    	; 0x1498 <_ZN5Print11printNumberEmh>
    15f4:	80 0f       	add	r24, r16
    15f6:	91 1f       	adc	r25, r17
    15f8:	26 96       	adiw	r28, 0x06	; 6
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	08 95       	ret

0000160e <_ZN5Print5printEmi.part.3>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	00 d0       	rcall	.+0      	; 0x1614 <_ZN5Print5printEmi.part.3+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <_ZN5Print5printEmi.part.3+0x8>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <_ZN5Print5printEmi.part.3+0xa>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	4b 83       	std	Y+3, r20	; 0x03
    1622:	5c 83       	std	Y+4, r21	; 0x04
    1624:	6d 83       	std	Y+5, r22	; 0x05
    1626:	7e 83       	std	Y+6, r23	; 0x06
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	fc 01       	movw	r30, r24
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	fc 01       	movw	r30, r24
    1634:	20 81       	ld	r18, Z
    1636:	31 81       	ldd	r19, Z+1	; 0x01
    1638:	4b 81       	ldd	r20, Y+3	; 0x03
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	64 2f       	mov	r22, r20
    1640:	f9 01       	movw	r30, r18
    1642:	09 95       	icall
    1644:	26 96       	adiw	r28, 0x06	; 6
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret

00001656 <__cxa_pure_virtual>:
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <abort>
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	00 d0       	rcall	.+0      	; 0x1668 <__cxa_pure_virtual+0x12>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <initVariant>:
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <main>:
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	0e 94 51 02 	call	0x4a2	; 0x4a2 <init>
    1698:	f2 df       	rcall	.-28     	; 0x167e <initVariant>
    169a:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <setup>
    169e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <loop>
    16a2:	c3 d8       	rcall	.-3706   	; 0x82a <_Z14serialEventRunv>
    16a4:	fc cf       	rjmp	.-8      	; 0x169e <main+0x12>

000016a6 <_ZdlPv>:
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <_ZdlPv+0x6>
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	9a 81       	ldd	r25, Y+2	; 0x02
    16b8:	0e 94 08 1c 	call	0x3810	; 0x3810 <free>
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <_Z10blink_animR9LEDMatrixiihhhhhh>:
#include <Animations.h>

// flashes the screen between two colors
void blink_anim(LEDMatrix &matrix, int delay_ms, int count, uint8_t r1, uint8_t g1,
		uint8_t b1, uint8_t r2, uint8_t g2, uint8_t b2) {
    16c6:	2f 92       	push	r2
    16c8:	3f 92       	push	r3
    16ca:	4f 92       	push	r4
    16cc:	5f 92       	push	r5
    16ce:	6f 92       	push	r6
    16d0:	7f 92       	push	r7
    16d2:	8f 92       	push	r8
    16d4:	af 92       	push	r10
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <_Z10blink_animR9LEDMatrixiihhhhhh+0x22>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	3c 01       	movw	r6, r24
    16ee:	5a 83       	std	Y+2, r21	; 0x02
    16f0:	49 83       	std	Y+1, r20	; 0x01
    16f2:	f2 2e       	mov	r15, r18
    16f4:	d0 2e       	mov	r13, r16
	for (int i = 0; i < count; i++) {
    16f6:	00 e0       	ldi	r16, 0x00	; 0
    16f8:	10 e0       	ldi	r17, 0x00	; 0
		matrix.set_all(r1, g1, b1);
		matrix.flip();
		delay(delay_ms);
    16fa:	1b 01       	movw	r2, r22
    16fc:	77 0f       	add	r23, r23
    16fe:	44 08       	sbc	r4, r4
    1700:	55 08       	sbc	r5, r5
#include <Animations.h>

// flashes the screen between two colors
void blink_anim(LEDMatrix &matrix, int delay_ms, int count, uint8_t r1, uint8_t g1,
		uint8_t b1, uint8_t r2, uint8_t g2, uint8_t b2) {
	for (int i = 0; i < count; i++) {
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	08 17       	cp	r16, r24
    1708:	19 07       	cpc	r17, r25
    170a:	cc f4       	brge	.+50     	; 0x173e <_Z10blink_animR9LEDMatrixiihhhhhh+0x78>
		matrix.set_all(r1, g1, b1);
    170c:	2e 2d       	mov	r18, r14
    170e:	4d 2d       	mov	r20, r13
    1710:	6f 2d       	mov	r22, r15
    1712:	c3 01       	movw	r24, r6
    1714:	d3 d0       	rcall	.+422    	; 0x18bc <_ZN9LEDMatrix7set_allEhhh>
    1716:	c3 01       	movw	r24, r6
		matrix.flip();
    1718:	cc d0       	rcall	.+408    	; 0x18b2 <_ZN9LEDMatrix4flipEv>
    171a:	c2 01       	movw	r24, r4
    171c:	b1 01       	movw	r22, r2
		delay(delay_ms);
    171e:	0e 94 c9 01 	call	0x392	; 0x392 <delay>
    1722:	28 2d       	mov	r18, r8
    1724:	4a 2d       	mov	r20, r10
		matrix.set_all(r2, g2, b2);
    1726:	6c 2d       	mov	r22, r12
    1728:	c3 01       	movw	r24, r6
    172a:	c8 d0       	rcall	.+400    	; 0x18bc <_ZN9LEDMatrix7set_allEhhh>
    172c:	c3 01       	movw	r24, r6
    172e:	c1 d0       	rcall	.+386    	; 0x18b2 <_ZN9LEDMatrix4flipEv>
    1730:	c2 01       	movw	r24, r4
		matrix.flip();
    1732:	b1 01       	movw	r22, r2
    1734:	0e 94 c9 01 	call	0x392	; 0x392 <delay>
		delay(delay_ms);
    1738:	0f 5f       	subi	r16, 0xFF	; 255
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	e2 cf       	rjmp	.-60     	; 0x1702 <_Z10blink_animR9LEDMatrixiihhhhhh+0x3c>
    173e:	0f 90       	pop	r0
#include <Animations.h>

// flashes the screen between two colors
void blink_anim(LEDMatrix &matrix, int delay_ms, int count, uint8_t r1, uint8_t g1,
		uint8_t b1, uint8_t r2, uint8_t g2, uint8_t b2) {
	for (int i = 0; i < count; i++) {
    1740:	0f 90       	pop	r0
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
		delay(delay_ms);
		matrix.set_all(r2, g2, b2);
		matrix.flip();
		delay(delay_ms);
	}
}
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	cf 90       	pop	r12
    1752:	af 90       	pop	r10
    1754:	8f 90       	pop	r8
    1756:	7f 90       	pop	r7
    1758:	6f 90       	pop	r6
    175a:	5f 90       	pop	r5
    175c:	4f 90       	pop	r4
    175e:	3f 90       	pop	r3
    1760:	2f 90       	pop	r2
    1762:	08 95       	ret

00001764 <_ZN14CLEDController4sizeEv>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    1764:	fc 01       	movw	r30, r24
    1766:	85 85       	ldd	r24, Z+13	; 0x0d
    1768:	96 85       	ldd	r25, Z+14	; 0x0e
    176a:	08 95       	ret

0000176c <_ZN14CLEDController9clearLedsEi>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	00 d0       	rcall	.+0      	; 0x1772 <_ZN14CLEDController9clearLedsEi+0x6>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <_ZN14CLEDController9clearLedsEi+0x8>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <_ZN14CLEDController9clearLedsEi+0xa>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	ab 01       	movw	r20, r22
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    177c:	1c 82       	std	Y+4, r1	; 0x04
    177e:	1d 82       	std	Y+5, r1	; 0x05
    1780:	1e 82       	std	Y+6, r1	; 0x06
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
    1782:	dc 01       	movw	r26, r24
    1784:	ed 91       	ld	r30, X+
    1786:	fc 91       	ld	r31, X
    1788:	01 90       	ld	r0, Z+
    178a:	f0 81       	ld	r31, Z
    178c:	e0 2d       	mov	r30, r0
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    178e:	19 82       	std	Y+1, r1	; 0x01
    1790:	1a 82       	std	Y+2, r1	; 0x02
    1792:	1b 82       	std	Y+3, r1	; 0x03
    1794:	9e 01       	movw	r18, r28
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	be 01       	movw	r22, r28
    179c:	6c 5f       	subi	r22, 0xFC	; 252
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	09 95       	icall

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
    17a2:	26 96       	adiw	r28, 0x06	; 6
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <_ZNK19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE17getMaxRefreshRateEv>:
public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
	}

	virtual uint16_t getMaxRefreshRate() const { return 400; }
    17b4:	80 e9       	ldi	r24, 0x90	; 144
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	08 95       	ret

000017ba <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE4initEv>:
template<uint8_t PIN, uint8_t _MASK, typename _PORT, typename _DDR, typename _PIN> class _AVRPIN {
public:
	typedef volatile uint8_t * port_ptr_t;
	typedef uint8_t port_t;

	inline static void setOutput() { _DDR::r() |= _MASK; }
    17ba:	22 9a       	sbi	0x04, 2	; 4
    17bc:	08 95       	ret

000017be <_ZN9LEDMatrixD1Ev>:
	FastLED.addLeds<WS2812B, DATA_PIN, GRB>(this->leds, this->num_leds);


}

LEDMatrix::~LEDMatrix() {
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	ec 01       	movw	r28, r24
    17c4:	81 e5       	ldi	r24, 0x51	; 81
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	99 83       	std	Y+1, r25	; 0x01
    17ca:	88 83       	st	Y, r24
	// TODO Auto-generated destructor stub
	free(leds);
    17cc:	88 85       	ldd	r24, Y+8	; 0x08
    17ce:	99 85       	ldd	r25, Y+9	; 0x09
    17d0:	0e 94 08 1c 	call	0x3810	; 0x3810 <free>
	free(background);
    17d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d6:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
}

LEDMatrix::~LEDMatrix() {
	// TODO Auto-generated destructor stub
	free(leds);
	free(background);
    17dc:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <free>

000017e0 <_ZN9LEDMatrixD0Ev>:
	FastLED.addLeds<WS2812B, DATA_PIN, GRB>(this->leds, this->num_leds);


}

LEDMatrix::~LEDMatrix() {
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
	// TODO Auto-generated destructor stub
	free(leds);
	free(background);
}
    17e6:	eb df       	rcall	.-42     	; 0x17be <_ZN9LEDMatrixD1Ev>
    17e8:	ce 01       	movw	r24, r28
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	5b cf       	rjmp	.-330    	; 0x16a6 <_ZdlPv>

000017f0 <_ZN9LEDMatrixC1Ev>:

#include <LEDMatrix.h>

#define DATA_PIN 10

LEDMatrix::LEDMatrix() {
    17f0:	fc 01       	movw	r30, r24
    17f2:	81 e5       	ldi	r24, 0x51	; 81
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub
	this->rows = 0;
    17fa:	15 82       	std	Z+5, r1	; 0x05
    17fc:	14 82       	std	Z+4, r1	; 0x04
	this->columns = 0;
    17fe:	13 82       	std	Z+3, r1	; 0x03
    1800:	12 82       	std	Z+2, r1	; 0x02
	this->num_leds = 0;
    1802:	17 82       	std	Z+7, r1	; 0x07
    1804:	16 82       	std	Z+6, r1	; 0x06
	this->leds = nullptr;
    1806:	11 86       	std	Z+9, r1	; 0x09
    1808:	10 86       	std	Z+8, r1	; 0x08
	this->background = nullptr;
    180a:	13 86       	std	Z+11, r1	; 0x0b
    180c:	12 86       	std	Z+10, r1	; 0x0a
    180e:	08 95       	ret

00001810 <_ZN9LEDMatrix9map_snakeEjj>:
	// TODO Auto-generated destructor stub
	free(leds);
	free(background);
}

uint16_t LEDMatrix::map_snake(uint16_t x, uint16_t y) {
    1810:	dc 01       	movw	r26, r24
    1812:	12 96       	adiw	r26, 0x02	; 2
    1814:	ed 91       	ld	r30, X+
    1816:	fc 91       	ld	r31, X
    1818:	13 97       	sbiw	r26, 0x03	; 3
    181a:	14 96       	adiw	r26, 0x04	; 4
    181c:	2d 91       	ld	r18, X+
    181e:	3c 91       	ld	r19, X
    1820:	15 97       	sbiw	r26, 0x05	; 5
	if (y % 2) {
    1822:	40 ff       	sbrs	r20, 0
    1824:	14 c0       	rjmp	.+40     	; 0x184e <_ZN9LEDMatrix9map_snakeEjj+0x3e>
    1826:	cf 01       	movw	r24, r30
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	dc 01       	movw	r26, r24
    182c:	a6 1b       	sub	r26, r22
    182e:	b7 0b       	sbc	r27, r23
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	31 09       	sbc	r19, r1
		// second, fourth, sixth . . . row
		return (this->rows - y - 1) * this->columns + (this->columns - x - 1);
    1834:	24 1b       	sub	r18, r20
    1836:	35 0b       	sbc	r19, r21
    1838:	2e 9f       	mul	r18, r30
    183a:	a0 01       	movw	r20, r0
    183c:	2f 9f       	mul	r18, r31
    183e:	50 0d       	add	r21, r0
    1840:	3e 9f       	mul	r19, r30
    1842:	50 0d       	add	r21, r0
    1844:	11 24       	eor	r1, r1
    1846:	cd 01       	movw	r24, r26
    1848:	84 0f       	add	r24, r20
    184a:	95 1f       	adc	r25, r21
    184c:	08 95       	ret
    184e:	21 50       	subi	r18, 0x01	; 1
    1850:	31 09       	sbc	r19, r1
	} else {
		// first, third, fith . . . row
		return (this->rows - y - 1) * this->columns + x;
    1852:	24 1b       	sub	r18, r20
    1854:	35 0b       	sbc	r19, r21
    1856:	2e 9f       	mul	r18, r30
    1858:	c0 01       	movw	r24, r0
    185a:	2f 9f       	mul	r18, r31
    185c:	90 0d       	add	r25, r0
    185e:	3e 9f       	mul	r19, r30
    1860:	90 0d       	add	r25, r0
    1862:	11 24       	eor	r1, r1
    1864:	86 0f       	add	r24, r22
    1866:	97 1f       	adc	r25, r23
	}
}
    1868:	08 95       	ret

0000186a <_ZN9LEDMatrix7set_ledEjjhhh>:

void LEDMatrix::set_led(uint16_t x, uint16_t y, uint8_t r, uint8_t g,
		uint8_t b) {
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	0f 93       	push	r16
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	1f 92       	push	r1
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	6c 01       	movw	r12, r24
	this->leds[this->map_snake(x, y)].setRGB(r, g, b);
    187e:	29 83       	std	Y+1, r18	; 0x01
    1880:	c7 df       	rcall	.-114    	; 0x1810 <_ZN9LEDMatrix9map_snakeEjj>
    1882:	fc 01       	movw	r30, r24
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	e8 0f       	add	r30, r24
    188a:	f9 1f       	adc	r31, r25
    188c:	d6 01       	movw	r26, r12
    188e:	18 96       	adiw	r26, 0x08	; 8
    1890:	8d 91       	ld	r24, X+
    1892:	9c 91       	ld	r25, X
    1894:	19 97       	sbiw	r26, 0x09	; 9
    1896:	e8 0f       	add	r30, r24
    1898:	f9 1f       	adc	r31, r25
    189a:	29 81       	ldd	r18, Y+1	; 0x01
    }

    /// allow assignment from R, G, and B
	inline CRGB& setRGB (uint8_t nr, uint8_t ng, uint8_t nb) __attribute__((always_inline))
    {
        r = nr;
    189c:	20 83       	st	Z, r18
    189e:	01 83       	std	Z+1, r16	; 0x01
        g = ng;
    18a0:	e2 82       	std	Z+2, r14	; 0x02
    18a2:	0f 90       	pop	r0
}
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	0f 91       	pop	r16
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	08 95       	ret

000018b2 <_ZN9LEDMatrix4flipEv>:
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    18b2:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <FastLED>
    18b6:	8f ec       	ldi	r24, 0xCF	; 207
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	49 c6       	rjmp	.+3218   	; 0x254e <_ZN8CFastLED4showEh>

000018bc <_ZN9LEDMatrix7set_allEhhh>:

void LEDMatrix::flip() {
	FastLED.show();
}

void LEDMatrix::set_all(uint8_t r, uint8_t g, uint8_t b) {
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
	for (uint16_t i = 0; i < this->num_leds; i++) {
    18c4:	c0 e0       	ldi	r28, 0x00	; 0
    18c6:	d0 e0       	ldi	r29, 0x00	; 0
    18c8:	a0 e0       	ldi	r26, 0x00	; 0
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	fc 01       	movw	r30, r24
    18ce:	06 81       	ldd	r16, Z+6	; 0x06
    18d0:	17 81       	ldd	r17, Z+7	; 0x07
    18d2:	a0 17       	cp	r26, r16
    18d4:	b1 07       	cpc	r27, r17
    18d6:	60 f4       	brcc	.+24     	; 0x18f0 <_ZN9LEDMatrix7set_allEhhh+0x34>
		this->leds[i].setRGB(r, g, b);
    18d8:	fc 01       	movw	r30, r24
    18da:	00 85       	ldd	r16, Z+8	; 0x08
    18dc:	11 85       	ldd	r17, Z+9	; 0x09
    18de:	f8 01       	movw	r30, r16
    18e0:	ec 0f       	add	r30, r28
    18e2:	fd 1f       	adc	r31, r29
    }

    /// allow assignment from R, G, and B
	inline CRGB& setRGB (uint8_t nr, uint8_t ng, uint8_t nb) __attribute__((always_inline))
    {
        r = nr;
    18e4:	60 83       	st	Z, r22
        g = ng;
    18e6:	41 83       	std	Z+1, r20	; 0x01
        b = nb;
    18e8:	22 83       	std	Z+2, r18	; 0x02
void LEDMatrix::flip() {
	FastLED.show();
}

void LEDMatrix::set_all(uint8_t r, uint8_t g, uint8_t b) {
	for (uint16_t i = 0; i < this->num_leds; i++) {
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	23 96       	adiw	r28, 0x03	; 3
    18ee:	ee cf       	rjmp	.-36     	; 0x18cc <_ZN9LEDMatrix7set_allEhhh+0x10>
		this->leds[i].setRGB(r, g, b);
	}
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	08 95       	ret

000018fa <_ZN9LEDMatrixC1Ejjb>:
	this->num_leds = 0;
	this->leds = nullptr;
	this->background = nullptr;
}

LEDMatrix::LEDMatrix(uint16_t columns, uint16_t rows, bool background) {
    18fa:	cf 92       	push	r12
    18fc:	df 92       	push	r13
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	00 d0       	rcall	.+0      	; 0x190c <_ZN9LEDMatrixC1Ejjb+0x12>
    190c:	1f 92       	push	r1
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	8c 01       	movw	r16, r24
    1914:	81 e5       	ldi	r24, 0x51	; 81
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	f8 01       	movw	r30, r16
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
	// saves the size of the matrix
	this->rows = rows;
    191e:	55 83       	std	Z+5, r21	; 0x05
    1920:	44 83       	std	Z+4, r20	; 0x04
	this->columns = columns;
    1922:	73 83       	std	Z+3, r23	; 0x03
    1924:	62 83       	std	Z+2, r22	; 0x02
	this->num_leds = rows * columns;
    1926:	46 9f       	mul	r20, r22
    1928:	70 01       	movw	r14, r0
    192a:	47 9f       	mul	r20, r23
    192c:	f0 0c       	add	r15, r0
    192e:	56 9f       	mul	r21, r22
    1930:	f0 0c       	add	r15, r0
    1932:	11 24       	eor	r1, r1
    1934:	f7 82       	std	Z+7, r15	; 0x07
    1936:	e6 82       	std	Z+6, r14	; 0x06
    1938:	67 01       	movw	r12, r14
    193a:	cc 0c       	add	r12, r12
    193c:	dd 1c       	adc	r13, r13

	if (background) {
    193e:	22 23       	and	r18, r18
    1940:	c9 f0       	breq	.+50     	; 0x1974 <_ZN9LEDMatrixC1Ejjb+0x7a>
		// allocates memory for background.
		this->background = (CRGB*) malloc(this->num_leds * sizeof(CRGB));
    1942:	c6 01       	movw	r24, r12
    1944:	8e 0d       	add	r24, r14
    1946:	9f 1d       	adc	r25, r15
    1948:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <malloc>
    194c:	f8 01       	movw	r30, r16
    194e:	93 87       	std	Z+11, r25	; 0x0b
    1950:	82 87       	std	Z+10, r24	; 0x0a
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    1952:	29 81       	ldd	r18, Y+1	; 0x01
    1954:	21 11       	cpse	r18, r1
    1956:	09 c0       	rjmp	.+18     	; 0x196a <_ZN9LEDMatrixC1Ejjb+0x70>
    1958:	2a 81       	ldd	r18, Y+2	; 0x02
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	21 11       	cpse	r18, r1
    195e:	06 c0       	rjmp	.+12     	; 0x196c <_ZN9LEDMatrixC1Ejjb+0x72>
    1960:	2b 81       	ldd	r18, Y+3	; 0x03
    1962:	21 11       	cpse	r18, r1
    1964:	03 c0       	rjmp	.+6      	; 0x196c <_ZN9LEDMatrixC1Ejjb+0x72>
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	01 c0       	rjmp	.+2      	; 0x196c <_ZN9LEDMatrixC1Ejjb+0x72>
    196a:	61 e0       	ldi	r22, 0x01	; 1
		memset(this->background, CRGB(), this->num_leds);
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	a7 01       	movw	r20, r14
    1970:	0e 94 a9 1c 	call	0x3952	; 0x3952 <memset>
	}

	// makes memory available to store the state of the led's
	this->leds = (CRGB*) malloc(num_leds * sizeof(CRGB));
    1974:	c6 01       	movw	r24, r12
    1976:	8e 0d       	add	r24, r14
    1978:	9f 1d       	adc	r25, r15
    197a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <malloc>
    197e:	f8 01       	movw	r30, r16
    1980:	91 87       	std	Z+9, r25	; 0x09
    1982:	80 87       	std	Z+8, r24	; 0x08
    1984:	29 81       	ldd	r18, Y+1	; 0x01
    1986:	21 11       	cpse	r18, r1
    1988:	09 c0       	rjmp	.+18     	; 0x199c <_ZN9LEDMatrixC1Ejjb+0xa2>
    198a:	2a 81       	ldd	r18, Y+2	; 0x02
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	21 11       	cpse	r18, r1
    1990:	06 c0       	rjmp	.+12     	; 0x199e <_ZN9LEDMatrixC1Ejjb+0xa4>
    1992:	2b 81       	ldd	r18, Y+3	; 0x03
    1994:	21 11       	cpse	r18, r1
    1996:	03 c0       	rjmp	.+6      	; 0x199e <_ZN9LEDMatrixC1Ejjb+0xa4>
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	01 c0       	rjmp	.+2      	; 0x199e <_ZN9LEDMatrixC1Ejjb+0xa4>
    199c:	61 e0       	ldi	r22, 0x01	; 1
	memset(this->leds, CRGB(), num_leds);
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	a7 01       	movw	r20, r14
    19a2:	0e 94 a9 1c 	call	0x3952	; 0x3952 <memset>

	this->set_all(0, 0, 0);
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	c8 01       	movw	r24, r16
    19ae:	86 df       	rcall	.-244    	; 0x18bc <_ZN9LEDMatrix7set_allEhhh>
    19b0:	f8 01       	movw	r30, r16

	FastLED.addLeds<WS2812B, DATA_PIN, GRB>(this->leds, this->num_leds);
    19b2:	46 81       	ldd	r20, Z+6	; 0x06
    19b4:	57 81       	ldd	r21, Z+7	; 0x07
    19b6:	60 85       	ldd	r22, Z+8	; 0x08
    19b8:	71 85       	ldd	r23, Z+9	; 0x09
    19ba:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <_ZGVZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c>
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    19be:	81 11       	cpse	r24, r1
    19c0:	45 c0       	rjmp	.+138    	; 0x1a4c <_ZN9LEDMatrixC1Ejjb+0x152>
    19c2:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x3>
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    19c6:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x2>
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19cc:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x6>
    19d0:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x7>
    19d4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x8>
    19d8:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x9>

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19dc:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0xa>
    19e0:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0xb>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0xc>
    19ea:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0xe>
    19ee:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0xd>
    19f2:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x5>
        m_pNext = NULL;
    19f6:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x4>
    19fa:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <_ZN14CLEDController7m_pHeadE>
        if(m_pHead==NULL) { m_pHead = this; }
    19fe:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <_ZN14CLEDController7m_pHeadE+0x1>
    1a02:	89 2b       	or	r24, r25
    1a04:	31 f4       	brne	.+12     	; 0x1a12 <_ZN9LEDMatrixC1Ejjb+0x118>
    1a06:	87 ea       	ldi	r24, 0xA7	; 167
    1a08:	92 e0       	ldi	r25, 0x02	; 2
    1a0a:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <_ZN14CLEDController7m_pHeadE+0x1>
    1a0e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <_ZN14CLEDController7m_pHeadE>
    1a12:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <_ZN14CLEDController7m_pTailE>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    1a16:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <_ZN14CLEDController7m_pTailE+0x1>
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <_ZN9LEDMatrixC1Ejjb+0x12c>
    1a1e:	87 ea       	ldi	r24, 0xA7	; 167
    1a20:	92 e0       	ldi	r25, 0x02	; 2
    1a22:	95 83       	std	Z+5, r25	; 0x05
    1a24:	84 83       	std	Z+4, r24	; 0x04
    1a26:	87 ea       	ldi	r24, 0xA7	; 167
        m_pTail = this;
    1a28:	92 e0       	ldi	r25, 0x02	; 2
    1a2a:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <_ZN14CLEDController7m_pTailE+0x1>
    1a2e:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <_ZN14CLEDController7m_pTailE>
    1a32:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x10>
/// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
/// this should make sure that chipsets that have
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
    1a36:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0xf>
    1a3a:	89 e5       	ldi	r24, 0x59	; 89
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1903B : public UCS1903BController800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS1904 : public UCS1904Controller800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class UCS2903 : public UCS2903Controller<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2852 : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class WS2812B : public WS2812Controller800Khz<DATA_PIN, RGB_ORDER> {};
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c+0x1>
    1a42:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <_ZZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c>
    1a46:	81 e0       	ldi	r24, 0x01	; 1
	/// @tparam DATA_PIN - the optional data pin for the leds (required)
	/// @tparam RGB_ORDER - the rgb ordering for the leds (e.g. what order red, green, and blue data is written out in)
	/// @returns a reference to the added controller
	template<template<uint8_t DATA_PIN, EOrder RGB_ORDER> class CHIPSET, uint8_t DATA_PIN, EOrder RGB_ORDER>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN, RGB_ORDER> c;
    1a48:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <_ZGVZN8CFastLED7addLedsI7WS2812BLh10EL6EOrder66EEER14CLEDControllerP4CRGBiiE1c>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	87 ea       	ldi	r24, 0xA7	; 167
    1a52:	92 e0       	ldi	r25, 0x02	; 2
    1a54:	0f 90       	pop	r0


}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	c1 c4       	rjmp	.+2434   	; 0x23ee <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>

00001a6c <_ZN9LEDMatrix14log_backgroundEhh>:
	for (uint16_t i = 0; i < this->num_leds; i++) {
		this->leds[i].setRGB(r, g, b);
	}
}

void LEDMatrix::log_background(uint8_t c_min, uint8_t c_max) {
    1a6c:	2f 92       	push	r2
    1a6e:	3f 92       	push	r3
    1a70:	4f 92       	push	r4
    1a72:	5f 92       	push	r5
    1a74:	6f 92       	push	r6
    1a76:	7f 92       	push	r7
    1a78:	8f 92       	push	r8
    1a7a:	9f 92       	push	r9
    1a7c:	af 92       	push	r10
    1a7e:	bf 92       	push	r11
    1a80:	cf 92       	push	r12
    1a82:	df 92       	push	r13
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	64 97       	sbiw	r28, 0x14	; 20
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	8c 01       	movw	r16, r24
    1aa2:	e6 2e       	mov	r14, r22
    1aa4:	f4 2e       	mov	r15, r20
	// calculate background
	// calculate the center coordinates i.e. for a 10x10 matrix they would be 5.5, 5.5 respectively
	float center_x = (this->columns - 1) / 2.0;
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	12 96       	adiw	r26, 0x02	; 2
    1aaa:	6d 91       	ld	r22, X+
    1aac:	7c 91       	ld	r23, X
    1aae:	13 97       	sbiw	r26, 0x03	; 3
    1ab0:	61 50       	subi	r22, 0x01	; 1
    1ab2:	71 09       	sbc	r23, r1
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__floatunsisf>
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1ac8:	2b 01       	movw	r4, r22
    1aca:	3c 01       	movw	r6, r24
	float center_y = (this->rows - 1) / 2.0;
    1acc:	f8 01       	movw	r30, r16
    1ace:	64 81       	ldd	r22, Z+4	; 0x04
    1ad0:	75 81       	ldd	r23, Z+5	; 0x05
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__floatunsisf>
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1aec:	69 83       	std	Y+1, r22	; 0x01
    1aee:	7a 83       	std	Y+2, r23	; 0x02
    1af0:	8b 83       	std	Y+3, r24	; 0x03
    1af2:	9c 83       	std	Y+4, r25	; 0x04

	// maximum possible distance any point can have
	float max_dist = center_x + center_y;

	// logarithmic interpolation c(v) = a * e^(b * i)
	float a = c_min;
    1af4:	6e 2d       	mov	r22, r14
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__floatunsisf>
    1b00:	6d 83       	std	Y+5, r22	; 0x05
    1b02:	7e 83       	std	Y+6, r23	; 0x06
    1b04:	8f 83       	std	Y+7, r24	; 0x07
    1b06:	98 87       	std	Y+8, r25	; 0x08
	float b = log(c_max / float(c_min)) / max_dist;
    1b08:	6f 2d       	mov	r22, r15
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__floatsisf>
    1b14:	2d 81       	ldd	r18, Y+5	; 0x05
    1b16:	3e 81       	ldd	r19, Y+6	; 0x06
    1b18:	4f 81       	ldd	r20, Y+7	; 0x07
    1b1a:	58 85       	ldd	r21, Y+8	; 0x08
    1b1c:	0e 94 ad 18 	call	0x315a	; 0x315a <__divsf3>
    1b20:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <log>
    1b24:	6b 01       	movw	r12, r22
    1b26:	7c 01       	movw	r14, r24
	// calculate the center coordinates i.e. for a 10x10 matrix they would be 5.5, 5.5 respectively
	float center_x = (this->columns - 1) / 2.0;
	float center_y = (this->rows - 1) / 2.0;

	// maximum possible distance any point can have
	float max_dist = center_x + center_y;
    1b28:	29 81       	ldd	r18, Y+1	; 0x01
    1b2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1b2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1b30:	c3 01       	movw	r24, r6
    1b32:	b2 01       	movw	r22, r4
    1b34:	0e 94 49 18 	call	0x3092	; 0x3092 <__addsf3>
    1b38:	9b 01       	movw	r18, r22
    1b3a:	ac 01       	movw	r20, r24

	// logarithmic interpolation c(v) = a * e^(b * i)
	float a = c_min;
	float b = log(c_max / float(c_min)) / max_dist;
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	b6 01       	movw	r22, r12
    1b40:	0e 94 ad 18 	call	0x315a	; 0x315a <__divsf3>
    1b44:	6b 87       	std	Y+11, r22	; 0x0b
    1b46:	7c 87       	std	Y+12, r23	; 0x0c
    1b48:	8d 87       	std	Y+13, r24	; 0x0d
    1b4a:	9e 87       	std	Y+14, r25	; 0x0e

	// for every coordinate
	for (uint8_t x = 0; x < this->columns; x++) {
    1b4c:	1c 8a       	std	Y+20, r1	; 0x14
    1b4e:	2c 89       	ldd	r18, Y+20	; 0x14
    1b50:	22 2e       	mov	r2, r18
    1b52:	31 2c       	mov	r3, r1
    1b54:	d8 01       	movw	r26, r16
    1b56:	12 96       	adiw	r26, 0x02	; 2
    1b58:	8d 91       	ld	r24, X+
    1b5a:	9c 91       	ld	r25, X
    1b5c:	13 97       	sbiw	r26, 0x03	; 3
    1b5e:	28 16       	cp	r2, r24
    1b60:	39 06       	cpc	r3, r25
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <_ZN9LEDMatrix14log_backgroundEhh+0xfa>
    1b64:	83 c0       	rjmp	.+262    	; 0x1c6c <_ZN9LEDMatrix14log_backgroundEhh+0x200>
    1b66:	1b 8a       	std	Y+19, r1	; 0x13
		for (uint8_t y = 0; y < this->rows; y++) {
			// calculate distance (not eucle  adian)
			float d = abs(center_x - x) + abs(center_y - y);
    1b68:	c1 01       	movw	r24, r2
    1b6a:	03 2c       	mov	r0, r3
    1b6c:	00 0c       	add	r0, r0
    1b6e:	aa 0b       	sbc	r26, r26
    1b70:	bb 0b       	sbc	r27, r27
    1b72:	8f 87       	std	Y+15, r24	; 0x0f
    1b74:	98 8b       	std	Y+16, r25	; 0x10
    1b76:	a9 8b       	std	Y+17, r26	; 0x11
    1b78:	ba 8b       	std	Y+18, r27	; 0x12
	float a = c_min;
	float b = log(c_max / float(c_min)) / max_dist;

	// for every coordinate
	for (uint8_t x = 0; x < this->columns; x++) {
		for (uint8_t y = 0; y < this->rows; y++) {
    1b7a:	bb 89       	ldd	r27, Y+19	; 0x13
    1b7c:	ab 2f       	mov	r26, r27
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
    1b82:	a9 87       	std	Y+9, r26	; 0x09
    1b84:	f8 01       	movw	r30, r16
    1b86:	84 81       	ldd	r24, Z+4	; 0x04
    1b88:	95 81       	ldd	r25, Z+5	; 0x05
    1b8a:	a8 17       	cp	r26, r24
    1b8c:	b9 07       	cpc	r27, r25
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <_ZN9LEDMatrix14log_backgroundEhh+0x126>
    1b90:	69 c0       	rjmp	.+210    	; 0x1c64 <_ZN9LEDMatrix14log_backgroundEhh+0x1f8>
			// calculate distance (not eucle  adian)
			float d = abs(center_x - x) + abs(center_y - y);
    1b92:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b94:	78 89       	ldd	r23, Y+16	; 0x10
    1b96:	89 89       	ldd	r24, Y+17	; 0x11
    1b98:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9a:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__floatsisf>
    1b9e:	9b 01       	movw	r18, r22
    1ba0:	ac 01       	movw	r20, r24
    1ba2:	c3 01       	movw	r24, r6
    1ba4:	b2 01       	movw	r22, r4
    1ba6:	0e 94 48 18 	call	0x3090	; 0x3090 <__subsf3>
    1baa:	6b 01       	movw	r12, r22
    1bac:	7c 01       	movw	r14, r24
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	a9 01       	movw	r20, r18
    1bb4:	0e 94 25 1a 	call	0x344a	; 0x344a <__gesf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	24 f0       	brlt	.+8      	; 0x1bc4 <_ZN9LEDMatrix14log_backgroundEhh+0x158>
    1bbc:	f7 fa       	bst	r15, 7
    1bbe:	f0 94       	com	r15
    1bc0:	f7 f8       	bld	r15, 7
    1bc2:	f0 94       	com	r15
    1bc4:	fb 89       	ldd	r31, Y+19	; 0x13
    1bc6:	6f 2f       	mov	r22, r31
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__floatsisf>
    1bd2:	9b 01       	movw	r18, r22
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	69 81       	ldd	r22, Y+1	; 0x01
    1bd8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	0e 94 48 18 	call	0x3090	; 0x3090 <__subsf3>
    1be2:	4b 01       	movw	r8, r22
    1be4:	5c 01       	movw	r10, r24
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	a9 01       	movw	r20, r18
    1bec:	0e 94 25 1a 	call	0x344a	; 0x344a <__gesf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	24 f0       	brlt	.+8      	; 0x1bfc <_ZN9LEDMatrix14log_backgroundEhh+0x190>
    1bf4:	b7 fa       	bst	r11, 7
    1bf6:	b0 94       	com	r11
    1bf8:	b7 f8       	bld	r11, 7
    1bfa:	b0 94       	com	r11
    1bfc:	a5 01       	movw	r20, r10
    1bfe:	94 01       	movw	r18, r8
    1c00:	c7 01       	movw	r24, r14
    1c02:	b6 01       	movw	r22, r12
    1c04:	0e 94 49 18 	call	0x3092	; 0x3092 <__addsf3>
    1c08:	9b 01       	movw	r18, r22
    1c0a:	ac 01       	movw	r20, r24
			// logarithmic interpolation over distance between c_min and c_max for a yellow (red and green) color
			// int c = (max_dist - d) / max_dist * (c_max - c_min) + c_min;
			uint8_t c = a * exp(b * d);
    1c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c14:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1c18:	0e 94 1a 19 	call	0x3234	; 0x3234 <exp>
    1c1c:	9b 01       	movw	r18, r22
    1c1e:	ac 01       	movw	r20, r24
    1c20:	6d 81       	ldd	r22, Y+5	; 0x05
    1c22:	7e 81       	ldd	r23, Y+6	; 0x06
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	98 85       	ldd	r25, Y+8	; 0x08
    1c28:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
    1c2c:	0e 94 46 19 	call	0x328c	; 0x328c <__fixunssfsi>
    1c30:	f6 2e       	mov	r15, r22

			// only maps blue and green
			this->background[this->map_snake(x, y)].setRGB(0, c, c);
    1c32:	49 85       	ldd	r20, Y+9	; 0x09
    1c34:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c36:	b1 01       	movw	r22, r2
    1c38:	c8 01       	movw	r24, r16
    1c3a:	ea dd       	rcall	.-1068   	; 0x1810 <_ZN9LEDMatrix9map_snakeEjj>
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	82 0f       	add	r24, r18
    1c44:	93 1f       	adc	r25, r19
    1c46:	d8 01       	movw	r26, r16
    1c48:	1a 96       	adiw	r26, 0x0a	; 10
    1c4a:	2d 91       	ld	r18, X+
    1c4c:	3c 91       	ld	r19, X
    1c4e:	1b 97       	sbiw	r26, 0x0b	; 11
    1c50:	f9 01       	movw	r30, r18
    1c52:	e8 0f       	add	r30, r24
    1c54:	f9 1f       	adc	r31, r25
    1c56:	10 82       	st	Z, r1
    }

    /// allow assignment from R, G, and B
	inline CRGB& setRGB (uint8_t nr, uint8_t ng, uint8_t nb) __attribute__((always_inline))
    {
        r = nr;
    1c58:	f1 82       	std	Z+1, r15	; 0x01
        g = ng;
    1c5a:	f2 82       	std	Z+2, r15	; 0x02
    1c5c:	bb 89       	ldd	r27, Y+19	; 0x13
	float a = c_min;
	float b = log(c_max / float(c_min)) / max_dist;

	// for every coordinate
	for (uint8_t x = 0; x < this->columns; x++) {
		for (uint8_t y = 0; y < this->rows; y++) {
    1c5e:	bf 5f       	subi	r27, 0xFF	; 255
    1c60:	bb 8b       	std	Y+19, r27	; 0x13
    1c62:	8b cf       	rjmp	.-234    	; 0x1b7a <_ZN9LEDMatrix14log_backgroundEhh+0x10e>
    1c64:	fc 89       	ldd	r31, Y+20	; 0x14
	// logarithmic interpolation c(v) = a * e^(b * i)
	float a = c_min;
	float b = log(c_max / float(c_min)) / max_dist;

	// for every coordinate
	for (uint8_t x = 0; x < this->columns; x++) {
    1c66:	ff 5f       	subi	r31, 0xFF	; 255
    1c68:	fc 8b       	std	Y+20, r31	; 0x14
    1c6a:	71 cf       	rjmp	.-286    	; 0x1b4e <_ZN9LEDMatrix14log_backgroundEhh+0xe2>
    1c6c:	64 96       	adiw	r28, 0x14	; 20

			// only maps blue and green
			this->background[this->map_snake(x, y)].setRGB(0, c, c);
		}
	}
}
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	bf 90       	pop	r11
    1c8a:	af 90       	pop	r10
    1c8c:	9f 90       	pop	r9
    1c8e:	8f 90       	pop	r8
    1c90:	7f 90       	pop	r7
    1c92:	6f 90       	pop	r6
    1c94:	5f 90       	pop	r5
    1c96:	4f 90       	pop	r4
    1c98:	3f 90       	pop	r3
    1c9a:	2f 90       	pop	r2
    1c9c:	08 95       	ret

00001c9e <_ZN9LEDMatrix15draw_backgroundEv>:

void LEDMatrix::draw_background() {
    1c9e:	fc 01       	movw	r30, r24
	memcpy(this->leds, this->background, this->num_leds * sizeof(CRGB));
    1ca0:	46 81       	ldd	r20, Z+6	; 0x06
    1ca2:	57 81       	ldd	r21, Z+7	; 0x07
    1ca4:	ca 01       	movw	r24, r20
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	48 0f       	add	r20, r24
    1cac:	59 1f       	adc	r21, r25
    1cae:	62 85       	ldd	r22, Z+10	; 0x0a
    1cb0:	73 85       	ldd	r23, Z+11	; 0x0b
    1cb2:	80 85       	ldd	r24, Z+8	; 0x08
    1cb4:	91 85       	ldd	r25, Z+9	; 0x09
    1cb6:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <memcpy>

00001cba <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE15showRGBInternalER15PixelControllerILS0_66ELi1ELm4294967295EE>:
#define DADVANCE 3
#define DUSE (0xFF - (DADVANCE-1))

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static void /*__attribute__((optimize("O0")))*/  /*__attribute__ ((always_inline))*/  showRGBInternal(PixelController<RGB_ORDER> & pixels)  {
    1cba:	9f 92       	push	r9
    1cbc:	af 92       	push	r10
    1cbe:	bf 92       	push	r11
    1cc0:	cf 92       	push	r12
    1cc2:	df 92       	push	r13
    1cc4:	ef 92       	push	r14
    1cc6:	ff 92       	push	r15
    1cc8:	0f 93       	push	r16
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	fc 01       	movw	r30, r24
		uint8_t *data = (uint8_t*)pixels.mData;
    1cd2:	c0 80       	ld	r12, Z
    1cd4:	d1 80       	ldd	r13, Z+1	; 0x01
		data_ptr_t port = FastPin<DATA_PIN>::port();
		data_t mask = FastPin<DATA_PIN>::mask();
		uint8_t scale_base = 0;

		// register uint8_t *end = data + nLeds;
		data_t hi = *port | mask;
    1cd6:	25 b1       	in	r18, 0x05	; 5
    1cd8:	24 60       	ori	r18, 0x04	; 4
    1cda:	b2 2e       	mov	r11, r18
		data_t lo = *port & ~mask;
    1cdc:	95 b1       	in	r25, 0x05	; 5
    1cde:	9b 7f       	andi	r25, 0xFB	; 251
		*port = lo;
    1ce0:	95 b9       	out	0x05, r25	; 5
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    1ce2:	62 85       	ldd	r22, Z+10	; 0x0a
    1ce4:	87 81       	ldd	r24, Z+7	; 0x07
    1ce6:	06 2f       	mov	r16, r22
    1ce8:	08 1b       	sub	r16, r24
    1cea:	80 2f       	mov	r24, r16
    1cec:	07 83       	std	Z+7, r16	; 0x07

		// Setup the pixel controller
		pixels.preStepFirstByteDithering();

		// pull the dithering/adjustment values out of the pixels object for direct asm access
		uint8_t advanceBy = pixels.advanceBy();
    1cee:	77 85       	ldd	r23, Z+15	; 0x0f
		uint16_t count = pixels.mLen;
    1cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    1cf2:	b3 81       	ldd	r27, Z+3	; 0x03

		uint8_t s0 = pixels.mScale.raw[RO(0)];
    1cf4:	35 85       	ldd	r19, Z+13	; 0x0d
		uint8_t s1 = pixels.mScale.raw[RO(1)];
    1cf6:	44 85       	ldd	r20, Z+12	; 0x0c
		uint8_t s2 = pixels.mScale.raw[RO(2)];
    1cf8:	56 85       	ldd	r21, Z+14	; 0x0e
#if (FASTLED_SCALE8_FIXED==1)
		s0++; s1++; s2++;
    1cfa:	99 24       	eor	r9, r9
    1cfc:	93 94       	inc	r9
    1cfe:	93 0e       	add	r9, r19
    1d00:	4f 5f       	subi	r20, 0xFF	; 255
    1d02:	5f 5f       	subi	r21, 0xFF	; 255
#endif
		uint8_t d0 = pixels.d[RO(0)];
		uint8_t d1 = pixels.d[RO(1)];
    1d04:	f6 80       	ldd	r15, Z+6	; 0x06
		uint8_t d2 = pixels.d[RO(2)];
    1d06:	e0 84       	ldd	r14, Z+8	; 0x08
		uint8_t e0 = pixels.e[RO(0)];
		uint8_t e1 = pixels.e[RO(1)];
    1d08:	c1 85       	ldd	r28, Z+9	; 0x09
		uint8_t e2 = pixels.e[RO(2)];
    1d0a:	d3 85       	ldd	r29, Z+11	; 0x0b

		uint8_t loopvar=0;

		// This has to be done in asm to keep gcc from messing up the asm code further down
		b0 = data[RO(0)];
    1d0c:	f6 01       	movw	r30, r12
    1d0e:	11 81       	ldd	r17, Z+1	; 0x01
		{
			LDSCL4(b0,O0) 	PRESCALEA2(d0)
    1d10:	a1 2c       	mov	r10, r1
    1d12:	0a 2d       	mov	r16, r10
    1d14:	2a 2d       	mov	r18, r10
    1d16:	3a 2d       	mov	r19, r10
    1d18:	31 81       	ldd	r19, Z+1	; 0x01
    1d1a:	11 27       	eor	r17, r17
    1d1c:	88 94       	clc
    1d1e:	31 11       	cpse	r19, r1
    1d20:	38 0f       	add	r19, r24
			PRESCALEB4(d0)	SCALE02(b0,0)
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <L_829>
    1d24:	3f ef       	ldi	r19, 0xFF	; 255

00001d26 <L_829>:
    1d26:	81 95       	neg	r24
    1d28:	88 94       	clc
    1d2a:	90 fc       	sbrc	r9, 0
    1d2c:	13 0f       	add	r17, r19
			RORSC04(b0,1) 	ROR1(b0) CLC1
    1d2e:	17 95       	ror	r17
    1d30:	88 94       	clc
    1d32:	91 fc       	sbrc	r9, 1
    1d34:	13 0f       	add	r17, r19
    1d36:	17 95       	ror	r17
    1d38:	88 94       	clc
			SCROR04(b0,2)		SCALE02(b0,3)
    1d3a:	92 fc       	sbrc	r9, 2
    1d3c:	13 0f       	add	r17, r19
    1d3e:	17 95       	ror	r17
    1d40:	88 94       	clc
    1d42:	93 fc       	sbrc	r9, 3
    1d44:	13 0f       	add	r17, r19
			RORSC04(b0,4) 	ROR1(b0) CLC1
    1d46:	17 95       	ror	r17
    1d48:	88 94       	clc
    1d4a:	94 fc       	sbrc	r9, 4
    1d4c:	13 0f       	add	r17, r19
    1d4e:	17 95       	ror	r17
    1d50:	88 94       	clc
			SCROR04(b0,5) 	SCALE02(b0,6)
    1d52:	95 fc       	sbrc	r9, 5
    1d54:	13 0f       	add	r17, r19
    1d56:	17 95       	ror	r17
    1d58:	88 94       	clc
    1d5a:	96 fc       	sbrc	r9, 6
    1d5c:	13 0f       	add	r17, r19
			RORSC04(b0,7) 	ROR1(b0) CLC1
    1d5e:	17 95       	ror	r17
    1d60:	88 94       	clc
    1d62:	97 fc       	sbrc	r9, 7
    1d64:	13 0f       	add	r17, r19
    1d66:	17 95       	ror	r17
    1d68:	88 94       	clc
			MOV_ADDDE04(b1,b0,d0,e0)
    1d6a:	03 2f       	mov	r16, r19
    1d6c:	91 10       	cpse	r9, r1
    1d6e:	01 2f       	mov	r16, r17
    1d70:	86 0f       	add	r24, r22
			MOV1(b0,b1)
    1d72:	10 2f       	mov	r17, r16

		{
			// while(--count)
			{
				// Loop beginning
				DNOP;
    1d74:	00 2c       	mov	r0, r0
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
    1d76:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1d78:	00 c0       	rjmp	.+0      	; 0x1d7a <L_829+0x54>
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
    1d7a:	17 ff       	sbrs	r17, 7
    1d7c:	95 b9       	out	0x05, r25	; 5
    1d7e:	30 81       	ld	r19, Z
    1d80:	00 27       	eor	r16, r16
    1d82:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1d84:	00 c0       	rjmp	.+0      	; 0x1d86 <L_829+0x60>
    1d86:	00 c0       	rjmp	.+0      	; 0x1d88 <L_829+0x62>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1d88:	00 2c       	mov	r0, r0
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
    1d8a:	95 b9       	out	0x05, r25	; 5
    1d8c:	31 11       	cpse	r19, r1
    1d8e:	3f 0d       	add	r19, r15
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1d90:	00 c0       	rjmp	.+0      	; 0x1d92 <L_829+0x6c>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1d92:	00 2c       	mov	r0, r0
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
    1d94:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <L_829+0x72>
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
    1d98:	16 ff       	sbrs	r17, 6
    1d9a:	95 b9       	out	0x05, r25	; 5
    1d9c:	08 f4       	brcc	.+2      	; 0x1da0 <L_898>
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255

00001da0 <L_898>:
    1da0:	f1 94       	neg	r15
    1da2:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1da4:	00 c0       	rjmp	.+0      	; 0x1da6 <L_898+0x6>
    1da6:	00 c0       	rjmp	.+0      	; 0x1da8 <L_898+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1da8:	00 2c       	mov	r0, r0
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
    1daa:	95 b9       	out	0x05, r25	; 5
    1dac:	40 fd       	sbrc	r20, 0
    1dae:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1db0:	00 c0       	rjmp	.+0      	; 0x1db2 <L_898+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1db2:	00 2c       	mov	r0, r0

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
    1db4:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1db6:	00 c0       	rjmp	.+0      	; 0x1db8 <L_898+0x18>

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
    1db8:	15 ff       	sbrs	r17, 5
    1dba:	95 b9       	out	0x05, r25	; 5
    1dbc:	07 95       	ror	r16
    1dbe:	88 94       	clc
    1dc0:	41 fd       	sbrc	r20, 1
    1dc2:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <L_898+0x26>
    1dc6:	00 c0       	rjmp	.+0      	; 0x1dc8 <L_898+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1dc8:	00 2c       	mov	r0, r0

				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
    1dca:	95 b9       	out	0x05, r25	; 5
    1dcc:	07 95       	ror	r16
    1dce:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1dd0:	00 c0       	rjmp	.+0      	; 0x1dd2 <L_898+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1dd2:	00 2c       	mov	r0, r0
				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
    1dd4:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1dd6:	00 c0       	rjmp	.+0      	; 0x1dd8 <L_898+0x38>
				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
    1dd8:	14 ff       	sbrs	r17, 4
    1dda:	95 b9       	out	0x05, r25	; 5
    1ddc:	42 fd       	sbrc	r20, 2
    1dde:	03 0f       	add	r16, r19
    1de0:	07 95       	ror	r16
    1de2:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1de4:	00 c0       	rjmp	.+0      	; 0x1de6 <L_898+0x46>
    1de6:	00 c0       	rjmp	.+0      	; 0x1de8 <L_898+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1de8:	00 2c       	mov	r0, r0
				// Inline scaling - RGB ordering
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
    1dea:	95 b9       	out	0x05, r25	; 5
    1dec:	43 fd       	sbrc	r20, 3
    1dee:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <L_898+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1df2:	00 2c       	mov	r0, r0
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1df4:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1df6:	00 c0       	rjmp	.+0      	; 0x1df8 <L_898+0x58>
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1df8:	13 ff       	sbrs	r17, 3
    1dfa:	95 b9       	out	0x05, r25	; 5
    1dfc:	07 95       	ror	r16
    1dfe:	88 94       	clc
    1e00:	44 fd       	sbrc	r20, 4
    1e02:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e04:	00 c0       	rjmp	.+0      	; 0x1e06 <L_898+0x66>
    1e06:	00 c0       	rjmp	.+0      	; 0x1e08 <L_898+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e08:	00 2c       	mov	r0, r0
				// DNOP
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1e0a:	95 b9       	out	0x05, r25	; 5
    1e0c:	07 95       	ror	r16
    1e0e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <L_898+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e12:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
    1e14:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e16:	00 c0       	rjmp	.+0      	; 0x1e18 <L_898+0x78>
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
    1e18:	12 ff       	sbrs	r17, 2
    1e1a:	95 b9       	out	0x05, r25	; 5
    1e1c:	45 fd       	sbrc	r20, 5
    1e1e:	03 0f       	add	r16, r19
    1e20:	07 95       	ror	r16
    1e22:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e24:	00 c0       	rjmp	.+0      	; 0x1e26 <L_898+0x86>
    1e26:	00 c0       	rjmp	.+0      	; 0x1e28 <L_898+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e28:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	D2(4)	LO1	PRESCALEA2(d1)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
    1e2a:	95 b9       	out	0x05, r25	; 5
    1e2c:	46 fd       	sbrc	r20, 6
    1e2e:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <L_898+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e32:	00 2c       	mov	r0, r0
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC14(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1e34:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e36:	00 c0       	rjmp	.+0      	; 0x1e38 <L_898+0x98>
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC14(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1e38:	11 ff       	sbrs	r17, 1
    1e3a:	95 b9       	out	0x05, r25	; 5
    1e3c:	07 95       	ror	r16
    1e3e:	88 94       	clc
    1e40:	47 fd       	sbrc	r20, 7
    1e42:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e44:	00 c0       	rjmp	.+0      	; 0x1e46 <L_898+0xa6>
    1e46:	00 c0       	rjmp	.+0      	; 0x1e48 <L_898+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e48:	00 2c       	mov	r0, r0
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d1)	D2(4)	LO1	SCALE12(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC14(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1e4a:	95 b9       	out	0x05, r25	; 5
    1e4c:	07 95       	ror	r16
    1e4e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e50:	00 c0       	rjmp	.+0      	; 0x1e52 <L_898+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e52:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC14(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 0)
    1e54:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e56:	00 c0       	rjmp	.+0      	; 0x1e58 <L_898+0xb8>
				HI1 D1(1) QLO2(b0, 5) RORSC14(b1,1) 	D2(4)	LO1 RORCLC2(b1)		D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR14(b1,2)		D2(4)	LO1 SCALE12(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC14(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR14(b1,5) 	D2(4)	LO1 SCALE12(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC14(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 0)
    1e58:	10 ff       	sbrs	r17, 0
    1e5a:	95 b9       	out	0x05, r25	; 5
					case 4: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 3: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 2: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)
    1e5c:	13 2f       	mov	r17, r19
    1e5e:	41 11       	cpse	r20, r1
    1e60:	10 2f       	mov	r17, r16
    1e62:	fc 0e       	add	r15, r28
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e64:	00 c0       	rjmp	.+0      	; 0x1e66 <L_898+0xc6>
    1e66:	00 c0       	rjmp	.+0      	; 0x1e68 <L_898+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e68:	00 2c       	mov	r0, r0
					case 4: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 3: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 2: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)
    1e6a:	95 b9       	out	0x05, r25	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e6c:	00 c0       	rjmp	.+0      	; 0x1e6e <L_898+0xce>
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <L_898+0xd0>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e70:	00 2c       	mov	r0, r0
					case 2: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
    1e72:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e74:	00 c0       	rjmp	.+0      	; 0x1e76 <L_898+0xd6>
					case 2: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
    1e76:	17 ff       	sbrs	r17, 7
    1e78:	95 b9       	out	0x05, r25	; 5
    1e7a:	32 81       	ldd	r19, Z+2	; 0x02
    1e7c:	00 27       	eor	r16, r16
    1e7e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e80:	00 c0       	rjmp	.+0      	; 0x1e82 <L_898+0xe2>
    1e82:	00 c0       	rjmp	.+0      	; 0x1e84 <L_898+0xe4>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e84:	00 2c       	mov	r0, r0
					case 2: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
    1e86:	95 b9       	out	0x05, r25	; 5
    1e88:	31 11       	cpse	r19, r1
    1e8a:	3e 0d       	add	r19, r14
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e8c:	00 c0       	rjmp	.+0      	; 0x1e8e <L_898+0xee>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1e8e:	00 2c       	mov	r0, r0
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
    1e90:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1e92:	00 c0       	rjmp	.+0      	; 0x1e94 <L_898+0xf4>
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
    1e94:	16 ff       	sbrs	r17, 6
    1e96:	95 b9       	out	0x05, r25	; 5
    1e98:	08 f4       	brcc	.+2      	; 0x1e9c <L_1240>
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255

00001e9c <L_1240>:
    1e9c:	e7 0f       	add	r30, r23
    1e9e:	f1 1d       	adc	r31, r1
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1ea0:	00 c0       	rjmp	.+0      	; 0x1ea2 <L_1240+0x6>
    1ea2:	00 c0       	rjmp	.+0      	; 0x1ea4 <L_1240+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1ea4:	00 2c       	mov	r0, r0
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
    1ea6:	95 b9       	out	0x05, r25	; 5
    1ea8:	50 fd       	sbrc	r21, 0
    1eaa:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1eac:	00 c0       	rjmp	.+0      	; 0x1eae <L_1240+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1eae:	00 2c       	mov	r0, r0
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1eb0:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1eb2:	00 c0       	rjmp	.+0      	; 0x1eb4 <L_1240+0x18>
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1eb4:	15 ff       	sbrs	r17, 5
    1eb6:	95 b9       	out	0x05, r25	; 5
    1eb8:	07 95       	ror	r16
    1eba:	88 94       	clc
    1ebc:	51 fd       	sbrc	r21, 1
    1ebe:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <L_1240+0x26>
    1ec2:	00 c0       	rjmp	.+0      	; 0x1ec4 <L_1240+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1ec4:	00 2c       	mov	r0, r0
				}
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1ec6:	95 b9       	out	0x05, r25	; 5
    1ec8:	07 95       	ror	r16
    1eca:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1ecc:	00 c0       	rjmp	.+0      	; 0x1ece <L_1240+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1ece:	00 2c       	mov	r0, r0
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
    1ed0:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1ed2:	00 c0       	rjmp	.+0      	; 0x1ed4 <L_1240+0x38>
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
    1ed4:	14 ff       	sbrs	r17, 4
    1ed6:	95 b9       	out	0x05, r25	; 5
    1ed8:	52 fd       	sbrc	r21, 2
    1eda:	03 0f       	add	r16, r19
    1edc:	07 95       	ror	r16
    1ede:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1ee0:	00 c0       	rjmp	.+0      	; 0x1ee2 <L_1240+0x46>
    1ee2:	00 c0       	rjmp	.+0      	; 0x1ee4 <L_1240+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1ee4:	00 2c       	mov	r0, r0
				MOV_ADDDE14(b0,b1,d1,e1) D2(4) LO1 D3(0)

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
    1ee6:	95 b9       	out	0x05, r25	; 5
    1ee8:	53 fd       	sbrc	r21, 3
    1eea:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1eec:	00 c0       	rjmp	.+0      	; 0x1eee <L_1240+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1eee:	00 2c       	mov	r0, r0

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1ef0:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1ef2:	00 c0       	rjmp	.+0      	; 0x1ef4 <L_1240+0x58>

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1ef4:	13 ff       	sbrs	r17, 3
    1ef6:	95 b9       	out	0x05, r25	; 5
    1ef8:	07 95       	ror	r16
    1efa:	88 94       	clc
    1efc:	54 fd       	sbrc	r21, 4
    1efe:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f00:	00 c0       	rjmp	.+0      	; 0x1f02 <L_1240+0x66>
    1f02:	00 c0       	rjmp	.+0      	; 0x1f04 <L_1240+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f04:	00 2c       	mov	r0, r0

				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1f06:	95 b9       	out	0x05, r25	; 5
    1f08:	07 95       	ror	r16
    1f0a:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f0c:	00 c0       	rjmp	.+0      	; 0x1f0e <L_1240+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f0e:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
    1f10:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <L_1240+0x78>
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
    1f14:	12 ff       	sbrs	r17, 2
    1f16:	95 b9       	out	0x05, r25	; 5
    1f18:	55 fd       	sbrc	r21, 5
    1f1a:	03 0f       	add	r16, r19
    1f1c:	07 95       	ror	r16
    1f1e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <L_1240+0x86>
    1f22:	00 c0       	rjmp	.+0      	; 0x1f24 <L_1240+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f24:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	D2(4)	LO1	PRESCALEA2(d2)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
    1f26:	95 b9       	out	0x05, r25	; 5
    1f28:	56 fd       	sbrc	r21, 6
    1f2a:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f2c:	00 c0       	rjmp	.+0      	; 0x1f2e <L_1240+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f2e:	00 2c       	mov	r0, r0
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC24(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1f30:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f32:	00 c0       	rjmp	.+0      	; 0x1f34 <L_1240+0x98>
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC24(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1f34:	11 ff       	sbrs	r17, 1
    1f36:	95 b9       	out	0x05, r25	; 5
    1f38:	07 95       	ror	r16
    1f3a:	88 94       	clc
    1f3c:	57 fd       	sbrc	r21, 7
    1f3e:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f40:	00 c0       	rjmp	.+0      	; 0x1f42 <L_1240+0xa6>
    1f42:	00 c0       	rjmp	.+0      	; 0x1f44 <L_1240+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f44:	00 2c       	mov	r0, r0
				HI1	D1(1) QLO2(b0, 6) PSBIDATA4(d2)		D2(4)	LO1	SCALE22(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC24(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1f46:	95 b9       	out	0x05, r25	; 5
    1f48:	07 95       	ror	r16
    1f4a:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f4c:	00 c0       	rjmp	.+0      	; 0x1f4e <L_1240+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f4e:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC24(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 0)
    1f50:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f52:	00 c0       	rjmp	.+0      	; 0x1f54 <L_1240+0xb8>
				HI1 D1(1) QLO2(b0, 5) RORSC24(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR24(b1,2)		D2(4)	LO1 SCALE22(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC24(b1,4) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR24(b1,5) 	D2(4)	LO1 SCALE22(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC24(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 0)
    1f54:	10 ff       	sbrs	r17, 0
    1f56:	95 b9       	out	0x05, r25	; 5
				}

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
    1f58:	13 2f       	mov	r17, r19
    1f5a:	51 11       	cpse	r21, r1
    1f5c:	10 2f       	mov	r17, r16
    1f5e:	e1 94       	neg	r14
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f60:	00 c0       	rjmp	.+0      	; 0x1f62 <L_1240+0xc6>
    1f62:	00 c0       	rjmp	.+0      	; 0x1f64 <L_1240+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f64:	00 2c       	mov	r0, r0
				}

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
    1f66:	95 b9       	out	0x05, r25	; 5
    1f68:	ed 0e       	add	r14, r29
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f6a:	00 c0       	rjmp	.+0      	; 0x1f6c <L_1240+0xd0>
    1f6c:	00 c0       	rjmp	.+0      	; 0x1f6e <L_1240+0xd2>

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
    1f6e:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f70:	00 c0       	rjmp	.+0      	; 0x1f72 <L_1240+0xd6>

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
    1f72:	17 ff       	sbrs	r17, 7
    1f74:	95 b9       	out	0x05, r25	; 5
    1f76:	31 81       	ldd	r19, Z+1	; 0x01
    1f78:	00 27       	eor	r16, r16
    1f7a:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f7c:	00 c0       	rjmp	.+0      	; 0x1f7e <L_1240+0xe2>
    1f7e:	00 c0       	rjmp	.+0      	; 0x1f80 <L_1240+0xe4>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f80:	00 2c       	mov	r0, r0

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
    1f82:	95 b9       	out	0x05, r25	; 5
    1f84:	31 11       	cpse	r19, r1
    1f86:	38 0f       	add	r19, r24
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f88:	00 c0       	rjmp	.+0      	; 0x1f8a <L_1240+0xee>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1f8a:	00 2c       	mov	r0, r0
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
    1f8c:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f8e:	00 c0       	rjmp	.+0      	; 0x1f90 <L_1240+0xf4>
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
    1f90:	16 ff       	sbrs	r17, 6
    1f92:	95 b9       	out	0x05, r25	; 5
    1f94:	08 f4       	brcc	.+2      	; 0x1f98 <L_1576>
    1f96:	3f ef       	ldi	r19, 0xFF	; 255

00001f98 <L_1576>:
    1f98:	81 95       	neg	r24
    1f9a:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1f9c:	00 c0       	rjmp	.+0      	; 0x1f9e <L_1576+0x6>
    1f9e:	00 c0       	rjmp	.+0      	; 0x1fa0 <L_1576+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1fa0:	00 2c       	mov	r0, r0
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
    1fa2:	95 b9       	out	0x05, r25	; 5
    1fa4:	90 fc       	sbrc	r9, 0
    1fa6:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fa8:	00 c0       	rjmp	.+0      	; 0x1faa <L_1576+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1faa:	00 2c       	mov	r0, r0
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1fac:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fae:	00 c0       	rjmp	.+0      	; 0x1fb0 <L_1576+0x18>
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1fb0:	15 ff       	sbrs	r17, 5
    1fb2:	95 b9       	out	0x05, r25	; 5
    1fb4:	07 95       	ror	r16
    1fb6:	88 94       	clc
    1fb8:	91 fc       	sbrc	r9, 1
    1fba:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fbc:	00 c0       	rjmp	.+0      	; 0x1fbe <L_1576+0x26>
    1fbe:	00 c0       	rjmp	.+0      	; 0x1fc0 <L_1576+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1fc0:	00 2c       	mov	r0, r0
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    1fc2:	95 b9       	out	0x05, r25	; 5
    1fc4:	07 95       	ror	r16
    1fc6:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fc8:	00 c0       	rjmp	.+0      	; 0x1fca <L_1576+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1fca:	00 2c       	mov	r0, r0
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
    1fcc:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fce:	00 c0       	rjmp	.+0      	; 0x1fd0 <L_1576+0x38>
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
    1fd0:	14 ff       	sbrs	r17, 4
    1fd2:	95 b9       	out	0x05, r25	; 5
    1fd4:	92 fc       	sbrc	r9, 2
    1fd6:	03 0f       	add	r16, r19
    1fd8:	07 95       	ror	r16
    1fda:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fdc:	00 c0       	rjmp	.+0      	; 0x1fde <L_1576+0x46>
    1fde:	00 c0       	rjmp	.+0      	; 0x1fe0 <L_1576+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1fe0:	00 2c       	mov	r0, r0
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
    1fe2:	95 b9       	out	0x05, r25	; 5
    1fe4:	93 fc       	sbrc	r9, 3
    1fe6:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fe8:	00 c0       	rjmp	.+0      	; 0x1fea <L_1576+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    1fea:	00 2c       	mov	r0, r0
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
    1fec:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1fee:	00 c0       	rjmp	.+0      	; 0x1ff0 <L_1576+0x58>
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
    1ff0:	13 ff       	sbrs	r17, 3
    1ff2:	95 b9       	out	0x05, r25	; 5
    1ff4:	07 95       	ror	r16
    1ff6:	88 94       	clc
    1ff8:	94 fc       	sbrc	r9, 4
    1ffa:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    1ffc:	00 c0       	rjmp	.+0      	; 0x1ffe <L_1576+0x66>
    1ffe:	00 c0       	rjmp	.+0      	; 0x2000 <L_1576+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2000:	00 2c       	mov	r0, r0
				MOV_NEGD24(b0,b1,d2) D2(4) LO1 ADDDE1(d2,e2) D3(1)
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
    2002:	95 b9       	out	0x05, r25	; 5
    2004:	07 95       	ror	r16
    2006:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2008:	00 c0       	rjmp	.+0      	; 0x200a <L_1576+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    200a:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
    200c:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    200e:	00 c0       	rjmp	.+0      	; 0x2010 <L_1576+0x78>
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
    2010:	12 ff       	sbrs	r17, 2
    2012:	95 b9       	out	0x05, r25	; 5
    2014:	95 fc       	sbrc	r9, 5
    2016:	03 0f       	add	r16, r19
    2018:	07 95       	ror	r16
    201a:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    201c:	00 c0       	rjmp	.+0      	; 0x201e <L_1576+0x86>
    201e:	00 c0       	rjmp	.+0      	; 0x2020 <L_1576+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2020:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	D2(4)	LO1	PRESCALEA2(d0)	D3(2)
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
    2022:	95 b9       	out	0x05, r25	; 5
    2024:	96 fc       	sbrc	r9, 6
    2026:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2028:	00 c0       	rjmp	.+0      	; 0x202a <L_1576+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    202a:	00 2c       	mov	r0, r0
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC04(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    202c:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    202e:	00 c0       	rjmp	.+0      	; 0x2030 <L_1576+0x98>
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC04(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    2030:	11 ff       	sbrs	r17, 1
    2032:	95 b9       	out	0x05, r25	; 5
    2034:	07 95       	ror	r16
    2036:	88 94       	clc
    2038:	97 fc       	sbrc	r9, 7
    203a:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    203c:	00 c0       	rjmp	.+0      	; 0x203e <L_1576+0xa6>
    203e:	00 c0       	rjmp	.+0      	; 0x2040 <L_1576+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2040:	00 2c       	mov	r0, r0
				HI1	D1(1) QLO2(b0, 6) PRESCALEB4(d0)	D2(4)	LO1	SCALE02(b1,0)	D3(2)
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC04(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
    2042:	95 b9       	out	0x05, r25	; 5
    2044:	07 95       	ror	r16
    2046:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2048:	00 c0       	rjmp	.+0      	; 0x204a <L_1576+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    204a:	00 2c       	mov	r0, r0
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC04(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 0)
    204c:	b5 b8       	out	0x05, r11	; 5
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    204e:	00 c0       	rjmp	.+0      	; 0x2050 <L_1576+0xb8>
				HI1 D1(1) QLO2(b0, 5) RORSC04(b1,1) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 4) SCROR04(b1,2)		D2(4)	LO1 SCALE02(b1,3)	D3(2)
				HI1 D1(1) QLO2(b0, 3) RORSC04(b1,4) 	D2(4)	LO1 RORCLC2(b1)  	D3(2)
				HI1 D1(1) QLO2(b0, 2) SCROR04(b1,5) 	D2(4)	LO1 SCALE02(b1,6)	D3(2)
				HI1 D1(1) QLO2(b0, 1) RORSC04(b1,7) 	D2(4)	LO1 RORCLC2(b1) 	D3(2)
				HI1 D1(1) QLO2(b0, 0)
    2050:	10 ff       	sbrs	r17, 0
    2052:	95 b9       	out	0x05, r25	; 5
					case 4: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 3: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 2: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE04(b0,b1,d0,e0) D2(4) LO1 D3(5)
    2054:	13 2f       	mov	r17, r19
    2056:	91 10       	cpse	r9, r1
    2058:	10 2f       	mov	r17, r16
    205a:	86 0f       	add	r24, r22
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    205c:	00 c0       	rjmp	.+0      	; 0x205e <L_1576+0xc6>
    205e:	00 c0       	rjmp	.+0      	; 0x2060 <L_1576+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2060:	00 2c       	mov	r0, r0
					case 4: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 3: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 2: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
					case 1: D2(0) LO1 D3(0) HI1 D1(1) QLO2(b0,0)
				}
				MOV_ADDDE04(b0,b1,d0,e0) D2(4) LO1 D3(5)
    2062:	95 b9       	out	0x05, r25	; 5
				ENDLOOP5
    2064:	11 97       	sbiw	r26, 0x01	; 1
    2066:	09 f0       	breq	.+2      	; 0x206a <L_1849>
    2068:	86 ce       	rjmp	.-756    	; 0x1d76 <L_829+0x50>

0000206a <L_1849>:

		#if (FASTLED_ALLOW_INTERRUPTS == 1)
		// stop using the clock juggler
		TCCR0A &= ~0x30;
		#endif
	}
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	bf 90       	pop	r11
    207c:	af 90       	pop	r10
    207e:	9f 90       	pop	r9
    2080:	08 95       	ret

00002082 <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE>:

	virtual uint16_t getMaxRefreshRate() const { return 400; }

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	ec 01       	movw	r28, r24
    208c:	8b 01       	movw	r16, r22

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    208e:	0e 94 75 01 	call	0x2ea	; 0x2ea <micros>
    2092:	2f 85       	ldd	r18, Y+15	; 0x0f
    2094:	38 89       	ldd	r19, Y+16	; 0x10
    2096:	62 1b       	sub	r22, r18
    2098:	73 0b       	sbc	r23, r19
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    209a:	6a 30       	cpi	r22, 0x0A	; 10
    209c:	71 05       	cpc	r23, r1
    209e:	b8 f3       	brcs	.-18     	; 0x208e <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0xc>

		mWait.wait();
		cli();
    20a0:	f8 94       	cli

		showRGBInternal(pixels);
    20a2:	c8 01       	movw	r24, r16
    20a4:	0a de       	rcall	.-1004   	; 0x1cba <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE15showRGBInternalER15PixelControllerILS0_66ELi1ELm4294967295EE>
    20a6:	d8 01       	movw	r26, r16
    20a8:	12 96       	adiw	r26, 0x02	; 2
    20aa:	ed 91       	ld	r30, X+
    20ac:	fc 91       	ld	r31, X
    20ae:	13 97       	sbiw	r26, 0x03	; 3
    20b0:	20 ee       	ldi	r18, 0xE0	; 224

		// Adjust the timer
#if (!defined(NO_CORRECTION) || (NO_CORRECTION == 0)) && (FASTLED_ALLOW_INTERRUPTS == 0)
        uint32_t microsTaken = (uint32_t)pixels.size() * (uint32_t)CLKS_TO_MICROS(24 * (T1 + T2 + T3));
    20b2:	31 e0       	ldi	r19, 0x01	; 1
    20b4:	df 01       	movw	r26, r30
    20b6:	c7 d7       	rcall	.+3982   	; 0x3046 <__usmulhisi3>
    20b8:	ab 01       	movw	r20, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	a4 e0       	ldi	r26, 0x04	; 4
    20be:	76 95       	lsr	r23
    20c0:	67 95       	ror	r22
    20c2:	57 95       	ror	r21
    20c4:	47 95       	ror	r20
    20c6:	aa 95       	dec	r26
    20c8:	d1 f7       	brne	.-12     	; 0x20be <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x3c>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
                 "  adc %B[result], __zero_reg__        \n\t"

                 : [result] "+r" (result)
                 : [i] "r" (i), [scale] "r" (scale)
                 : "r0", "r1"
                 );
    20ce:	9c 01       	movw	r18, r24
    20d0:	aa e9       	ldi	r26, 0x9A	; 154
    20d2:	ea 9f       	mul	r30, r26
    20d4:	0e 0e       	add	r0, r30
    20d6:	21 1d       	adc	r18, r1
    20d8:	fa 9f       	mul	r31, r26
    20da:	20 0d       	add	r18, r0
    20dc:	31 1d       	adc	r19, r1
    20de:	11 24       	eor	r1, r1
    20e0:	2f 0f       	add	r18, r31
    20e2:	31 1d       	adc	r19, r1
    20e4:	42 0f       	add	r20, r18
    20e6:	53 1f       	adc	r21, r19

        // adust for approximate observed actal runtime (as of January 2015)
        // roughly 9.6 cycles per pixel, which is 0.6us/pixel at 16MHz
        // microsTaken += nLeds * 0.6 * CLKS_TO_MICROS(16);
        microsTaken += scale16by8(pixels.size(),(0.6 * 256) + 1) * CLKS_TO_MICROS(16);
    20e8:	61 1d       	adc	r22, r1
    20ea:	71 1d       	adc	r23, r1
    20ec:	49 3e       	cpi	r20, 0xE9	; 233
    20ee:	b3 e0       	ldi	r27, 0x03	; 3
        // this is because the ONE interrupt that might come in while interrupts
        // are disabled is queued up, and it will be serviced as soon as
        // interrupts are re-enabled.
        // This actually should technically also account for the runtime of the
        // interrupt handler itself, but we're just not going to worry about that.
        if( microsTaken > 1000) {
    20f0:	5b 07       	cpc	r21, r27
    20f2:	61 05       	cpc	r22, r1
    20f4:	71 05       	cpc	r23, r1
    20f6:	08 f4       	brcc	.+2      	; 0x20fa <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x78>
    20f8:	34 c0       	rjmp	.+104    	; 0x2162 <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0xe0>
    20fa:	48 5e       	subi	r20, 0xE8	; 232
    20fc:	53 40       	sbci	r21, 0x03	; 3

            // Since up to one timer tick will be queued, we don't need
            // to adjust the MS_COUNTER for that one.
            microsTaken -= 1000;
    20fe:	61 09       	sbc	r22, r1
    2100:	71 09       	sbc	r23, r1
    2102:	22 e0       	ldi	r18, 0x02	; 2
    2104:	76 95       	lsr	r23

            // Now convert microseconds to 256ths of a second, approximately like this:
            // 250ths = (us/4)
            // 256ths = 250ths * (263/256);
            uint16_t x256ths = microsTaken >> 2;
    2106:	67 95       	ror	r22
    2108:	57 95       	ror	r21
    210a:	47 95       	ror	r20
    210c:	2a 95       	dec	r18
    210e:	d1 f7       	brne	.-12     	; 0x2104 <_ZN19ClocklessControllerILh10ELi4ELi10ELi6EL6EOrder66ELi0ELb0ELi10EE10showPixelsER15PixelControllerILS0_66ELi1ELm4294967295EE+0x82>
    2110:	27 e0       	ldi	r18, 0x07	; 7
    2112:	42 9f       	mul	r20, r18
    2114:	04 0e       	add	r0, r20
    2116:	81 1d       	adc	r24, r1
    2118:	52 9f       	mul	r21, r18
    211a:	80 0d       	add	r24, r0
    211c:	91 1d       	adc	r25, r1
    211e:	11 24       	eor	r1, r1
    2120:	85 0f       	add	r24, r21
    2122:	91 1d       	adc	r25, r1
    2124:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <_ZL21gTimeErrorAccum256ths>
            x256ths += scale16by8(x256ths,7);

            x256ths += gTimeErrorAccum256ths;
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	42 0f       	add	r20, r18
    212c:	53 1f       	adc	r21, r19
    212e:	48 0f       	add	r20, r24
    2130:	59 1f       	adc	r21, r25
    2132:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
            MS_COUNTER += (x256ths >> 8);
    2136:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
    213a:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__data_end+0x2>
    213e:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__data_end+0x3>
    2142:	25 2f       	mov	r18, r21
    2144:	33 27       	eor	r19, r19
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	a1 1d       	adc	r26, r1
    214c:	b1 1d       	adc	r27, r1
    214e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
    2152:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
    2156:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_end+0x2>
    215a:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_end+0x3>
    215e:	40 93 c0 02 	sts	0x02C0, r20	; 0x8002c0 <_ZL21gTimeErrorAccum256ths>
            gTimeErrorAccum256ths = x256ths & 0xFF;
    2162:	78 94       	sei
    2164:	0e 94 75 01 	call	0x2ea	; 0x2ea <micros>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    2168:	78 8b       	std	Y+16, r23	; 0x10
    216a:	6f 87       	std	Y+15, r22	; 0x0f
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28

#endif

		sei();
		mWait.mark();
	}
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE11initOffsetsEi>:
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    2176:	fc 01       	movw	r30, r24
    2178:	11 8a       	std	Z+17, r1	; 0x11
    217a:	10 8a       	std	Z+16, r1	; 0x10
    217c:	08 95       	ret

0000217e <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv>:
            enable_dithering(dither);
            mAdvance = 0;
            initOffsets(len);
        }

        void init_binary_dithering() {
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	ec 01       	movw	r28, r24
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    218c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <_ZZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEvE1R>
    2190:	9f 5f       	subi	r25, 0xFF	; 255

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    2192:	29 2f       	mov	r18, r25
    2194:	27 70       	andi	r18, 0x07	; 7
    2196:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <_ZZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEvE1R>
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
    219a:	90 ff       	sbrs	r25, 0
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x24>
    219e:	90 e8       	ldi	r25, 0x80	; 128
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x26>
            R &= (0x01 << ditherBits) - 1;

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    21a2:	90 e0       	ldi	r25, 0x00	; 0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    21a4:	21 fd       	sbrc	r18, 1
    21a6:	90 64       	ori	r25, 0x40	; 64
                if(R & 0x04) { Q |= 0x20; }
    21a8:	24 70       	andi	r18, 0x04	; 4
    21aa:	09 f0       	breq	.+2      	; 0x21ae <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x30>
    21ac:	90 62       	ori	r25, 0x20	; 32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    21ae:	20 e1       	ldi	r18, 0x10	; 16
    21b0:	29 0f       	add	r18, r25
    21b2:	fe 01       	movw	r30, r28
    21b4:	3c 96       	adiw	r30, 0x0c	; 12
    21b6:	7e 01       	movw	r14, r28
    21b8:	8f e0       	ldi	r24, 0x0F	; 15
    21ba:	e8 0e       	add	r14, r24
    21bc:	f1 1c       	adc	r15, r1
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    21be:	00 e0       	ldi	r16, 0x00	; 0
    21c0:	11 e0       	ldi	r17, 0x01	; 1
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
    21c2:	61 91       	ld	r22, Z+
                    e[i] = s ? (256/s) + 1 : 0;
    21c4:	66 23       	and	r22, r22
    21c6:	29 f0       	breq	.+10     	; 0x21d2 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x54>
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	c8 01       	movw	r24, r16
    21cc:	eb d6       	rcall	.+3542   	; 0x2fa4 <__divmodhi4>
    21ce:	6f 5f       	subi	r22, 0xFF	; 255
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x56>
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	df 01       	movw	r26, r30
    21d6:	14 97       	sbiw	r26, 0x04	; 4
    21d8:	6c 93       	st	X, r22
    21da:	32 2f       	mov	r19, r18
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    21dc:	36 9f       	mul	r19, r22
    21de:	03 0e       	add	r0, r19
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	31 1d       	adc	r19, r1
    21e4:	11 24       	eor	r1, r1
    21e6:	cf 01       	movw	r24, r30
    21e8:	07 97       	sbiw	r24, 0x07	; 7
    21ea:	31 11       	cpse	r19, r1
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x76>
    21ee:	ec 01       	movw	r28, r24

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
                    d[i] = scale8(Q, e[i]);
    21f0:	18 82       	st	Y, r1
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x7c>
    21f4:	31 50       	subi	r19, 0x01	; 1
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    21f6:	ec 01       	movw	r28, r24
    21f8:	38 83       	st	Y, r19
    21fa:	66 23       	and	r22, r22
#endif
                    if(e[i]) e[i]--;
    21fc:	11 f0       	breq	.+4      	; 0x2202 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x84>
    21fe:	61 50       	subi	r22, 0x01	; 1
    2200:	6c 93       	st	X, r22
    2202:	ee 15       	cp	r30, r14
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    2204:	ff 05       	cpc	r31, r15
    2206:	e9 f6       	brne	.-70     	; 0x21c2 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv+0x44>
    2208:	df 91       	pop	r29
                    if(d[i]) (d[i]--);
#endif
                    if(e[i]) e[i]--;
            }
#endif
        }
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	ef 90       	pop	r14
    2214:	08 95       	ret

00002216 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	62 97       	sbiw	r28, 0x12	; 18
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	8c 01       	movw	r16, r24
    2234:	7a 01       	movw	r14, r20
    2236:	f9 01       	movw	r30, r18
    2238:	dc 01       	movw	r26, r24
    223a:	1c 96       	adiw	r26, 0x0c	; 12
    223c:	8c 91       	ld	r24, X
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    223e:	7a 83       	std	Y+2, r23	; 0x02
    2240:	69 83       	std	Y+1, r22	; 0x01
    2242:	5c 83       	std	Y+4, r21	; 0x04
    2244:	4b 83       	std	Y+3, r20	; 0x03
    2246:	5e 83       	std	Y+6, r21	; 0x06
    2248:	4d 83       	std	Y+5, r20	; 0x05
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    224a:	90 81       	ld	r25, Z
    224c:	9d 87       	std	Y+13, r25	; 0x0d
        g = rhs.g;
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	9e 87       	std	Y+14, r25	; 0x0e
        b = rhs.b;
    2252:	92 81       	ldd	r25, Z+2	; 0x02
    2254:	9f 87       	std	Y+15, r25	; 0x0f
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	21 f4       	brne	.+8      	; 0x2262 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x4c>
                case BINARY_DITHER: init_binary_dithering(); break;
    225a:	ce 01       	movw	r24, r28
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	8f df       	rcall	.-226    	; 0x217e <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv>
    2260:	06 c0       	rjmp	.+12     	; 0x226e <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE9showColorERK4CRGBiS2_+0x58>
    2262:	1c 86       	std	Y+12, r1	; 0x0c
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    2264:	1b 86       	std	Y+11, r1	; 0x0b
    2266:	1a 86       	std	Y+10, r1	; 0x0a
    2268:	19 86       	std	Y+9, r1	; 0x09
    226a:	18 86       	std	Y+8, r1	; 0x08
    226c:	1f 82       	std	Y+7, r1	; 0x07
    226e:	18 8a       	std	Y+16, r1	; 0x10
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    2270:	b7 01       	movw	r22, r14
            initOffsets(len);
    2272:	ce 01       	movw	r24, r28
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	7f df       	rcall	.-258    	; 0x2176 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE11initOffsetsEi>
    2278:	d8 01       	movw	r26, r16
    227a:	ed 91       	ld	r30, X+
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    227c:	fc 91       	ld	r31, X
    227e:	04 84       	ldd	r0, Z+12	; 0x0c
    2280:	f5 85       	ldd	r31, Z+13	; 0x0d
    2282:	e0 2d       	mov	r30, r0
    2284:	be 01       	movw	r22, r28
    2286:	6f 5f       	subi	r22, 0xFF	; 255
    2288:	7f 4f       	sbci	r23, 0xFF	; 255
    228a:	c8 01       	movw	r24, r16
    228c:	09 95       	icall
    228e:	62 96       	adiw	r28, 0x12	; 18
    2290:	0f b6       	in	r0, 0x3f	; 63
  }
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	08 95       	ret

000022a8 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	62 97       	sbiw	r28, 0x12	; 18
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	8c 01       	movw	r16, r24
    22c6:	7a 01       	movw	r14, r20
    22c8:	f9 01       	movw	r30, r18
    22ca:	dc 01       	movw	r26, r24
    22cc:	1c 96       	adiw	r26, 0x0c	; 12
    22ce:	8c 91       	ld	r24, X
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    22d0:	7a 83       	std	Y+2, r23	; 0x02
    22d2:	69 83       	std	Y+1, r22	; 0x01
    22d4:	5c 83       	std	Y+4, r21	; 0x04
    22d6:	4b 83       	std	Y+3, r20	; 0x03
    22d8:	5e 83       	std	Y+6, r21	; 0x06
    22da:	4d 83       	std	Y+5, r20	; 0x05
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22dc:	90 81       	ld	r25, Z
    22de:	9d 87       	std	Y+13, r25	; 0x0d
        g = rhs.g;
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	9e 87       	std	Y+14, r25	; 0x0e
        b = rhs.b;
    22e4:	92 81       	ldd	r25, Z+2	; 0x02
    22e6:	9f 87       	std	Y+15, r25	; 0x0f
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x4c>
                case BINARY_DITHER: init_binary_dithering(); break;
    22ec:	ce 01       	movw	r24, r28
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	46 df       	rcall	.-372    	; 0x217e <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE21init_binary_ditheringEv>
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <_ZN19CPixelLEDControllerIL6EOrder66ELi1ELm4294967295EE4showEPK4CRGBiS2_+0x58>
    22f4:	1c 86       	std	Y+12, r1	; 0x0c
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    22f6:	1b 86       	std	Y+11, r1	; 0x0b
    22f8:	1a 86       	std	Y+10, r1	; 0x0a
    22fa:	19 86       	std	Y+9, r1	; 0x09
    22fc:	18 86       	std	Y+8, r1	; 0x08
    22fe:	1f 82       	std	Y+7, r1	; 0x07
    2300:	83 e0       	ldi	r24, 0x03	; 3
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    2302:	88 8b       	std	Y+16, r24	; 0x10
    2304:	b7 01       	movw	r22, r14
            initOffsets(len);
    2306:	ce 01       	movw	r24, r28
    2308:	01 96       	adiw	r24, 0x01	; 1
    230a:	35 df       	rcall	.-406    	; 0x2176 <_ZN15PixelControllerIL6EOrder66ELi1ELm4294967295EE11initOffsetsEi>
    230c:	d8 01       	movw	r26, r16
    230e:	ed 91       	ld	r30, X+
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2310:	fc 91       	ld	r31, X
    2312:	04 84       	ldd	r0, Z+12	; 0x0c
    2314:	f5 85       	ldd	r31, Z+13	; 0x0d
    2316:	e0 2d       	mov	r30, r0
    2318:	be 01       	movw	r22, r28
    231a:	6f 5f       	subi	r22, 0xFF	; 255
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	c8 01       	movw	r24, r16
    2320:	09 95       	icall
    2322:	62 96       	adiw	r28, 0x12	; 18
    2324:	0f b6       	in	r0, 0x3f	; 63
  }
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	08 95       	ret

0000233c <_ZN14CLEDController13getAdjustmentEh>:
    CLEDController & setTemperature(ColorTemperature temperature) { m_ColorTemperature = temperature; return *this; }
    /// get the color temperature, aka whipe point, for this controller
    CRGB getTemperature() { return m_ColorTemperature; }

	/// Get the combined brightness/color adjustment for this controller
    CRGB getAdjustment(uint8_t scale) {
    233c:	4f 92       	push	r4
    233e:	5f 92       	push	r5
    2340:	6f 92       	push	r6
    2342:	7f 92       	push	r7
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	fc 01       	movw	r30, r24
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    235a:	10 82       	st	Z, r1
    235c:	11 82       	std	Z+1, r1	; 0x01
    235e:	12 82       	std	Z+2, r1	; 0x02
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    2360:	44 23       	and	r20, r20
    2362:	a9 f1       	breq	.+106    	; 0x23ce <_ZN14CLEDController13getAdjustmentEh+0x92>
    2364:	8b 01       	movw	r16, r22
    2366:	07 5f       	subi	r16, 0xF7	; 247
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	5c 01       	movw	r10, r24
    236c:	eb 01       	movw	r28, r22
    236e:	2c 96       	adiw	r28, 0x0c	; 12
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    2370:	44 2e       	mov	r4, r20
    2372:	51 2c       	mov	r5, r1
    2374:	61 2c       	mov	r6, r1
    2376:	71 2c       	mov	r7, r1
    2378:	d8 01       	movw	r26, r16
    237a:	13 97       	sbiw	r26, 0x03	; 3
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    237c:	cc 90       	ld	r12, X
                      uint8_t ct = colorTemperature.raw[i];
    237e:	d8 01       	movw	r26, r16
    2380:	2d 91       	ld	r18, X+
    2382:	8d 01       	movw	r16, r26
                      if(cc > 0 && ct > 0) {
    2384:	cc 20       	and	r12, r12
    2386:	e9 f0       	breq	.+58     	; 0x23c2 <_ZN14CLEDController13getAdjustmentEh+0x86>
    2388:	22 23       	and	r18, r18
    238a:	d9 f0       	breq	.+54     	; 0x23c2 <_ZN14CLEDController13getAdjustmentEh+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    238c:	82 2f       	mov	r24, r18
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 e0       	ldi	r26, 0x00	; 0
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	9c 01       	movw	r18, r24
    2396:	ad 01       	movw	r20, r26
    2398:	2f 5f       	subi	r18, 0xFF	; 255
    239a:	3f 4f       	sbci	r19, 0xFF	; 255
    239c:	4f 4f       	sbci	r20, 0xFF	; 255
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	c3 01       	movw	r24, r6
    23a2:	b2 01       	movw	r22, r4
    23a4:	dc d5       	rcall	.+3000   	; 0x2f5e <__mulsi3>
    23a6:	9b 01       	movw	r18, r22
    23a8:	ac 01       	movw	r20, r24
    23aa:	d1 2c       	mov	r13, r1
    23ac:	e1 2c       	mov	r14, r1
    23ae:	f1 2c       	mov	r15, r1
    23b0:	c7 01       	movw	r24, r14
    23b2:	b6 01       	movw	r22, r12
    23b4:	6f 5f       	subi	r22, 0xFF	; 255
    23b6:	7f 4f       	sbci	r23, 0xFF	; 255
    23b8:	8f 4f       	sbci	r24, 0xFF	; 255
    23ba:	9f 4f       	sbci	r25, 0xFF	; 255
    23bc:	d0 d5       	rcall	.+2976   	; 0x2f5e <__mulsi3>
    23be:	d5 01       	movw	r26, r10
    23c0:	8c 93       	st	X, r24
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    23c2:	bf ef       	ldi	r27, 0xFF	; 255
    23c4:	ab 1a       	sub	r10, r27
    23c6:	bb 0a       	sbc	r11, r27
    23c8:	0c 17       	cp	r16, r28
    23ca:	1d 07       	cpc	r17, r29
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    23cc:	a9 f6       	brne	.-86     	; 0x2378 <_ZN14CLEDController13getAdjustmentEh+0x3c>
    23ce:	cf 01       	movw	r24, r30
    23d0:	df 91       	pop	r29
    CRGB getTemperature() { return m_ColorTemperature; }

	/// Get the combined brightness/color adjustment for this controller
    CRGB getAdjustment(uint8_t scale) {
        return computeAdjustment(scale, m_ColorCorrection, m_ColorTemperature);
    }
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	bf 90       	pop	r11
    23e2:	af 90       	pop	r10
    23e4:	7f 90       	pop	r7
    23e6:	6f 90       	pop	r6
    23e8:	5f 90       	pop	r5
    23ea:	4f 90       	pop	r4
    23ec:	08 95       	ret

000023ee <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii>:
// LED Controller interface definition
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// Base definition for an LED controller.  Pretty much the methods that every LED controller object will make available.
/// Note that the showARGB method is not impelemented for all controllers yet.   Note also the methods for eventual checking
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	8c 01       	movw	r16, r24
    2400:	6b 01       	movw	r12, r22
    2402:	ea 01       	movw	r28, r20
    2404:	79 01       	movw	r14, r18
/// of background writing of data (I'm looking at you, teensy 3.0 DMA controller!).  If you want to pass LED controllers around
    2406:	12 16       	cp	r1, r18
    2408:	13 06       	cpc	r1, r19
    240a:	1c f0       	brlt	.+6      	; 0x2412 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x24>
/// to methods, make them references to this type, keeps your code saner.  However, most people won't be seeing/using these objects
    240c:	7a 01       	movw	r14, r20
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// Base definition for an LED controller.  Pretty much the methods that every LED controller object will make available.
/// Note that the showARGB method is not impelemented for all controllers yet.   Note also the methods for eventual checking
/// of background writing of data (I'm looking at you, teensy 3.0 DMA controller!).  If you want to pass LED controllers around
    240e:	c0 e0       	ldi	r28, 0x00	; 0
    2410:	d0 e0       	ldi	r29, 0x00	; 0
/// to methods, make them references to this type, keeps your code saner.  However, most people won't be seeing/using these objects
/// directly at all
class CLEDController {
    2412:	d8 01       	movw	r26, r16
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	04 80       	ldd	r0, Z+4	; 0x04
    241a:	f5 81       	ldd	r31, Z+5	; 0x05
    241c:	e0 2d       	mov	r30, r0
    241e:	c8 01       	movw	r24, r16
    2420:	09 95       	icall
protected:
    2422:	be 01       	movw	r22, r28
    2424:	66 0f       	add	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	c6 0f       	add	r28, r22
    242a:	d7 1f       	adc	r29, r23
    242c:	b6 01       	movw	r22, r12
    242e:	6c 0f       	add	r22, r28
    2430:	7d 1f       	adc	r23, r29
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    2432:	f8 01       	movw	r30, r16
    2434:	73 83       	std	Z+3, r23	; 0x03
    2436:	62 83       	std	Z+2, r22	; 0x02
        m_nLeds = nLeds;
    2438:	f6 86       	std	Z+14, r15	; 0x0e
    243a:	e5 86       	std	Z+13, r14	; 0x0d
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    243c:	01 90       	ld	r0, Z+
    243e:	f0 81       	ld	r31, Z
    2440:	e0 2d       	mov	r30, r0
    2442:	02 84       	ldd	r0, Z+10	; 0x0a
    2444:	f3 85       	ldd	r31, Z+11	; 0x0b
    2446:	e0 2d       	mov	r30, r0
    2448:	c8 01       	movw	r24, r16
    244a:	09 95       	icall

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	09 f1       	breq	.+66     	; 0x2492 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0xa4>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    2450:	9c 01       	movw	r18, r24
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	60 e4       	ldi	r22, 0x40	; 64
    2458:	72 e4       	ldi	r23, 0x42	; 66
    245a:	8f e0       	ldi	r24, 0x0F	; 15
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	d7 d5       	rcall	.+2990   	; 0x300e <__divmodsi4>
    2460:	c0 90 d2 02 	lds	r12, 0x02D2	; 0x8002d2 <FastLED+0x3>
    2464:	d0 90 d3 02 	lds	r13, 0x02D3	; 0x8002d3 <FastLED+0x4>
    2468:	e0 90 d4 02 	lds	r14, 0x02D4	; 0x8002d4 <FastLED+0x5>
    246c:	f0 90 d5 02 	lds	r15, 0x02D5	; 0x8002d5 <FastLED+0x6>
    2470:	c9 01       	movw	r24, r18
    2472:	da 01       	movw	r26, r20
    2474:	8c 15       	cp	r24, r12
    2476:	9d 05       	cpc	r25, r13
    2478:	ae 05       	cpc	r26, r14
    247a:	bf 05       	cpc	r27, r15
    247c:	10 f4       	brcc	.+4      	; 0x2482 <_ZN8CFastLED7addLedsEP14CLEDControllerP4CRGBii+0x94>
    247e:	d7 01       	movw	r26, r14
    2480:	c6 01       	movw	r24, r12
    2482:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <FastLED+0x3>
    2486:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <FastLED+0x4>
    248a:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <FastLED+0x5>
    248e:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <FastLED+0x6>
    2492:	c8 01       	movw	r24, r16

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	ff 90       	pop	r15
    249e:	ef 90       	pop	r14
    24a0:	df 90       	pop	r13
    24a2:	cf 90       	pop	r12
    24a4:	08 95       	ret

000024a6 <_ZN8CFastLED8countFPSEi>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    24b6:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <_ZZN8CFastLED8countFPSEiE2br>
    24ba:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <_ZZN8CFastLED8countFPSEiE2br+0x1>
    24be:	a9 01       	movw	r20, r18
    24c0:	4f 5f       	subi	r20, 0xFF	; 255
    24c2:	5f 4f       	sbci	r21, 0xFF	; 255
    24c4:	50 93 c6 02 	sts	0x02C6, r21	; 0x8002c6 <_ZZN8CFastLED8countFPSEiE2br+0x1>
    24c8:	40 93 c5 02 	sts	0x02C5, r20	; 0x8002c5 <_ZZN8CFastLED8countFPSEiE2br>
    24cc:	26 17       	cp	r18, r22
    24ce:	37 07       	cpc	r19, r23
    24d0:	ac f1       	brlt	.+106    	; 0x253c <_ZN8CFastLED8countFPSEi+0x96>
    24d2:	ec 01       	movw	r28, r24
		uint32_t now = millis();
    24d4:	0e 94 4d 01 	call	0x29a	; 0x29a <millis>
    24d8:	8b 01       	movw	r16, r22
    24da:	9c 01       	movw	r18, r24
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    24dc:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <_ZZN8CFastLED8countFPSEiE2br>
    24e0:	f0 91 c6 02 	lds	r31, 0x02C6	; 0x8002c6 <_ZZN8CFastLED8countFPSEiE2br+0x1>
    24e4:	88 ee       	ldi	r24, 0xE8	; 232
    24e6:	93 e0       	ldi	r25, 0x03	; 3
    24e8:	e8 9f       	mul	r30, r24
    24ea:	b0 01       	movw	r22, r0
    24ec:	e9 9f       	mul	r30, r25
    24ee:	70 0d       	add	r23, r0
    24f0:	f8 9f       	mul	r31, r24
    24f2:	70 0d       	add	r23, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	07 2e       	mov	r0, r23
    24f8:	00 0c       	add	r0, r0
    24fa:	88 0b       	sbc	r24, r24
    24fc:	99 0b       	sbc	r25, r25
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
    24fe:	c0 90 c1 02 	lds	r12, 0x02C1	; 0x8002c1 <_ZZN8CFastLED8countFPSEiE9lastframe>
    2502:	d0 90 c2 02 	lds	r13, 0x02C2	; 0x8002c2 <_ZZN8CFastLED8countFPSEiE9lastframe+0x1>
    2506:	e0 90 c3 02 	lds	r14, 0x02C3	; 0x8002c3 <_ZZN8CFastLED8countFPSEiE9lastframe+0x2>
    250a:	f0 90 c4 02 	lds	r15, 0x02C4	; 0x8002c4 <_ZZN8CFastLED8countFPSEiE9lastframe+0x3>
    250e:	a9 01       	movw	r20, r18
    2510:	98 01       	movw	r18, r16
    2512:	2c 19       	sub	r18, r12
    2514:	3d 09       	sbc	r19, r13
    2516:	4e 09       	sbc	r20, r14
    2518:	5f 09       	sbc	r21, r15
		m_nFPS = (br * 1000) / now;
    251a:	57 d5       	rcall	.+2734   	; 0x2fca <__udivmodsi4>
    251c:	3a 83       	std	Y+2, r19	; 0x02
    251e:	29 83       	std	Y+1, r18	; 0x01
    2520:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <_ZZN8CFastLED8countFPSEiE2br+0x1>
    br = 0;
    2524:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZZN8CFastLED8countFPSEiE2br>
    2528:	0e 94 4d 01 	call	0x29a	; 0x29a <millis>
    lastframe = millis();
    252c:	60 93 c1 02 	sts	0x02C1, r22	; 0x8002c1 <_ZZN8CFastLED8countFPSEiE9lastframe>
    2530:	70 93 c2 02 	sts	0x02C2, r23	; 0x8002c2 <_ZZN8CFastLED8countFPSEiE9lastframe+0x1>
    2534:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <_ZZN8CFastLED8countFPSEiE9lastframe+0x2>
    2538:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <_ZZN8CFastLED8countFPSEiE9lastframe+0x3>
    253c:	df 91       	pop	r29
  }
}
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	ff 90       	pop	r15
    2546:	ef 90       	pop	r14
    2548:	df 90       	pop	r13
    254a:	cf 90       	pop	r12
    254c:	08 95       	ret

0000254e <_ZN8CFastLED4showEh>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    254e:	af 92       	push	r10
    2550:	bf 92       	push	r11
    2552:	cf 92       	push	r12
    2554:	df 92       	push	r13
    2556:	ef 92       	push	r14
    2558:	ff 92       	push	r15
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	00 d0       	rcall	.+0      	; 0x2564 <_ZN8CFastLED4showEh+0x16>
    2564:	1f 92       	push	r1
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	7c 01       	movw	r14, r24
    256c:	d6 2e       	mov	r13, r22
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    256e:	f7 01       	movw	r30, r14
    2570:	83 81       	ldd	r24, Z+3	; 0x03
    2572:	94 81       	ldd	r25, Z+4	; 0x04
    2574:	a5 81       	ldd	r26, Z+5	; 0x05
    2576:	b6 81       	ldd	r27, Z+6	; 0x06
    2578:	89 2b       	or	r24, r25
    257a:	8a 2b       	or	r24, r26
    257c:	8b 2b       	or	r24, r27
    257e:	d1 f0       	breq	.+52     	; 0x25b4 <_ZN8CFastLED4showEh+0x66>
    2580:	0e 94 75 01 	call	0x2ea	; 0x2ea <micros>
    2584:	00 91 c7 02 	lds	r16, 0x02C7	; 0x8002c7 <_ZL8lastshow>
    2588:	10 91 c8 02 	lds	r17, 0x02C8	; 0x8002c8 <_ZL8lastshow+0x1>
    258c:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <_ZL8lastshow+0x2>
    2590:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <_ZL8lastshow+0x3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	80 1b       	sub	r24, r16
    259a:	91 0b       	sbc	r25, r17
    259c:	a2 0b       	sbc	r26, r18
    259e:	b3 0b       	sbc	r27, r19
    25a0:	f7 01       	movw	r30, r14
    25a2:	03 81       	ldd	r16, Z+3	; 0x03
    25a4:	14 81       	ldd	r17, Z+4	; 0x04
    25a6:	25 81       	ldd	r18, Z+5	; 0x05
    25a8:	36 81       	ldd	r19, Z+6	; 0x06
    25aa:	80 17       	cp	r24, r16
    25ac:	91 07       	cpc	r25, r17
    25ae:	a2 07       	cpc	r26, r18
    25b0:	b3 07       	cpc	r27, r19
    25b2:	e8 f2       	brcs	.-70     	; 0x256e <_ZN8CFastLED4showEh+0x20>
	lastshow = micros();
    25b4:	0e 94 75 01 	call	0x2ea	; 0x2ea <micros>
    25b8:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <_ZL8lastshow>
    25bc:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <_ZL8lastshow+0x1>
    25c0:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <_ZL8lastshow+0x2>
    25c4:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <_ZL8lastshow+0x3>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    25c8:	d7 01       	movw	r26, r14
    25ca:	1b 96       	adiw	r26, 0x0b	; 11
    25cc:	ed 91       	ld	r30, X+
    25ce:	fc 91       	ld	r31, X
    25d0:	1c 97       	sbiw	r26, 0x0c	; 12
    25d2:	30 97       	sbiw	r30, 0x00	; 0
    25d4:	51 f0       	breq	.+20     	; 0x25ea <_ZN8CFastLED4showEh+0x9c>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    25d6:	d7 01       	movw	r26, r14
    25d8:	17 96       	adiw	r26, 0x07	; 7
    25da:	4d 91       	ld	r20, X+
    25dc:	5d 91       	ld	r21, X+
    25de:	6d 91       	ld	r22, X+
    25e0:	7c 91       	ld	r23, X
    25e2:	1a 97       	sbiw	r26, 0x0a	; 10
    25e4:	8d 2d       	mov	r24, r13
    25e6:	09 95       	icall
    25e8:	d8 2e       	mov	r13, r24
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    25ea:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <_ZN14CLEDController7m_pHeadE>
    25ee:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <_ZN14CLEDController7m_pHeadE+0x1>
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    25f2:	01 15       	cp	r16, r1
    25f4:	11 05       	cpc	r17, r1
    25f6:	49 f1       	breq	.+82     	; 0x264a <_ZN8CFastLED4showEh+0xfc>
    25f8:	f8 01       	movw	r30, r16
    25fa:	c4 84       	ldd	r12, Z+12	; 0x0c
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    25fc:	d7 01       	movw	r26, r14
    25fe:	11 96       	adiw	r26, 0x01	; 1
    2600:	8d 91       	ld	r24, X+
    2602:	9c 91       	ld	r25, X
    2604:	12 97       	sbiw	r26, 0x02	; 2
    2606:	84 36       	cpi	r24, 0x64	; 100
    2608:	91 05       	cpc	r25, r1
    260a:	08 f4       	brcc	.+2      	; 0x260e <_ZN8CFastLED4showEh+0xc0>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    260c:	14 86       	std	Z+12, r1	; 0x0c
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    260e:	d8 01       	movw	r26, r16
    2610:	ed 91       	ld	r30, X+
    2612:	fc 91       	ld	r31, X
    2614:	a2 80       	ldd	r10, Z+2	; 0x02
    2616:	b3 80       	ldd	r11, Z+3	; 0x03
    2618:	4d 2d       	mov	r20, r13
    261a:	b8 01       	movw	r22, r16
    261c:	ce 01       	movw	r24, r28
    261e:	01 96       	adiw	r24, 0x01	; 1
    2620:	8d de       	rcall	.-742    	; 0x233c <_ZN14CLEDController13getAdjustmentEh>
    2622:	f8 01       	movw	r30, r16
    2624:	45 85       	ldd	r20, Z+13	; 0x0d
    2626:	56 85       	ldd	r21, Z+14	; 0x0e
    2628:	62 81       	ldd	r22, Z+2	; 0x02
    262a:	73 81       	ldd	r23, Z+3	; 0x03
    262c:	9e 01       	movw	r18, r28
    262e:	2f 5f       	subi	r18, 0xFF	; 255
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	c8 01       	movw	r24, r16
    2634:	f5 01       	movw	r30, r10
    2636:	09 95       	icall
    2638:	d8 01       	movw	r26, r16

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    263a:	1c 96       	adiw	r26, 0x0c	; 12
    263c:	cc 92       	st	X, r12
    263e:	1c 97       	sbiw	r26, 0x0c	; 12
    2640:	14 96       	adiw	r26, 0x04	; 4
    2642:	0d 91       	ld	r16, X+
    2644:	1c 91       	ld	r17, X
    2646:	15 97       	sbiw	r26, 0x05	; 5
    2648:	d4 cf       	rjmp	.-88     	; 0x25f2 <_ZN8CFastLED4showEh+0xa4>
    264a:	69 e1       	ldi	r22, 0x19	; 25
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	c7 01       	movw	r24, r14
    2650:	2a df       	rcall	.-428    	; 0x24a6 <_ZN8CFastLED8countFPSEi>
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
}
    2656:	0f 90       	pop	r0
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	0f 91       	pop	r16
    2660:	ff 90       	pop	r15
    2662:	ef 90       	pop	r14
    2664:	df 90       	pop	r13
    2666:	cf 90       	pop	r12
    2668:	bf 90       	pop	r11
    266a:	af 90       	pop	r10
    266c:	08 95       	ret

0000266e <yield>:
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }

#ifdef FASTLED_NEEDS_YIELD
extern "C" void yield(void) { }
    266e:	08 95       	ret

00002670 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    2670:	ef ec       	ldi	r30, 0xCF	; 207
    2672:	f2 e0       	ldi	r31, 0x02	; 2
    2674:	8f ef       	ldi	r24, 0xFF	; 255
    2676:	80 83       	st	Z, r24
	m_nFPS = 0;
    2678:	12 82       	std	Z+2, r1	; 0x02
    267a:	11 82       	std	Z+1, r1	; 0x01
	m_pPowerFunc = NULL;
    267c:	14 86       	std	Z+12, r1	; 0x0c
    267e:	13 86       	std	Z+11, r1	; 0x0b
	m_nPowerData = 0xFFFFFFFF;
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	9f ef       	ldi	r25, 0xFF	; 255
    2684:	dc 01       	movw	r26, r24
    2686:	87 83       	std	Z+7, r24	; 0x07
    2688:	90 87       	std	Z+8, r25	; 0x08
    268a:	a1 87       	std	Z+9, r26	; 0x09
    268c:	b2 87       	std	Z+10, r27	; 0x0a
    268e:	08 95       	ret

00002690 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	ec 01       	movw	r28, r24
  digitalWrite(_enable_pin, LOW);
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	8e 81       	ldd	r24, Y+6	; 0x06
    269a:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  delayMicroseconds(1);    
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	8e 81       	ldd	r24, Y+6	; 0x06
    26aa:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	8e 81       	ldd	r24, Y+6	; 0x06
    26ba:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
    26be:	84 e6       	ldi	r24, 0x64	; 100
    26c0:	90 e0       	ldi	r25, 0x00	; 0
}
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
    26c6:	0c 94 2e 02 	jmp	0x45c	; 0x45c <delayMicroseconds>

000026ca <_ZN13LiquidCrystal10write4bitsEh>:
}

void LiquidCrystal::write4bits(uint8_t value) {
    26ca:	cf 92       	push	r12
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	7c 01       	movw	r14, r24
    26dc:	6c 01       	movw	r12, r24
    26de:	87 e0       	ldi	r24, 0x07	; 7
    26e0:	c8 0e       	add	r12, r24
    26e2:	d1 1c       	adc	r13, r1
  for (int i = 0; i < 4; i++) {
    26e4:	c0 e0       	ldi	r28, 0x00	; 0
    26e6:	d0 e0       	ldi	r29, 0x00	; 0
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    26e8:	06 2f       	mov	r16, r22
    26ea:	10 e0       	ldi	r17, 0x00	; 0
    26ec:	b8 01       	movw	r22, r16
    26ee:	0c 2e       	mov	r0, r28
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    26f2:	75 95       	asr	r23
    26f4:	67 95       	ror	r22
    26f6:	0a 94       	dec	r0
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    26fa:	61 70       	andi	r22, 0x01	; 1
    26fc:	f6 01       	movw	r30, r12
    26fe:	81 91       	ld	r24, Z+
    2700:	6f 01       	movw	r12, r30
    2702:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    2706:	21 96       	adiw	r28, 0x01	; 1
    2708:	c4 30       	cpi	r28, 0x04	; 4
    270a:	d1 05       	cpc	r29, r1
    270c:	79 f7       	brne	.-34     	; 0x26ec <_ZN13LiquidCrystal10write4bitsEh+0x22>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    270e:	c7 01       	movw	r24, r14
}
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	cf 90       	pop	r12
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
    2720:	b7 cf       	rjmp	.-146    	; 0x2690 <_ZN13LiquidCrystal11pulseEnableEv>

00002722 <_ZN13LiquidCrystal10write8bitsEh>:
}

void LiquidCrystal::write8bits(uint8_t value) {
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	7c 01       	movw	r14, r24
    2734:	6c 01       	movw	r12, r24
    2736:	87 e0       	ldi	r24, 0x07	; 7
    2738:	c8 0e       	add	r12, r24
    273a:	d1 1c       	adc	r13, r1
  for (int i = 0; i < 8; i++) {
    273c:	c0 e0       	ldi	r28, 0x00	; 0
    273e:	d0 e0       	ldi	r29, 0x00	; 0
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    2740:	06 2f       	mov	r16, r22
    2742:	10 e0       	ldi	r17, 0x00	; 0
    2744:	b8 01       	movw	r22, r16
    2746:	0c 2e       	mov	r0, r28
    2748:	02 c0       	rjmp	.+4      	; 0x274e <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    274a:	75 95       	asr	r23
    274c:	67 95       	ror	r22
    274e:	0a 94       	dec	r0
    2750:	e2 f7       	brpl	.-8      	; 0x274a <_ZN13LiquidCrystal10write8bitsEh+0x28>
    2752:	61 70       	andi	r22, 0x01	; 1
    2754:	f6 01       	movw	r30, r12
    2756:	81 91       	ld	r24, Z+
    2758:	6f 01       	movw	r12, r30
    275a:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    275e:	21 96       	adiw	r28, 0x01	; 1
    2760:	c8 30       	cpi	r28, 0x08	; 8
    2762:	d1 05       	cpc	r29, r1
    2764:	79 f7       	brne	.-34     	; 0x2744 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    2766:	c7 01       	movw	r24, r14
}
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
    2778:	8b cf       	rjmp	.-234    	; 0x2690 <_ZN13LiquidCrystal11pulseEnableEv>

0000277a <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	ec 01       	movw	r28, r24
    2782:	16 2f       	mov	r17, r22
  digitalWrite(_rs_pin, mode);
    2784:	64 2f       	mov	r22, r20
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	8f 3f       	cpi	r24, 0xFF	; 255
    2790:	19 f0       	breq	.+6      	; 0x2798 <_ZN13LiquidCrystal4sendEhh+0x1e>
    digitalWrite(_rw_pin, LOW);
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    2798:	8f 85       	ldd	r24, Y+15	; 0x0f
    write8bits(value); 
    279a:	61 2f       	mov	r22, r17
  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    digitalWrite(_rw_pin, LOW);
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    279c:	84 ff       	sbrs	r24, 4
    279e:	05 c0       	rjmp	.+10     	; 0x27aa <_ZN13LiquidCrystal4sendEhh+0x30>
    write8bits(value); 
    27a0:	ce 01       	movw	r24, r28
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	1f 91       	pop	r17
  if (_rw_pin != 255) { 
    digitalWrite(_rw_pin, LOW);
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
    27a8:	bc cf       	rjmp	.-136    	; 0x2722 <_ZN13LiquidCrystal10write8bitsEh>
    27aa:	70 e0       	ldi	r23, 0x00	; 0
  } else {
    write4bits(value>>4);
    27ac:	84 e0       	ldi	r24, 0x04	; 4
    27ae:	75 95       	asr	r23
    27b0:	67 95       	ror	r22
    27b2:	8a 95       	dec	r24
    27b4:	e1 f7       	brne	.-8      	; 0x27ae <_ZN13LiquidCrystal4sendEhh+0x34>
    27b6:	ce 01       	movw	r24, r28
    27b8:	88 df       	rcall	.-240    	; 0x26ca <_ZN13LiquidCrystal10write4bitsEh>
    27ba:	61 2f       	mov	r22, r17
    27bc:	ce 01       	movw	r24, r28
    write4bits(value);
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
  }
}
    27c2:	1f 91       	pop	r17
    27c4:	82 cf       	rjmp	.-252    	; 0x26ca <_ZN13LiquidCrystal10write4bitsEh>

000027c6 <_ZN13LiquidCrystal7commandEh>:
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	d8 cf       	rjmp	.-80     	; 0x277a <_ZN13LiquidCrystal4sendEhh>

000027ca <_ZN13LiquidCrystal5clearEv>:
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	fc df       	rcall	.-8      	; 0x27c6 <_ZN13LiquidCrystal7commandEh>
    27ce:	80 ed       	ldi	r24, 0xD0	; 208
  delayMicroseconds(2000);  // this command takes a long time!
    27d0:	97 e0       	ldi	r25, 0x07	; 7
    27d2:	0c 94 2e 02 	jmp	0x45c	; 0x45c <delayMicroseconds>

000027d6 <_ZN13LiquidCrystal9setCursorEhh>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
{
    27d6:	fc 01       	movw	r30, r24
    27d8:	44 30       	cpi	r20, 0x04	; 4
    27da:	08 f0       	brcs	.+2      	; 0x27de <_ZN13LiquidCrystal9setCursorEhh+0x8>
    27dc:	43 e0       	ldi	r20, 0x03	; 3
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
    27de:	83 89       	ldd	r24, Z+19	; 0x13
    27e0:	48 17       	cp	r20, r24
    27e2:	10 f0       	brcs	.+4      	; 0x27e8 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    row = _numlines - 1;    // we count rows starting w/0
    27e4:	4f ef       	ldi	r20, 0xFF	; 255
    27e6:	48 0f       	add	r20, r24
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    27e8:	df 01       	movw	r26, r30
    27ea:	a4 0f       	add	r26, r20
    27ec:	b1 1d       	adc	r27, r1
    27ee:	54 96       	adiw	r26, 0x14	; 20
    27f0:	9c 91       	ld	r25, X
    27f2:	69 0f       	add	r22, r25
    27f4:	60 68       	ori	r22, 0x80	; 128
    27f6:	cf 01       	movw	r24, r30
    27f8:	e6 cf       	rjmp	.-52     	; 0x27c6 <_ZN13LiquidCrystal7commandEh>

000027fa <_ZN13LiquidCrystal7displayEv>:
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
    27fa:	fc 01       	movw	r30, r24
    27fc:	60 89       	ldd	r22, Z+16	; 0x10
    27fe:	26 2f       	mov	r18, r22
    2800:	24 60       	ori	r18, 0x04	; 4
    2802:	20 8b       	std	Z+16, r18	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
    2804:	6c 60       	ori	r22, 0x0C	; 12
    2806:	df cf       	rjmp	.-66     	; 0x27c6 <_ZN13LiquidCrystal7commandEh>

00002808 <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	ec 01       	movw	r28, r24
  if (lines > 1) {
    2816:	42 30       	cpi	r20, 0x02	; 2
    2818:	18 f0       	brcs	.+6      	; 0x2820 <_ZN13LiquidCrystal5beginEhhh+0x18>
    _displayfunction |= LCD_2LINE;
    281a:	8f 85       	ldd	r24, Y+15	; 0x0f
    281c:	88 60       	ori	r24, 0x08	; 8
    281e:	8f 87       	std	Y+15, r24	; 0x0f
  }
  _numlines = lines;
    2820:	4b 8b       	std	Y+19, r20	; 0x13

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
    2822:	1c 8a       	std	Y+20, r1	; 0x14
  _row_offsets[1] = row1;
    2824:	80 e4       	ldi	r24, 0x40	; 64
    2826:	8d 8b       	std	Y+21, r24	; 0x15
  _row_offsets[2] = row2;
    2828:	6e 8b       	std	Y+22, r22	; 0x16
  if (lines > 1) {
    _displayfunction |= LCD_2LINE;
  }
  _numlines = lines;

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	60 5c       	subi	r22, 0xC0	; 192
    282e:	7f 4f       	sbci	r23, 0xFF	; 255
void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
  _row_offsets[1] = row1;
  _row_offsets[2] = row2;
  _row_offsets[3] = row3;
    2830:	6f 8b       	std	Y+23, r22	; 0x17
  _numlines = lines;

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    2832:	22 23       	and	r18, r18
    2834:	29 f0       	breq	.+10     	; 0x2840 <_ZN13LiquidCrystal5beginEhhh+0x38>
    2836:	41 30       	cpi	r20, 0x01	; 1
    2838:	19 f4       	brne	.+6      	; 0x2840 <_ZN13LiquidCrystal5beginEhhh+0x38>
    _displayfunction |= LCD_5x10DOTS;
    283a:	8f 85       	ldd	r24, Y+15	; 0x0f
    283c:	84 60       	ori	r24, 0x04	; 4
    283e:	8f 87       	std	Y+15, r24	; 0x0f
  }

  pinMode(_rs_pin, OUTPUT);
    2840:	61 e0       	ldi	r22, 0x01	; 1
    2842:	8c 81       	ldd	r24, Y+4	; 0x04
    2844:	0e 94 a3 02 	call	0x546	; 0x546 <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	8f 3f       	cpi	r24, 0xFF	; 255
    284c:	19 f0       	breq	.+6      	; 0x2854 <_ZN13LiquidCrystal5beginEhhh+0x4c>
    pinMode(_rw_pin, OUTPUT);
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	0e 94 a3 02 	call	0x546	; 0x546 <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	8e 81       	ldd	r24, Y+6	; 0x06
    2858:	0e 94 a3 02 	call	0x546	; 0x546 <pinMode>
    285c:	7e 01       	movw	r14, r28
    285e:	87 e0       	ldi	r24, 0x07	; 7
    2860:	e8 0e       	add	r14, r24
    2862:	f1 1c       	adc	r15, r1
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
    2864:	00 e0       	ldi	r16, 0x00	; 0
    2866:	10 e0       	ldi	r17, 0x00	; 0
    2868:	8f 85       	ldd	r24, Y+15	; 0x0f
    286a:	84 fd       	sbrc	r24, 4
    286c:	03 c0       	rjmp	.+6      	; 0x2874 <_ZN13LiquidCrystal5beginEhhh+0x6c>
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <_ZN13LiquidCrystal5beginEhhh+0x70>
    2874:	88 e0       	ldi	r24, 0x08	; 8
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	08 17       	cp	r16, r24
    287a:	19 07       	cpc	r17, r25
    287c:	4c f4       	brge	.+18     	; 0x2890 <_ZN13LiquidCrystal5beginEhhh+0x88>
  {
    pinMode(_data_pins[i], OUTPUT);
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	f7 01       	movw	r30, r14
    2882:	81 91       	ld	r24, Z+
    2884:	7f 01       	movw	r14, r30
    2886:	0e 94 a3 02 	call	0x546	; 0x546 <pinMode>
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
    288a:	0f 5f       	subi	r16, 0xFF	; 255
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	ec cf       	rjmp	.-40     	; 0x2868 <_ZN13LiquidCrystal5beginEhhh+0x60>
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
    2890:	80 e5       	ldi	r24, 0x50	; 80
    2892:	93 ec       	ldi	r25, 0xC3	; 195
    2894:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	8e 81       	ldd	r24, Y+6	; 0x06
    28a4:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  if (_rw_pin != 255) { 
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	8f 3f       	cpi	r24, 0xFF	; 255
    28ac:	19 f0       	breq	.+6      	; 0x28b4 <_ZN13LiquidCrystal5beginEhhh+0xac>
    digitalWrite(_rw_pin, LOW);
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	0e 94 91 03 	call	0x722	; 0x722 <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
    28b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    28b6:	64 fd       	sbrc	r22, 4
    28b8:	19 c0       	rjmp	.+50     	; 0x28ec <_ZN13LiquidCrystal5beginEhhh+0xe4>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
    28ba:	63 e0       	ldi	r22, 0x03	; 3
    28bc:	ce 01       	movw	r24, r28
    28be:	05 df       	rcall	.-502    	; 0x26ca <_ZN13LiquidCrystal10write4bitsEh>
    28c0:	84 e9       	ldi	r24, 0x94	; 148
    delayMicroseconds(4500); // wait min 4.1ms
    28c2:	91 e1       	ldi	r25, 0x11	; 17
    28c4:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
    28c8:	63 e0       	ldi	r22, 0x03	; 3

    // second try
    write4bits(0x03);
    28ca:	ce 01       	movw	r24, r28
    28cc:	fe de       	rcall	.-516    	; 0x26ca <_ZN13LiquidCrystal10write4bitsEh>
    28ce:	84 e9       	ldi	r24, 0x94	; 148
    28d0:	91 e1       	ldi	r25, 0x11	; 17
    delayMicroseconds(4500); // wait min 4.1ms
    28d2:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
    28d6:	63 e0       	ldi	r22, 0x03	; 3
    28d8:	ce 01       	movw	r24, r28
    
    // third go!
    write4bits(0x03); 
    28da:	f7 de       	rcall	.-530    	; 0x26ca <_ZN13LiquidCrystal10write4bitsEh>
    28dc:	86 e9       	ldi	r24, 0x96	; 150
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
    delayMicroseconds(150);
    28e4:	62 e0       	ldi	r22, 0x02	; 2
    28e6:	ce 01       	movw	r24, r28
    28e8:	f0 de       	rcall	.-544    	; 0x26ca <_ZN13LiquidCrystal10write4bitsEh>

    // finally, set to 4-bit interface
    write4bits(0x02); 
    28ea:	13 c0       	rjmp	.+38     	; 0x2912 <_ZN13LiquidCrystal5beginEhhh+0x10a>
    28ec:	60 62       	ori	r22, 0x20	; 32
    28ee:	ce 01       	movw	r24, r28
    28f0:	6a df       	rcall	.-300    	; 0x27c6 <_ZN13LiquidCrystal7commandEh>
    28f2:	84 e9       	ldi	r24, 0x94	; 148
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
    28f4:	91 e1       	ldi	r25, 0x11	; 17
    28f6:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
    28fa:	6f 85       	ldd	r22, Y+15	; 0x0f
    delayMicroseconds(4500);  // wait more than 4.1ms
    28fc:	60 62       	ori	r22, 0x20	; 32
    28fe:	ce 01       	movw	r24, r28
    2900:	62 df       	rcall	.-316    	; 0x27c6 <_ZN13LiquidCrystal7commandEh>
    2902:	86 e9       	ldi	r24, 0x96	; 150

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 2e 02 	call	0x45c	; 0x45c <delayMicroseconds>
    290a:	6f 85       	ldd	r22, Y+15	; 0x0f
    290c:	60 62       	ori	r22, 0x20	; 32
    delayMicroseconds(150);
    290e:	ce 01       	movw	r24, r28
    2910:	5a df       	rcall	.-332    	; 0x27c6 <_ZN13LiquidCrystal7commandEh>
    2912:	6f 85       	ldd	r22, Y+15	; 0x0f
    2914:	60 62       	ori	r22, 0x20	; 32

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
    2916:	ce 01       	movw	r24, r28
    2918:	56 df       	rcall	.-340    	; 0x27c6 <_ZN13LiquidCrystal7commandEh>
    291a:	84 e0       	ldi	r24, 0x04	; 4
    291c:	88 8b       	std	Y+16, r24	; 0x10
    291e:	ce 01       	movw	r24, r28
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
    2920:	6c df       	rcall	.-296    	; 0x27fa <_ZN13LiquidCrystal7displayEv>
    2922:	ce 01       	movw	r24, r28
    2924:	52 df       	rcall	.-348    	; 0x27ca <_ZN13LiquidCrystal5clearEv>
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	89 8b       	std	Y+17, r24	; 0x11

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
    292a:	66 e0       	ldi	r22, 0x06	; 6
    292c:	ce 01       	movw	r24, r28
  display();
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	1f 91       	pop	r17

  // clear it off
  clear();
    2934:	0f 91       	pop	r16
    2936:	ff 90       	pop	r15
    2938:	ef 90       	pop	r14

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    293a:	45 cf       	rjmp	.-374    	; 0x27c6 <_ZN13LiquidCrystal7commandEh>

0000293c <_ZN13LiquidCrystalC1Ehhhhhh>:
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
    293c:	cf 92       	push	r12
    293e:	ef 92       	push	r14
    2940:	0f 93       	push	r16
    2942:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2944:	13 82       	std	Z+3, r1	; 0x03
    2946:	12 82       	std	Z+2, r1	; 0x02
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
    2948:	8b e6       	ldi	r24, 0x6B	; 107
    294a:	91 e0       	ldi	r25, 0x01	; 1
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
  _rs_pin = rs;
    2950:	64 83       	std	Z+4, r22	; 0x04
  _rw_pin = rw;
    2952:	8f ef       	ldi	r24, 0xFF	; 255
    2954:	85 83       	std	Z+5, r24	; 0x05
  _enable_pin = enable;
    2956:	46 83       	std	Z+6, r20	; 0x06
  
  _data_pins[0] = d0;
    2958:	27 83       	std	Z+7, r18	; 0x07
  _data_pins[1] = d1;
    295a:	00 87       	std	Z+8, r16	; 0x08
  _data_pins[2] = d2;
    295c:	e1 86       	std	Z+9, r14	; 0x09
  _data_pins[3] = d3; 
    295e:	c2 86       	std	Z+10, r12	; 0x0a
  _data_pins[4] = d4;
    2960:	13 86       	std	Z+11, r1	; 0x0b
  _data_pins[5] = d5;
    2962:	14 86       	std	Z+12, r1	; 0x0c
  _data_pins[6] = d6;
    2964:	15 86       	std	Z+13, r1	; 0x0d
  _data_pins[7] = d7; 
    2966:	16 86       	std	Z+14, r1	; 0x0e

  if (fourbitmode)
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    2968:	17 86       	std	Z+15, r1	; 0x0f
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	60 e1       	ldi	r22, 0x10	; 16
    2970:	cf 01       	movw	r24, r30

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
    2972:	0f 91       	pop	r16
    2974:	ef 90       	pop	r14
    2976:	cf 90       	pop	r12
  if (fourbitmode)
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
    2978:	47 cf       	rjmp	.-370    	; 0x2808 <_ZN13LiquidCrystal5beginEhhh>

0000297a <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    297a:	41 e0       	ldi	r20, 0x01	; 1
    297c:	fe de       	rcall	.-516    	; 0x277a <_ZN13LiquidCrystal4sendEhh>
    297e:	81 e0       	ldi	r24, 0x01	; 1
  return 1; // assume sucess
}
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	08 95       	ret

00002984 <_Z9new_applev>:

// the delay between frames
int delay_ms = (100);

// moves the goal to a new position
void new_apple() {
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rand16seed>
    2990:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rand16seed+0x1>
		apple.x = random8(COLUMNS - 1);
		apple.y = random8(ROWS - 1);

		// checks for collision with snake
		on_snake = false;
		for (int i = 0; i < snake_length; i++) {
    2994:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <snake_length>
    2998:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <snake_length+0x1>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    299c:	65 e0       	ldi	r22, 0x05	; 5
    299e:	78 e0       	ldi	r23, 0x08	; 8
    29a0:	86 9f       	mul	r24, r22
    29a2:	90 01       	movw	r18, r0
    29a4:	87 9f       	mul	r24, r23
    29a6:	30 0d       	add	r19, r0
    29a8:	96 9f       	mul	r25, r22
    29aa:	30 0d       	add	r19, r0
    29ac:	11 24       	eor	r1, r1
    29ae:	27 5e       	subi	r18, 0xE7	; 231
    29b0:	39 4c       	sbci	r19, 0xC9	; 201
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    29b2:	43 2f       	mov	r20, r19
    29b4:	42 0f       	add	r20, r18
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    29b6:	89 e0       	ldi	r24, 0x09	; 9
    29b8:	48 9f       	mul	r20, r24
    29ba:	a0 01       	movw	r20, r0
    29bc:	11 24       	eor	r1, r1
    29be:	45 2f       	mov	r20, r21
    29c0:	55 0f       	add	r21, r21
    29c2:	55 0b       	sbc	r21, r21
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    29c4:	26 9f       	mul	r18, r22
    29c6:	c0 01       	movw	r24, r0
    29c8:	27 9f       	mul	r18, r23
    29ca:	90 0d       	add	r25, r0
    29cc:	36 9f       	mul	r19, r22
    29ce:	90 0d       	add	r25, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	87 5e       	subi	r24, 0xE7	; 231
    29d4:	99 4c       	sbci	r25, 0xC9	; 201
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    29d6:	29 2f       	mov	r18, r25
    29d8:	28 0f       	add	r18, r24
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    29da:	e9 e0       	ldi	r30, 0x09	; 9
    29dc:	2e 9f       	mul	r18, r30
    29de:	90 01       	movw	r18, r0
    29e0:	11 24       	eor	r1, r1
    29e2:	23 2f       	mov	r18, r19
    29e4:	33 0f       	add	r19, r19
    29e6:	33 0b       	sbc	r19, r19
    29e8:	e0 ee       	ldi	r30, 0xE0	; 224
    29ea:	f2 e0       	ldi	r31, 0x02	; 2
    29ec:	c0 e0       	ldi	r28, 0x00	; 0
    29ee:	d0 e0       	ldi	r29, 0x00	; 0
    29f0:	ca 17       	cp	r28, r26
    29f2:	db 07       	cpc	r29, r27
    29f4:	6c f4       	brge	.+26     	; 0x2a10 <_Z9new_applev+0x8c>
			// checks if it is on snake part
			if (snake[i].x == apple.x && snake[i].y == apple.y) {
    29f6:	00 81       	ld	r16, Z
    29f8:	11 81       	ldd	r17, Z+1	; 0x01
    29fa:	04 17       	cp	r16, r20
    29fc:	15 07       	cpc	r17, r21
    29fe:	29 f4       	brne	.+10     	; 0x2a0a <_Z9new_applev+0x86>
    2a00:	02 81       	ldd	r16, Z+2	; 0x02
    2a02:	13 81       	ldd	r17, Z+3	; 0x03
    2a04:	02 17       	cp	r16, r18
    2a06:	13 07       	cpc	r17, r19
    2a08:	59 f2       	breq	.-106    	; 0x29a0 <_Z9new_applev+0x1c>
		apple.x = random8(COLUMNS - 1);
		apple.y = random8(ROWS - 1);

		// checks for collision with snake
		on_snake = false;
		for (int i = 0; i < snake_length; i++) {
    2a0a:	21 96       	adiw	r28, 0x01	; 1
    2a0c:	34 96       	adiw	r30, 0x04	; 4
    2a0e:	f0 cf       	rjmp	.-32     	; 0x29f0 <_Z9new_applev+0x6c>
    2a10:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <rand16seed+0x1>
    2a14:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rand16seed>
    2a18:	50 93 dd 02 	sts	0x02DD, r21	; 0x8002dd <apple+0x1>
    2a1c:	40 93 dc 02 	sts	0x02DC, r20	; 0x8002dc <apple>
    2a20:	30 93 df 02 	sts	0x02DF, r19	; 0x8002df <apple+0x3>
    2a24:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <apple+0x2>
				on_snake = true;
				break;
			}
		}
	}
}
    2a28:	df 91       	pop	r29
    2a2a:	cf 91       	pop	r28
    2a2c:	1f 91       	pop	r17
    2a2e:	0f 91       	pop	r16
    2a30:	08 95       	ret

00002a32 <_Z10draw_scorev>:

void draw_score() {
	lcd.clear();
    2a32:	81 e8       	ldi	r24, 0x81	; 129
    2a34:	94 e0       	ldi	r25, 0x04	; 4
    2a36:	c9 de       	rcall	.-622    	; 0x27ca <_ZN13LiquidCrystal5clearEv>
    2a38:	40 e0       	ldi	r20, 0x00	; 0

	lcd.setCursor(0, 0);
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	81 e8       	ldi	r24, 0x81	; 129
    2a3e:	94 e0       	ldi	r25, 0x04	; 4
    2a40:	ca de       	rcall	.-620    	; 0x27d6 <_ZN13LiquidCrystal9setCursorEhh>
    2a42:	6f e6       	ldi	r22, 0x6F	; 111
    2a44:	71 e0       	ldi	r23, 0x01	; 1
	lcd.print("score:     ");
    2a46:	81 e8       	ldi	r24, 0x81	; 129
    2a48:	94 e0       	ldi	r25, 0x04	; 4
    2a4a:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5printEPKc>
    2a4e:	60 91 70 04 	lds	r22, 0x0470	; 0x800470 <snake_length>
	lcd.print(snake_length);
    2a52:	70 91 71 04 	lds	r23, 0x0471	; 0x800471 <snake_length+0x1>
    2a56:	4a e0       	ldi	r20, 0x0A	; 10
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	81 e8       	ldi	r24, 0x81	; 129
    2a5c:	94 e0       	ldi	r25, 0x04	; 4
    2a5e:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN5Print5printEii>
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	60 e0       	ldi	r22, 0x00	; 0

	lcd.setCursor(0, 1);
    2a66:	81 e8       	ldi	r24, 0x81	; 129
    2a68:	94 e0       	ldi	r25, 0x04	; 4
    2a6a:	b5 de       	rcall	.-662    	; 0x27d6 <_ZN13LiquidCrystal9setCursorEhh>
    2a6c:	64 ea       	ldi	r22, 0xA4	; 164
    2a6e:	71 e0       	ldi	r23, 0x01	; 1
    2a70:	81 e8       	ldi	r24, 0x81	; 129
	lcd.print("highscore: ");
    2a72:	94 e0       	ldi	r25, 0x04	; 4
    2a74:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5printEPKc>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	71 d7       	rcall	.+3810   	; 0x3960 <eeprom_read_byte>
    2a7e:	4a e0       	ldi	r20, 0x0A	; 10
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	68 2f       	mov	r22, r24
    2a84:	81 e8       	ldi	r24, 0x81	; 129
	lcd.print(EEPROM.read(HIGH_SCORE_ADRESS));
    2a86:	94 e0       	ldi	r25, 0x04	; 4
    2a88:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <_ZN5Print5printEhi>

00002a8c <_Z5resetv>:
}

// resets the playing field
void reset() {
	snake_length = 4;
    2a8c:	84 e0       	ldi	r24, 0x04	; 4
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <snake_length+0x1>
    2a94:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <snake_length>
	dir = up;
    2a98:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <dir+0x1>
    2a9c:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <dir>
	// sets the beginning of the snake to init_snake
	memcpy(&snake, &init_snake, sizeof(init_snake));
    2aa0:	80 e1       	ldi	r24, 0x10	; 16
    2aa2:	ea e0       	ldi	r30, 0x0A	; 10
    2aa4:	f1 e0       	ldi	r31, 0x01	; 1
    2aa6:	a0 ee       	ldi	r26, 0xE0	; 224
    2aa8:	b2 e0       	ldi	r27, 0x02	; 2
    2aaa:	01 90       	ld	r0, Z+
    2aac:	0d 92       	st	X+, r0
    2aae:	8a 95       	dec	r24
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <_Z5resetv+0x1e>

	new_apple();
    2ab2:	68 df       	rcall	.-304    	; 0x2984 <_Z9new_applev>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
	paused = true;
    2ab6:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <paused>
    2aba:	08 95       	ret

00002abc <_Z17update_hightscorev>:
}

void update_hightscore() {
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
	if (snake_length <= 256) {
    2ac0:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <snake_length>
    2ac4:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <snake_length+0x1>
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	91 40       	sbci	r25, 0x01	; 1
    2acc:	0c f0       	brlt	.+2      	; 0x2ad0 <_Z17update_hightscorev+0x14>
    2ace:	5d c0       	rjmp	.+186    	; 0x2b8a <_Z17update_hightscorev+0xce>
		Serial.println("============================");
    2ad0:	6b e7       	ldi	r22, 0x7B	; 123
    2ad2:	71 e0       	ldi	r23, 0x01	; 1
    2ad4:	84 e0       	ldi	r24, 0x04	; 4
    2ad6:	92 e0       	ldi	r25, 0x02	; 2
    2ad8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN5Print7printlnEPKc>

		uint8_t score = snake_length;
    2adc:	c0 91 70 04 	lds	r28, 0x0470	; 0x800470 <snake_length>
		Serial.print("Score: ");
    2ae0:	68 e9       	ldi	r22, 0x98	; 152
    2ae2:	71 e0       	ldi	r23, 0x01	; 1
    2ae4:	84 e0       	ldi	r24, 0x04	; 4
    2ae6:	92 e0       	ldi	r25, 0x02	; 2
    2ae8:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5printEPKc>
		Serial.println(score);
    2aec:	4a e0       	ldi	r20, 0x0A	; 10
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	6c 2f       	mov	r22, r28
    2af2:	84 e0       	ldi	r24, 0x04	; 4
    2af4:	92 e0       	ldi	r25, 0x02	; 2
    2af6:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN5Print7printlnEhi>

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	30 d7       	rcall	.+3680   	; 0x3960 <eeprom_read_byte>
    2b00:	d8 2f       	mov	r29, r24
    2b02:	60 ea       	ldi	r22, 0xA0	; 160

		uint8_t old_highscore = EEPROM.read(HIGH_SCORE_ADRESS);
		Serial.print("old highscore: ");
    2b04:	71 e0       	ldi	r23, 0x01	; 1
    2b06:	84 e0       	ldi	r24, 0x04	; 4
    2b08:	92 e0       	ldi	r25, 0x02	; 2
    2b0a:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5printEPKc>
    2b0e:	4a e0       	ldi	r20, 0x0A	; 10
		Serial.println(old_highscore);
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	6d 2f       	mov	r22, r29
    2b14:	84 e0       	ldi	r24, 0x04	; 4
    2b16:	92 e0       	ldi	r25, 0x02	; 2
    2b18:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN5Print7printlnEhi>
    2b1c:	dc 17       	cp	r29, r28
		if (score > old_highscore) {
    2b1e:	38 f5       	brcc	.+78     	; 0x2b6e <_Z17update_hightscorev+0xb2>
    2b20:	60 eb       	ldi	r22, 0xB0	; 176
			Serial.println("NEW HIGHSCORE!!!");
    2b22:	71 e0       	ldi	r23, 0x01	; 1
    2b24:	84 e0       	ldi	r24, 0x04	; 4
    2b26:	92 e0       	ldi	r25, 0x02	; 2
    2b28:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN5Print7printlnEPKc>
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
			lcd.setCursor(0, 0);
    2b2e:	60 e0       	ldi	r22, 0x00	; 0
    2b30:	81 e8       	ldi	r24, 0x81	; 129
    2b32:	94 e0       	ldi	r25, 0x04	; 4
    2b34:	50 de       	rcall	.-864    	; 0x27d6 <_ZN13LiquidCrystal9setCursorEhh>
    2b36:	64 eb       	ldi	r22, 0xB4	; 180
    2b38:	71 e0       	ldi	r23, 0x01	; 1
			lcd.print("HIGHSCORE!!!");
    2b3a:	81 e8       	ldi	r24, 0x81	; 129
    2b3c:	94 e0       	ldi	r25, 0x04	; 4
    2b3e:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5printEPKc>
    2b42:	41 e0       	ldi	r20, 0x01	; 1
    2b44:	60 e0       	ldi	r22, 0x00	; 0
			lcd.setCursor(0, 1);
    2b46:	81 e8       	ldi	r24, 0x81	; 129
    2b48:	94 e0       	ldi	r25, 0x04	; 4
    2b4a:	45 de       	rcall	.-886    	; 0x27d6 <_ZN13LiquidCrystal9setCursorEhh>
    2b4c:	61 ec       	ldi	r22, 0xC1	; 193
    2b4e:	71 e0       	ldi	r23, 0x01	; 1
    2b50:	81 e8       	ldi	r24, 0x81	; 129
			lcd.print("score = ");
    2b52:	94 e0       	ldi	r25, 0x04	; 4
    2b54:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN5Print5printEPKc>
    2b58:	4a e0       	ldi	r20, 0x0A	; 10
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	6c 2f       	mov	r22, r28
			lcd.print(score);
    2b5e:	81 e8       	ldi	r24, 0x81	; 129
    2b60:	94 e0       	ldi	r25, 0x04	; 4
    2b62:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print5printEhi>
    2b66:	6c 2f       	mov	r22, r28
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    2b6c:	01 d7       	rcall	.+3586   	; 0x3970 <eeprom_write_byte>
    2b6e:	6b e7       	ldi	r22, 0x7B	; 123
    2b70:	71 e0       	ldi	r23, 0x01	; 1
    2b72:	84 e0       	ldi	r24, 0x04	; 4
    2b74:	92 e0       	ldi	r25, 0x02	; 2

			// save new hightscore
			EEPROM.write(HIGH_SCORE_ADRESS, score);
		}
		Serial.println("============================");
    2b76:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN5Print7printlnEPKc>
    2b7a:	6a e7       	ldi	r22, 0x7A	; 122
    2b7c:	71 e0       	ldi	r23, 0x01	; 1
    2b7e:	84 e0       	ldi	r24, 0x04	; 4
    2b80:	92 e0       	ldi	r25, 0x02	; 2
		Serial.println("");
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <_ZN5Print7printlnEPKc>
	} else {
		Serial.print("ERROR COULD NOT SAVE SCORE. SCORE IS GREATER THEN 256");
	}
}
    2b8a:	6a ec       	ldi	r22, 0xCA	; 202
    2b8c:	71 e0       	ldi	r23, 0x01	; 1

			// save new hightscore
			EEPROM.write(HIGH_SCORE_ADRESS, score);
		}
		Serial.println("============================");
		Serial.println("");
    2b8e:	84 e0       	ldi	r24, 0x04	; 4
    2b90:	92 e0       	ldi	r25, 0x02	; 2
	} else {
		Serial.print("ERROR COULD NOT SAVE SCORE. SCORE IS GREATER THEN 256");
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	0c 94 b5 08 	jmp	0x116a	; 0x116a <_ZN5Print5printEPKc>

00002b9a <_Z9game_overv>:
	}
}

// triggered failure state
void game_over() {
    2b9a:	8f 92       	push	r8
    2b9c:	af 92       	push	r10
    2b9e:	cf 92       	push	r12
    2ba0:	ef 92       	push	r14
    2ba2:	0f 93       	push	r16
	update_hightscore();
    2ba4:	8b df       	rcall	.-234    	; 0x2abc <_Z17update_hightscorev>
    2ba6:	81 2c       	mov	r8, r1
	blink_anim(led_matrix, 100, 2, 5, 0, 0, 0, 0, 0);
    2ba8:	a1 2c       	mov	r10, r1
    2baa:	c1 2c       	mov	r12, r1
    2bac:	e1 2c       	mov	r14, r1
    2bae:	00 e0       	ldi	r16, 0x00	; 0
    2bb0:	25 e0       	ldi	r18, 0x05	; 5
    2bb2:	42 e0       	ldi	r20, 0x02	; 2
    2bb4:	50 e0       	ldi	r21, 0x00	; 0
    2bb6:	64 e6       	ldi	r22, 0x64	; 100
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	83 e7       	ldi	r24, 0x73	; 115
    2bbc:	94 e0       	ldi	r25, 0x04	; 4
    2bbe:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <_Z10blink_animR9LEDMatrixiihhhhhh>
    2bc2:	0f 91       	pop	r16
	reset();
}
    2bc4:	ef 90       	pop	r14
    2bc6:	cf 90       	pop	r12
    2bc8:	af 90       	pop	r10
    2bca:	8f 90       	pop	r8
    2bcc:	5f cf       	rjmp	.-322    	; 0x2a8c <_Z5resetv>

00002bce <_Z10draw_snakev>:
		handle_input();
		delay(5);
	}
}

void draw_snake() {
    2bce:	cf 92       	push	r12
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	80 ee       	ldi	r24, 0xE0	; 224
    2bde:	c8 2e       	mov	r12, r24
    2be0:	82 e0       	ldi	r24, 0x02	; 2
    2be2:	d8 2e       	mov	r13, r24
	for (int i = 0; i < snake_length; i++) {
    2be4:	c0 e0       	ldi	r28, 0x00	; 0
    2be6:	d0 e0       	ldi	r29, 0x00	; 0
		position s = snake[i];
		// linear color interpolation over the body of the snake between 50 (tail) and 255 (head)
		uint8_t g = 205 * (snake_length - i - 1) / snake_length + 50;
    2be8:	1d ec       	ldi	r17, 0xCD	; 205
		delay(5);
	}
}

void draw_snake() {
	for (int i = 0; i < snake_length; i++) {
    2bea:	60 91 70 04 	lds	r22, 0x0470	; 0x800470 <snake_length>
    2bee:	70 91 71 04 	lds	r23, 0x0471	; 0x800471 <snake_length+0x1>
    2bf2:	c6 17       	cp	r28, r22
    2bf4:	d7 07       	cpc	r29, r23
    2bf6:	ec f4       	brge	.+58     	; 0x2c32 <_Z10draw_snakev+0x64>
		position s = snake[i];
		// linear color interpolation over the body of the snake between 50 (tail) and 255 (head)
		uint8_t g = 205 * (snake_length - i - 1) / snake_length + 50;
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	2c 1b       	sub	r18, r28
    2bfc:	3d 0b       	sbc	r19, r29
    2bfe:	21 50       	subi	r18, 0x01	; 1
    2c00:	31 09       	sbc	r19, r1
    2c02:	12 9f       	mul	r17, r18
    2c04:	c0 01       	movw	r24, r0
    2c06:	13 9f       	mul	r17, r19
    2c08:	90 0d       	add	r25, r0
    2c0a:	11 24       	eor	r1, r1
    2c0c:	cb d1       	rcall	.+918    	; 0x2fa4 <__divmodhi4>
    2c0e:	02 e3       	ldi	r16, 0x32	; 50
    2c10:	06 0f       	add	r16, r22
    2c12:	f6 01       	movw	r30, r12

		led_matrix.set_led(s.x, s.y, 0, g, 0);
    2c14:	42 81       	ldd	r20, Z+2	; 0x02
    2c16:	53 81       	ldd	r21, Z+3	; 0x03
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	e1 2c       	mov	r14, r1
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	83 e7       	ldi	r24, 0x73	; 115
    2c22:	94 e0       	ldi	r25, 0x04	; 4
    2c24:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN9LEDMatrix7set_ledEjjhhh>
    2c28:	21 96       	adiw	r28, 0x01	; 1
		delay(5);
	}
}

void draw_snake() {
	for (int i = 0; i < snake_length; i++) {
    2c2a:	f4 e0       	ldi	r31, 0x04	; 4
    2c2c:	cf 0e       	add	r12, r31
    2c2e:	d1 1c       	adc	r13, r1
    2c30:	dc cf       	rjmp	.-72     	; 0x2bea <_Z10draw_snakev+0x1c>
    2c32:	df 91       	pop	r29
		// linear color interpolation over the body of the snake between 50 (tail) and 255 (head)
		uint8_t g = 205 * (snake_length - i - 1) / snake_length + 50;

		led_matrix.set_led(s.x, s.y, 0, g, 0);
	}
}
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
    2c40:	08 95       	ret

00002c42 <_Z9draw_goalv>:

void draw_goal() {
    2c42:	ef 92       	push	r14
    2c44:	0f 93       	push	r16
	led_matrix.set_led(apple.x, apple.y, 255, 0, 0);
    2c46:	ec ed       	ldi	r30, 0xDC	; 220
    2c48:	f2 e0       	ldi	r31, 0x02	; 2
    2c4a:	42 81       	ldd	r20, Z+2	; 0x02
    2c4c:	53 81       	ldd	r21, Z+3	; 0x03
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	e1 2c       	mov	r14, r1
    2c54:	00 e0       	ldi	r16, 0x00	; 0
    2c56:	2f ef       	ldi	r18, 0xFF	; 255
    2c58:	83 e7       	ldi	r24, 0x73	; 115
    2c5a:	94 e0       	ldi	r25, 0x04	; 4
    2c5c:	0e 94 35 0c 	call	0x186a	; 0x186a <_ZN9LEDMatrix7set_ledEjjhhh>
}
    2c60:	0f 91       	pop	r16
    2c62:	ef 90       	pop	r14
    2c64:	08 95       	ret

00002c66 <_Z4drawv>:

void draw() {
	led_matrix.draw_background();
    2c66:	83 e7       	ldi	r24, 0x73	; 115
    2c68:	94 e0       	ldi	r25, 0x04	; 4
    2c6a:	19 d8       	rcall	.-4046   	; 0x1c9e <_ZN9LEDMatrix15draw_backgroundEv>
    2c6c:	b0 df       	rcall	.-160    	; 0x2bce <_Z10draw_snakev>

	draw_snake();
    2c6e:	e9 df       	rcall	.-46     	; 0x2c42 <_Z9draw_goalv>
    2c70:	83 e7       	ldi	r24, 0x73	; 115
	draw_goal();
    2c72:	94 e0       	ldi	r25, 0x04	; 4
    2c74:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <_ZN9LEDMatrix4flipEv>

00002c78 <_GLOBAL__sub_I_lcd>:

		draw();

	}
	my_delay(delay_ms);
}
    2c78:	cf 92       	push	r12
    2c7a:	ef 92       	push	r14
    2c7c:	0f 93       	push	r16
#define COLUMNS 10

// LiquidCrystal ==========================================
// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
LiquidCrystal lcd(2, 3, 4, 5, 6, 7);
    2c7e:	87 e0       	ldi	r24, 0x07	; 7
    2c80:	c8 2e       	mov	r12, r24
    2c82:	96 e0       	ldi	r25, 0x06	; 6
    2c84:	e9 2e       	mov	r14, r25
    2c86:	05 e0       	ldi	r16, 0x05	; 5
    2c88:	24 e0       	ldi	r18, 0x04	; 4
    2c8a:	43 e0       	ldi	r20, 0x03	; 3
    2c8c:	62 e0       	ldi	r22, 0x02	; 2
    2c8e:	81 e8       	ldi	r24, 0x81	; 129
    2c90:	94 e0       	ldi	r25, 0x04	; 4
    2c92:	54 de       	rcall	.-856    	; 0x293c <_ZN13LiquidCrystalC1Ehhhhhh>
    2c94:	83 e7       	ldi	r24, 0x73	; 115
enum Direction {
	up, down, left, right
};
Direction dir;

LEDMatrix led_matrix;
    2c96:	94 e0       	ldi	r25, 0x04	; 4
    2c98:	0f 91       	pop	r16

		draw();

	}
	my_delay(delay_ms);
}
    2c9a:	ef 90       	pop	r14
    2c9c:	cf 90       	pop	r12
    2c9e:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <_ZN9LEDMatrixC1Ev>

00002ca2 <_Z12handle_inputv>:
	update_hightscore();
	blink_anim(led_matrix, 100, 2, 5, 0, 0, 0, 0, 0);
	reset();
}

void handle_input() {
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
		if (char(c) == 'B') {
			dir = right;
		} else if (char(c) == 'X') {
			dir = left;
		} else if (char(c) == 'A') {
			dir = down;
    2cae:	c1 e0       	ldi	r28, 0x01	; 1
    2cb0:	d0 e0       	ldi	r29, 0x00	; 0
		char c = Serial.read();
		paused = false;
		if (char(c) == 'B') {
			dir = right;
		} else if (char(c) == 'X') {
			dir = left;
    2cb2:	02 e0       	ldi	r16, 0x02	; 2
    2cb4:	10 e0       	ldi	r17, 0x00	; 0
	// Serial input
	while (Serial.available()) {
		char c = Serial.read();
		paused = false;
		if (char(c) == 'B') {
			dir = right;
    2cb6:	83 e0       	ldi	r24, 0x03	; 3
    2cb8:	e8 2e       	mov	r14, r24
    2cba:	f1 2c       	mov	r15, r1
}

void handle_input() {
	// Serial input form python controller mapper this should be its own library
	// Serial input
	while (Serial.available()) {
    2cbc:	84 e0       	ldi	r24, 0x04	; 4
    2cbe:	92 e0       	ldi	r25, 0x02	; 2
    2cc0:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN14HardwareSerial9availableEv>
    2cc4:	89 2b       	or	r24, r25
    2cc6:	11 f1       	breq	.+68     	; 0x2d0c <_Z12handle_inputv+0x6a>
		char c = Serial.read();
    2cc8:	84 e0       	ldi	r24, 0x04	; 4
    2cca:	92 e0       	ldi	r25, 0x02	; 2
    2ccc:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN14HardwareSerial4readEv>
		paused = false;
    2cd0:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <paused>
		if (char(c) == 'B') {
    2cd4:	82 34       	cpi	r24, 0x42	; 66
    2cd6:	29 f4       	brne	.+10     	; 0x2ce2 <_Z12handle_inputv+0x40>
			dir = right;
    2cd8:	f0 92 80 04 	sts	0x0480, r15	; 0x800480 <dir+0x1>
    2cdc:	e0 92 7f 04 	sts	0x047F, r14	; 0x80047f <dir>
    2ce0:	ed cf       	rjmp	.-38     	; 0x2cbc <_Z12handle_inputv+0x1a>
		} else if (char(c) == 'X') {
    2ce2:	88 35       	cpi	r24, 0x58	; 88
    2ce4:	29 f4       	brne	.+10     	; 0x2cf0 <_Z12handle_inputv+0x4e>
			dir = left;
    2ce6:	10 93 80 04 	sts	0x0480, r17	; 0x800480 <dir+0x1>
    2cea:	00 93 7f 04 	sts	0x047F, r16	; 0x80047f <dir>
    2cee:	e6 cf       	rjmp	.-52     	; 0x2cbc <_Z12handle_inputv+0x1a>
		} else if (char(c) == 'A') {
    2cf0:	81 34       	cpi	r24, 0x41	; 65
    2cf2:	29 f4       	brne	.+10     	; 0x2cfe <_Z12handle_inputv+0x5c>
			dir = down;
    2cf4:	d0 93 80 04 	sts	0x0480, r29	; 0x800480 <dir+0x1>
    2cf8:	c0 93 7f 04 	sts	0x047F, r28	; 0x80047f <dir>
    2cfc:	df cf       	rjmp	.-66     	; 0x2cbc <_Z12handle_inputv+0x1a>
		} else if (char(c) == 'Y') {
    2cfe:	89 35       	cpi	r24, 0x59	; 89
    2d00:	e9 f6       	brne	.-70     	; 0x2cbc <_Z12handle_inputv+0x1a>
			dir = up;
    2d02:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <dir+0x1>
    2d06:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <dir>
    2d0a:	d8 cf       	rjmp	.-80     	; 0x2cbc <_Z12handle_inputv+0x1a>
		}
	}
}
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	ff 90       	pop	r15
    2d16:	ef 90       	pop	r14
    2d18:	08 95       	ret

00002d1a <_Z8my_delayj>:

// this delay function handles input while waiting
void my_delay(unsigned int ms) {
    2d1a:	cf 92       	push	r12
    2d1c:	df 92       	push	r13
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	7c 01       	movw	r14, r24
	unsigned long end_time = millis() + ms;
    2d24:	0e 94 4d 01 	call	0x29a	; 0x29a <millis>
    2d28:	9b 01       	movw	r18, r22
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	2e 0d       	add	r18, r14
    2d2e:	3f 1d       	adc	r19, r15
    2d30:	41 1d       	adc	r20, r1
    2d32:	51 1d       	adc	r21, r1
    2d34:	69 01       	movw	r12, r18
    2d36:	7a 01       	movw	r14, r20
	while (end_time > millis()) {
    2d38:	0e 94 4d 01 	call	0x29a	; 0x29a <millis>
    2d3c:	6c 15       	cp	r22, r12
    2d3e:	7d 05       	cpc	r23, r13
    2d40:	8e 05       	cpc	r24, r14
    2d42:	9f 05       	cpc	r25, r15
    2d44:	40 f4       	brcc	.+16     	; 0x2d56 <_Z8my_delayj+0x3c>
		handle_input();
    2d46:	ad df       	rcall	.-166    	; 0x2ca2 <_Z12handle_inputv>
    2d48:	65 e0       	ldi	r22, 0x05	; 5
		delay(5);
    2d4a:	70 e0       	ldi	r23, 0x00	; 0
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 c9 01 	call	0x392	; 0x392 <delay>
    2d54:	f1 cf       	rjmp	.-30     	; 0x2d38 <_Z8my_delayj+0x1e>
    2d56:	ff 90       	pop	r15
	}
}
    2d58:	ef 90       	pop	r14
    2d5a:	df 90       	pop	r13
    2d5c:	cf 90       	pop	r12
    2d5e:	08 95       	ret

00002d60 <loop>:
	reset();

	draw_score();
}

void loop() {
    2d60:	0f 93       	push	r16
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
	if (!paused) {
    2d68:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <paused>
    2d6c:	81 11       	cpse	r24, r1
    2d6e:	90 c0       	rjmp	.+288    	; 0x2e90 <loop+0x130>

		// move the snake
		position curr_pos = snake[0];
    2d70:	00 91 e0 02 	lds	r16, 0x02E0	; 0x8002e0 <snake>
    2d74:	10 91 e1 02 	lds	r17, 0x02E1	; 0x8002e1 <snake+0x1>
    2d78:	c0 91 e2 02 	lds	r28, 0x02E2	; 0x8002e2 <snake+0x2>
    2d7c:	d0 91 e3 02 	lds	r29, 0x02E3	; 0x8002e3 <snake+0x3>
		position new_pos;
		new_pos.x = curr_pos.x;
		new_pos.y = curr_pos.y;

		// the actual movement into the direction of dir
		switch (dir) {
    2d80:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <dir>
    2d84:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <dir+0x1>
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	69 f0       	breq	.+26     	; 0x2da8 <loop+0x48>
    2d8e:	24 f4       	brge	.+8      	; 0x2d98 <loop+0x38>
    2d90:	89 2b       	or	r24, r25
    2d92:	71 f4       	brne	.+28     	; 0x2db0 <loop+0x50>
		case up:
			new_pos.y -= 1;
    2d94:	21 97       	sbiw	r28, 0x01	; 1
			break;
    2d96:	0c c0       	rjmp	.+24     	; 0x2db0 <loop+0x50>
		position new_pos;
		new_pos.x = curr_pos.x;
		new_pos.y = curr_pos.y;

		// the actual movement into the direction of dir
		switch (dir) {
    2d98:	82 30       	cpi	r24, 0x02	; 2
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	39 f0       	breq	.+14     	; 0x2dac <loop+0x4c>
    2d9e:	03 97       	sbiw	r24, 0x03	; 3
    2da0:	39 f4       	brne	.+14     	; 0x2db0 <loop+0x50>
			break;
		case down:
			new_pos.y += 1;
			break;
		case right:
			new_pos.x += 1;
    2da2:	0f 5f       	subi	r16, 0xFF	; 255
    2da4:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
    2da6:	04 c0       	rjmp	.+8      	; 0x2db0 <loop+0x50>
		switch (dir) {
		case up:
			new_pos.y -= 1;
			break;
		case down:
			new_pos.y += 1;
    2da8:	21 96       	adiw	r28, 0x01	; 1
			break;
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <loop+0x50>
		case right:
			new_pos.x += 1;
			break;
		case left:
			new_pos.x -= 1;
    2dac:	01 50       	subi	r16, 0x01	; 1
    2dae:	11 09       	sbc	r17, r1
			break;
		}

		// ate the apple
		if (new_pos.x == apple.x and new_pos.y == apple.y) {
    2db0:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <apple>
    2db4:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <apple+0x1>
    2db8:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <snake_length>
    2dbc:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <snake_length+0x1>
    2dc0:	08 17       	cp	r16, r24
    2dc2:	19 07       	cpc	r17, r25
    2dc4:	39 f5       	brne	.+78     	; 0x2e14 <loop+0xb4>
    2dc6:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <apple+0x2>
    2dca:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <apple+0x3>
    2dce:	c8 17       	cp	r28, r24
    2dd0:	d9 07       	cpc	r29, r25
    2dd2:	01 f5       	brne	.+64     	; 0x2e14 <loop+0xb4>
			// elongate snake
			snake_length += 1;
    2dd4:	83 2f       	mov	r24, r19
    2dd6:	92 2f       	mov	r25, r18
    2dd8:	9c 01       	movw	r18, r24
    2dda:	2f 5f       	subi	r18, 0xFF	; 255
    2ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dde:	30 93 71 04 	sts	0x0471, r19	; 0x800471 <snake_length+0x1>
    2de2:	20 93 70 04 	sts	0x0470, r18	; 0x800470 <snake_length>
    2de6:	fc 01       	movw	r30, r24
    2de8:	ee 0f       	add	r30, r30
    2dea:	ff 1f       	adc	r31, r31
    2dec:	ee 0f       	add	r30, r30
    2dee:	ff 1f       	adc	r31, r31
    2df0:	e0 52       	subi	r30, 0x20	; 32
    2df2:	fd 4f       	sbci	r31, 0xFD	; 253
    2df4:	34 97       	sbiw	r30, 0x04	; 4
			for (int i = snake_length - 1; i >= 0; i--) {
    2df6:	97 fd       	sbrc	r25, 7
    2df8:	0a c0       	rjmp	.+20     	; 0x2e0e <loop+0xae>
				snake[i].x = snake[i - 1].x;
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	20 81       	ld	r18, Z
    2dfe:	31 81       	ldd	r19, Z+1	; 0x01
    2e00:	35 83       	std	Z+5, r19	; 0x05
    2e02:	24 83       	std	Z+4, r18	; 0x04
				snake[i].y = snake[i - 1].y;
    2e04:	22 81       	ldd	r18, Z+2	; 0x02
    2e06:	33 81       	ldd	r19, Z+3	; 0x03
    2e08:	37 83       	std	Z+7, r19	; 0x07
    2e0a:	26 83       	std	Z+6, r18	; 0x06
    2e0c:	f3 cf       	rjmp	.-26     	; 0x2df4 <loop+0x94>
			}
			new_apple();
    2e0e:	ba dd       	rcall	.-1164   	; 0x2984 <_Z9new_applev>
    2e10:	10 de       	rcall	.-992    	; 0x2a32 <_Z10draw_scorev>

			// displays score on lcd;
			draw_score();
    2e12:	17 c0       	rjmp	.+46     	; 0x2e42 <loop+0xe2>
    2e14:	83 2f       	mov	r24, r19
    2e16:	92 2f       	mov	r25, r18
    2e18:	fc 01       	movw	r30, r24
    2e1a:	ee 0f       	add	r30, r30
    2e1c:	ff 1f       	adc	r31, r31
    2e1e:	ee 0f       	add	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	e8 52       	subi	r30, 0x28	; 40
    2e24:	fd 4f       	sbci	r31, 0xFD	; 253
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	18 16       	cp	r1, r24
    2e2a:	19 06       	cpc	r1, r25
		} else {
			// move snake body except head back in array
			// copy from back to front so the new one is not overwritten to soon
			for (int i = snake_length - 1; i > 0; i--) {
    2e2c:	54 f4       	brge	.+20     	; 0x2e42 <loop+0xe2>
    2e2e:	20 81       	ld	r18, Z
    2e30:	31 81       	ldd	r19, Z+1	; 0x01
				snake[i].x = snake[i - 1].x;
    2e32:	35 83       	std	Z+5, r19	; 0x05
    2e34:	24 83       	std	Z+4, r18	; 0x04
    2e36:	22 81       	ldd	r18, Z+2	; 0x02
    2e38:	33 81       	ldd	r19, Z+3	; 0x03
				snake[i].y = snake[i - 1].y;
    2e3a:	37 83       	std	Z+7, r19	; 0x07
    2e3c:	26 83       	std	Z+6, r18	; 0x06
    2e3e:	34 97       	sbiw	r30, 0x04	; 4
    2e40:	f2 cf       	rjmp	.-28     	; 0x2e26 <loop+0xc6>
    2e42:	10 93 e1 02 	sts	0x02E1, r17	; 0x8002e1 <snake+0x1>
			}
		}

		snake[0].x = new_pos.x;
    2e46:	00 93 e0 02 	sts	0x02E0, r16	; 0x8002e0 <snake>
    2e4a:	d0 93 e3 02 	sts	0x02E3, r29	; 0x8002e3 <snake+0x3>
		snake[0].y = new_pos.y;
    2e4e:	c0 93 e2 02 	sts	0x02E2, r28	; 0x8002e2 <snake+0x2>
    2e52:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <snake_length>

		// check for self intersection
		bool intersection = false;
		// exclude the head
		for (int i = 1; i < snake_length; i++) {
    2e56:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <snake_length+0x1>
    2e5a:	e0 ee       	ldi	r30, 0xE0	; 224
    2e5c:	f2 e0       	ldi	r31, 0x02	; 2
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	82 17       	cp	r24, r18
    2e64:	93 07       	cpc	r25, r19
    2e66:	6c f4       	brge	.+26     	; 0x2e82 <loop+0x122>
    2e68:	44 81       	ldd	r20, Z+4	; 0x04
    2e6a:	55 81       	ldd	r21, Z+5	; 0x05
			if (snake[i].x == new_pos.x && snake[i].y == new_pos.y) {
    2e6c:	40 17       	cp	r20, r16
    2e6e:	51 07       	cpc	r21, r17
    2e70:	29 f4       	brne	.+10     	; 0x2e7c <loop+0x11c>
    2e72:	46 81       	ldd	r20, Z+6	; 0x06
    2e74:	57 81       	ldd	r21, Z+7	; 0x07
    2e76:	4c 17       	cp	r20, r28
    2e78:	5d 07       	cpc	r21, r29
    2e7a:	41 f0       	breq	.+16     	; 0x2e8c <loop+0x12c>
    2e7c:	01 96       	adiw	r24, 0x01	; 1
    2e7e:	34 96       	adiw	r30, 0x04	; 4
		snake[0].y = new_pos.y;

		// check for self intersection
		bool intersection = false;
		// exclude the head
		for (int i = 1; i < snake_length; i++) {
    2e80:	f0 cf       	rjmp	.-32     	; 0x2e62 <loop+0x102>
    2e82:	0a 30       	cpi	r16, 0x0A	; 10
    2e84:	11 05       	cpc	r17, r1
			}
		}
		// also check out of bounds
		if (intersection
				|| new_pos.x
						< 0|| new_pos.x >= COLUMNS || new_pos.y < 0 || new_pos.y >= ROWS) {
    2e86:	10 f4       	brcc	.+4      	; 0x2e8c <loop+0x12c>
    2e88:	2a 97       	sbiw	r28, 0x0a	; 10
    2e8a:	08 f0       	brcs	.+2      	; 0x2e8e <loop+0x12e>
    2e8c:	86 de       	rcall	.-756    	; 0x2b9a <_Z9game_overv>
    2e8e:	eb de       	rcall	.-554    	; 0x2c66 <_Z4drawv>
			game_over();
    2e90:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <delay_ms>
		}

		draw();
    2e94:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <delay_ms+0x1>

	}
	my_delay(delay_ms);
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
}
    2ea0:	3c cf       	rjmp	.-392    	; 0x2d1a <_Z8my_delayj>

00002ea2 <setup>:
	draw_snake();
	draw_goal();
	led_matrix.flip();
}

void setup() {
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	2c 97       	sbiw	r28, 0x0c	; 12
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
	// set up the LCD's number of columns and rows:
	lcd.begin(16, 2);
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	42 e0       	ldi	r20, 0x02	; 2
    2eba:	60 e1       	ldi	r22, 0x10	; 16
    2ebc:	81 e8       	ldi	r24, 0x81	; 129
    2ebe:	94 e0       	ldi	r25, 0x04	; 4
    2ec0:	a3 dc       	rcall	.-1722   	; 0x2808 <_ZN13LiquidCrystal5beginEhhh>
    2ec2:	26 e0       	ldi	r18, 0x06	; 6
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2ec4:	40 e0       	ldi	r20, 0x00	; 0
    2ec6:	52 ec       	ldi	r21, 0xC2	; 194
    2ec8:	61 e0       	ldi	r22, 0x01	; 1
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	84 e0       	ldi	r24, 0x04	; 4
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_ZN14HardwareSerial5beginEmh>
    2ed4:	21 e0       	ldi	r18, 0x01	; 1

	Serial.begin(115200);

	// create new led_matrix object and sets background to true
	// the port is defined in the led_matrix library
	led_matrix = LEDMatrix(COLUMNS, ROWS, true);
    2ed6:	4a e0       	ldi	r20, 0x0A	; 10
    2ed8:	50 e0       	ldi	r21, 0x00	; 0
    2eda:	6a e0       	ldi	r22, 0x0A	; 10
    2edc:	70 e0       	ldi	r23, 0x00	; 0
    2ede:	ce 01       	movw	r24, r28
    2ee0:	01 96       	adiw	r24, 0x01	; 1
    2ee2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN9LEDMatrixC1Ejjb>
    2ee6:	e3 e7       	ldi	r30, 0x73	; 115
#define SRC_LEDMATRIX_H_

#include <Arduino.h>
#include "FastLED.h"

class LEDMatrix {
    2ee8:	f4 e0       	ldi	r31, 0x04	; 4
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	9c 81       	ldd	r25, Y+4	; 0x04
    2eee:	93 83       	std	Z+3, r25	; 0x03
    2ef0:	82 83       	std	Z+2, r24	; 0x02
    2ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef6:	95 83       	std	Z+5, r25	; 0x05
    2ef8:	84 83       	std	Z+4, r24	; 0x04
    2efa:	8f 81       	ldd	r24, Y+7	; 0x07
    2efc:	98 85       	ldd	r25, Y+8	; 0x08
    2efe:	97 83       	std	Z+7, r25	; 0x07
    2f00:	86 83       	std	Z+6, r24	; 0x06
    2f02:	89 85       	ldd	r24, Y+9	; 0x09
    2f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f06:	91 87       	std	Z+9, r25	; 0x09
    2f08:	80 87       	std	Z+8, r24	; 0x08
    2f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f0e:	93 87       	std	Z+11, r25	; 0x0b
    2f10:	82 87       	std	Z+10, r24	; 0x0a
    2f12:	ce 01       	movw	r24, r28
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	0e 94 df 0b 	call	0x17be	; 0x17be <_ZN9LEDMatrixD1Ev>
    2f1a:	4a e0       	ldi	r20, 0x0A	; 10
	// creates logarithmic interpolation as background image
	led_matrix.log_background(1, 10);
    2f1c:	61 e0       	ldi	r22, 0x01	; 1
    2f1e:	83 e7       	ldi	r24, 0x73	; 115
    2f20:	94 e0       	ldi	r25, 0x04	; 4
    2f22:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN9LEDMatrix14log_backgroundEhh>
    2f26:	b2 dd       	rcall	.-1180   	; 0x2a8c <_Z5resetv>
	// init game
	reset();
    2f28:	84 dd       	rcall	.-1272   	; 0x2a32 <_Z10draw_scorev>
    2f2a:	2c 96       	adiw	r28, 0x0c	; 12

	draw_score();
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
}
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	08 95       	ret

00002f3c <_GLOBAL__sub_D_lcd>:
enum Direction {
	up, down, left, right
};
Direction dir;

LEDMatrix led_matrix;
    2f3c:	83 e7       	ldi	r24, 0x73	; 115
    2f3e:	94 e0       	ldi	r25, 0x04	; 4
    2f40:	0c 94 df 0b 	jmp	0x17be	; 0x17be <_ZN9LEDMatrixD1Ev>

00002f44 <abort>:
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	f8 94       	cli
    2f4a:	20 c5       	rjmp	.+2624   	; 0x398c <__do_global_dtors>

00002f4c <strlen>:
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	01 90       	ld	r0, Z+
    2f50:	00 20       	and	r0, r0
    2f52:	e9 f7       	brne	.-6      	; 0x2f4e <strlen+0x2>
    2f54:	80 95       	com	r24
    2f56:	90 95       	com	r25
    2f58:	8e 0f       	add	r24, r30
    2f5a:	9f 1f       	adc	r25, r31
    2f5c:	08 95       	ret

00002f5e <__mulsi3>:
    2f5e:	db 01       	movw	r26, r22
    2f60:	8f 93       	push	r24
    2f62:	9f 93       	push	r25
    2f64:	76 d0       	rcall	.+236    	; 0x3052 <__muluhisi3>
    2f66:	bf 91       	pop	r27
    2f68:	af 91       	pop	r26
    2f6a:	a2 9f       	mul	r26, r18
    2f6c:	80 0d       	add	r24, r0
    2f6e:	91 1d       	adc	r25, r1
    2f70:	a3 9f       	mul	r26, r19
    2f72:	90 0d       	add	r25, r0
    2f74:	b2 9f       	mul	r27, r18
    2f76:	90 0d       	add	r25, r0
    2f78:	11 24       	eor	r1, r1
    2f7a:	08 95       	ret

00002f7c <__udivmodhi4>:
    2f7c:	aa 1b       	sub	r26, r26
    2f7e:	bb 1b       	sub	r27, r27
    2f80:	51 e1       	ldi	r21, 0x11	; 17
    2f82:	07 c0       	rjmp	.+14     	; 0x2f92 <__udivmodhi4_ep>

00002f84 <__udivmodhi4_loop>:
    2f84:	aa 1f       	adc	r26, r26
    2f86:	bb 1f       	adc	r27, r27
    2f88:	a6 17       	cp	r26, r22
    2f8a:	b7 07       	cpc	r27, r23
    2f8c:	10 f0       	brcs	.+4      	; 0x2f92 <__udivmodhi4_ep>
    2f8e:	a6 1b       	sub	r26, r22
    2f90:	b7 0b       	sbc	r27, r23

00002f92 <__udivmodhi4_ep>:
    2f92:	88 1f       	adc	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	5a 95       	dec	r21
    2f98:	a9 f7       	brne	.-22     	; 0x2f84 <__udivmodhi4_loop>
    2f9a:	80 95       	com	r24
    2f9c:	90 95       	com	r25
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	08 95       	ret

00002fa4 <__divmodhi4>:
    2fa4:	97 fb       	bst	r25, 7
    2fa6:	07 2e       	mov	r0, r23
    2fa8:	16 f4       	brtc	.+4      	; 0x2fae <__divmodhi4+0xa>
    2faa:	00 94       	com	r0
    2fac:	06 d0       	rcall	.+12     	; 0x2fba <__divmodhi4_neg1>
    2fae:	77 fd       	sbrc	r23, 7
    2fb0:	08 d0       	rcall	.+16     	; 0x2fc2 <__divmodhi4_neg2>
    2fb2:	e4 df       	rcall	.-56     	; 0x2f7c <__udivmodhi4>
    2fb4:	07 fc       	sbrc	r0, 7
    2fb6:	05 d0       	rcall	.+10     	; 0x2fc2 <__divmodhi4_neg2>
    2fb8:	3e f4       	brtc	.+14     	; 0x2fc8 <__divmodhi4_exit>

00002fba <__divmodhi4_neg1>:
    2fba:	90 95       	com	r25
    2fbc:	81 95       	neg	r24
    2fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc0:	08 95       	ret

00002fc2 <__divmodhi4_neg2>:
    2fc2:	70 95       	com	r23
    2fc4:	61 95       	neg	r22
    2fc6:	7f 4f       	sbci	r23, 0xFF	; 255

00002fc8 <__divmodhi4_exit>:
    2fc8:	08 95       	ret

00002fca <__udivmodsi4>:
    2fca:	a1 e2       	ldi	r26, 0x21	; 33
    2fcc:	1a 2e       	mov	r1, r26
    2fce:	aa 1b       	sub	r26, r26
    2fd0:	bb 1b       	sub	r27, r27
    2fd2:	fd 01       	movw	r30, r26
    2fd4:	0d c0       	rjmp	.+26     	; 0x2ff0 <__udivmodsi4_ep>

00002fd6 <__udivmodsi4_loop>:
    2fd6:	aa 1f       	adc	r26, r26
    2fd8:	bb 1f       	adc	r27, r27
    2fda:	ee 1f       	adc	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	a2 17       	cp	r26, r18
    2fe0:	b3 07       	cpc	r27, r19
    2fe2:	e4 07       	cpc	r30, r20
    2fe4:	f5 07       	cpc	r31, r21
    2fe6:	20 f0       	brcs	.+8      	; 0x2ff0 <__udivmodsi4_ep>
    2fe8:	a2 1b       	sub	r26, r18
    2fea:	b3 0b       	sbc	r27, r19
    2fec:	e4 0b       	sbc	r30, r20
    2fee:	f5 0b       	sbc	r31, r21

00002ff0 <__udivmodsi4_ep>:
    2ff0:	66 1f       	adc	r22, r22
    2ff2:	77 1f       	adc	r23, r23
    2ff4:	88 1f       	adc	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	1a 94       	dec	r1
    2ffa:	69 f7       	brne	.-38     	; 0x2fd6 <__udivmodsi4_loop>
    2ffc:	60 95       	com	r22
    2ffe:	70 95       	com	r23
    3000:	80 95       	com	r24
    3002:	90 95       	com	r25
    3004:	9b 01       	movw	r18, r22
    3006:	ac 01       	movw	r20, r24
    3008:	bd 01       	movw	r22, r26
    300a:	cf 01       	movw	r24, r30
    300c:	08 95       	ret

0000300e <__divmodsi4>:
    300e:	05 2e       	mov	r0, r21
    3010:	97 fb       	bst	r25, 7
    3012:	16 f4       	brtc	.+4      	; 0x3018 <__divmodsi4+0xa>
    3014:	00 94       	com	r0
    3016:	0f d0       	rcall	.+30     	; 0x3036 <__negsi2>
    3018:	57 fd       	sbrc	r21, 7
    301a:	05 d0       	rcall	.+10     	; 0x3026 <__divmodsi4_neg2>
    301c:	d6 df       	rcall	.-84     	; 0x2fca <__udivmodsi4>
    301e:	07 fc       	sbrc	r0, 7
    3020:	02 d0       	rcall	.+4      	; 0x3026 <__divmodsi4_neg2>
    3022:	46 f4       	brtc	.+16     	; 0x3034 <__divmodsi4_exit>
    3024:	08 c0       	rjmp	.+16     	; 0x3036 <__negsi2>

00003026 <__divmodsi4_neg2>:
    3026:	50 95       	com	r21
    3028:	40 95       	com	r20
    302a:	30 95       	com	r19
    302c:	21 95       	neg	r18
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	4f 4f       	sbci	r20, 0xFF	; 255
    3032:	5f 4f       	sbci	r21, 0xFF	; 255

00003034 <__divmodsi4_exit>:
    3034:	08 95       	ret

00003036 <__negsi2>:
    3036:	90 95       	com	r25
    3038:	80 95       	com	r24
    303a:	70 95       	com	r23
    303c:	61 95       	neg	r22
    303e:	7f 4f       	sbci	r23, 0xFF	; 255
    3040:	8f 4f       	sbci	r24, 0xFF	; 255
    3042:	9f 4f       	sbci	r25, 0xFF	; 255
    3044:	08 95       	ret

00003046 <__usmulhisi3>:
    3046:	15 d0       	rcall	.+42     	; 0x3072 <__umulhisi3>

00003048 <__usmulhisi3_tail>:
    3048:	b7 ff       	sbrs	r27, 7
    304a:	08 95       	ret
    304c:	82 1b       	sub	r24, r18
    304e:	93 0b       	sbc	r25, r19
    3050:	08 95       	ret

00003052 <__muluhisi3>:
    3052:	0f d0       	rcall	.+30     	; 0x3072 <__umulhisi3>
    3054:	a5 9f       	mul	r26, r21
    3056:	90 0d       	add	r25, r0
    3058:	b4 9f       	mul	r27, r20
    305a:	90 0d       	add	r25, r0
    305c:	a4 9f       	mul	r26, r20
    305e:	80 0d       	add	r24, r0
    3060:	91 1d       	adc	r25, r1
    3062:	11 24       	eor	r1, r1
    3064:	08 95       	ret

00003066 <__tablejump2__>:
    3066:	ee 0f       	add	r30, r30
    3068:	ff 1f       	adc	r31, r31
    306a:	05 90       	lpm	r0, Z+
    306c:	f4 91       	lpm	r31, Z
    306e:	e0 2d       	mov	r30, r0
    3070:	09 94       	ijmp

00003072 <__umulhisi3>:
    3072:	a2 9f       	mul	r26, r18
    3074:	b0 01       	movw	r22, r0
    3076:	b3 9f       	mul	r27, r19
    3078:	c0 01       	movw	r24, r0
    307a:	a3 9f       	mul	r26, r19
    307c:	70 0d       	add	r23, r0
    307e:	81 1d       	adc	r24, r1
    3080:	11 24       	eor	r1, r1
    3082:	91 1d       	adc	r25, r1
    3084:	b2 9f       	mul	r27, r18
    3086:	70 0d       	add	r23, r0
    3088:	81 1d       	adc	r24, r1
    308a:	11 24       	eor	r1, r1
    308c:	91 1d       	adc	r25, r1
    308e:	08 95       	ret

00003090 <__subsf3>:
    3090:	50 58       	subi	r21, 0x80	; 128

00003092 <__addsf3>:
    3092:	bb 27       	eor	r27, r27
    3094:	aa 27       	eor	r26, r26
    3096:	0e d0       	rcall	.+28     	; 0x30b4 <__addsf3x>
    3098:	9e c1       	rjmp	.+828    	; 0x33d6 <__fp_round>
    309a:	8f d1       	rcall	.+798    	; 0x33ba <__fp_pscA>
    309c:	30 f0       	brcs	.+12     	; 0x30aa <__addsf3+0x18>
    309e:	94 d1       	rcall	.+808    	; 0x33c8 <__fp_pscB>
    30a0:	20 f0       	brcs	.+8      	; 0x30aa <__addsf3+0x18>
    30a2:	31 f4       	brne	.+12     	; 0x30b0 <__addsf3+0x1e>
    30a4:	9f 3f       	cpi	r25, 0xFF	; 255
    30a6:	11 f4       	brne	.+4      	; 0x30ac <__addsf3+0x1a>
    30a8:	1e f4       	brtc	.+6      	; 0x30b0 <__addsf3+0x1e>
    30aa:	5f c1       	rjmp	.+702    	; 0x336a <__fp_nan>
    30ac:	0e f4       	brtc	.+2      	; 0x30b0 <__addsf3+0x1e>
    30ae:	e0 95       	com	r30
    30b0:	e7 fb       	bst	r30, 7
    30b2:	55 c1       	rjmp	.+682    	; 0x335e <__fp_inf>

000030b4 <__addsf3x>:
    30b4:	e9 2f       	mov	r30, r25
    30b6:	a0 d1       	rcall	.+832    	; 0x33f8 <__fp_split3>
    30b8:	80 f3       	brcs	.-32     	; 0x309a <__addsf3+0x8>
    30ba:	ba 17       	cp	r27, r26
    30bc:	62 07       	cpc	r22, r18
    30be:	73 07       	cpc	r23, r19
    30c0:	84 07       	cpc	r24, r20
    30c2:	95 07       	cpc	r25, r21
    30c4:	18 f0       	brcs	.+6      	; 0x30cc <__addsf3x+0x18>
    30c6:	71 f4       	brne	.+28     	; 0x30e4 <__addsf3x+0x30>
    30c8:	9e f5       	brtc	.+102    	; 0x3130 <__addsf3x+0x7c>
    30ca:	b8 c1       	rjmp	.+880    	; 0x343c <__fp_zero>
    30cc:	0e f4       	brtc	.+2      	; 0x30d0 <__addsf3x+0x1c>
    30ce:	e0 95       	com	r30
    30d0:	0b 2e       	mov	r0, r27
    30d2:	ba 2f       	mov	r27, r26
    30d4:	a0 2d       	mov	r26, r0
    30d6:	0b 01       	movw	r0, r22
    30d8:	b9 01       	movw	r22, r18
    30da:	90 01       	movw	r18, r0
    30dc:	0c 01       	movw	r0, r24
    30de:	ca 01       	movw	r24, r20
    30e0:	a0 01       	movw	r20, r0
    30e2:	11 24       	eor	r1, r1
    30e4:	ff 27       	eor	r31, r31
    30e6:	59 1b       	sub	r21, r25
    30e8:	99 f0       	breq	.+38     	; 0x3110 <__addsf3x+0x5c>
    30ea:	59 3f       	cpi	r21, 0xF9	; 249
    30ec:	50 f4       	brcc	.+20     	; 0x3102 <__addsf3x+0x4e>
    30ee:	50 3e       	cpi	r21, 0xE0	; 224
    30f0:	68 f1       	brcs	.+90     	; 0x314c <__addsf3x+0x98>
    30f2:	1a 16       	cp	r1, r26
    30f4:	f0 40       	sbci	r31, 0x00	; 0
    30f6:	a2 2f       	mov	r26, r18
    30f8:	23 2f       	mov	r18, r19
    30fa:	34 2f       	mov	r19, r20
    30fc:	44 27       	eor	r20, r20
    30fe:	58 5f       	subi	r21, 0xF8	; 248
    3100:	f3 cf       	rjmp	.-26     	; 0x30e8 <__addsf3x+0x34>
    3102:	46 95       	lsr	r20
    3104:	37 95       	ror	r19
    3106:	27 95       	ror	r18
    3108:	a7 95       	ror	r26
    310a:	f0 40       	sbci	r31, 0x00	; 0
    310c:	53 95       	inc	r21
    310e:	c9 f7       	brne	.-14     	; 0x3102 <__addsf3x+0x4e>
    3110:	7e f4       	brtc	.+30     	; 0x3130 <__addsf3x+0x7c>
    3112:	1f 16       	cp	r1, r31
    3114:	ba 0b       	sbc	r27, r26
    3116:	62 0b       	sbc	r22, r18
    3118:	73 0b       	sbc	r23, r19
    311a:	84 0b       	sbc	r24, r20
    311c:	ba f0       	brmi	.+46     	; 0x314c <__addsf3x+0x98>
    311e:	91 50       	subi	r25, 0x01	; 1
    3120:	a1 f0       	breq	.+40     	; 0x314a <__addsf3x+0x96>
    3122:	ff 0f       	add	r31, r31
    3124:	bb 1f       	adc	r27, r27
    3126:	66 1f       	adc	r22, r22
    3128:	77 1f       	adc	r23, r23
    312a:	88 1f       	adc	r24, r24
    312c:	c2 f7       	brpl	.-16     	; 0x311e <__addsf3x+0x6a>
    312e:	0e c0       	rjmp	.+28     	; 0x314c <__addsf3x+0x98>
    3130:	ba 0f       	add	r27, r26
    3132:	62 1f       	adc	r22, r18
    3134:	73 1f       	adc	r23, r19
    3136:	84 1f       	adc	r24, r20
    3138:	48 f4       	brcc	.+18     	; 0x314c <__addsf3x+0x98>
    313a:	87 95       	ror	r24
    313c:	77 95       	ror	r23
    313e:	67 95       	ror	r22
    3140:	b7 95       	ror	r27
    3142:	f7 95       	ror	r31
    3144:	9e 3f       	cpi	r25, 0xFE	; 254
    3146:	08 f0       	brcs	.+2      	; 0x314a <__addsf3x+0x96>
    3148:	b3 cf       	rjmp	.-154    	; 0x30b0 <__addsf3+0x1e>
    314a:	93 95       	inc	r25
    314c:	88 0f       	add	r24, r24
    314e:	08 f0       	brcs	.+2      	; 0x3152 <__addsf3x+0x9e>
    3150:	99 27       	eor	r25, r25
    3152:	ee 0f       	add	r30, r30
    3154:	97 95       	ror	r25
    3156:	87 95       	ror	r24
    3158:	08 95       	ret

0000315a <__divsf3>:
    315a:	0c d0       	rcall	.+24     	; 0x3174 <__divsf3x>
    315c:	3c c1       	rjmp	.+632    	; 0x33d6 <__fp_round>
    315e:	34 d1       	rcall	.+616    	; 0x33c8 <__fp_pscB>
    3160:	40 f0       	brcs	.+16     	; 0x3172 <__divsf3+0x18>
    3162:	2b d1       	rcall	.+598    	; 0x33ba <__fp_pscA>
    3164:	30 f0       	brcs	.+12     	; 0x3172 <__divsf3+0x18>
    3166:	21 f4       	brne	.+8      	; 0x3170 <__divsf3+0x16>
    3168:	5f 3f       	cpi	r21, 0xFF	; 255
    316a:	19 f0       	breq	.+6      	; 0x3172 <__divsf3+0x18>
    316c:	f8 c0       	rjmp	.+496    	; 0x335e <__fp_inf>
    316e:	51 11       	cpse	r21, r1
    3170:	66 c1       	rjmp	.+716    	; 0x343e <__fp_szero>
    3172:	fb c0       	rjmp	.+502    	; 0x336a <__fp_nan>

00003174 <__divsf3x>:
    3174:	41 d1       	rcall	.+642    	; 0x33f8 <__fp_split3>
    3176:	98 f3       	brcs	.-26     	; 0x315e <__divsf3+0x4>

00003178 <__divsf3_pse>:
    3178:	99 23       	and	r25, r25
    317a:	c9 f3       	breq	.-14     	; 0x316e <__divsf3+0x14>
    317c:	55 23       	and	r21, r21
    317e:	b1 f3       	breq	.-20     	; 0x316c <__divsf3+0x12>
    3180:	95 1b       	sub	r25, r21
    3182:	55 0b       	sbc	r21, r21
    3184:	bb 27       	eor	r27, r27
    3186:	aa 27       	eor	r26, r26
    3188:	62 17       	cp	r22, r18
    318a:	73 07       	cpc	r23, r19
    318c:	84 07       	cpc	r24, r20
    318e:	38 f0       	brcs	.+14     	; 0x319e <__divsf3_pse+0x26>
    3190:	9f 5f       	subi	r25, 0xFF	; 255
    3192:	5f 4f       	sbci	r21, 0xFF	; 255
    3194:	22 0f       	add	r18, r18
    3196:	33 1f       	adc	r19, r19
    3198:	44 1f       	adc	r20, r20
    319a:	aa 1f       	adc	r26, r26
    319c:	a9 f3       	breq	.-22     	; 0x3188 <__divsf3_pse+0x10>
    319e:	33 d0       	rcall	.+102    	; 0x3206 <__divsf3_pse+0x8e>
    31a0:	0e 2e       	mov	r0, r30
    31a2:	3a f0       	brmi	.+14     	; 0x31b2 <__divsf3_pse+0x3a>
    31a4:	e0 e8       	ldi	r30, 0x80	; 128
    31a6:	30 d0       	rcall	.+96     	; 0x3208 <__divsf3_pse+0x90>
    31a8:	91 50       	subi	r25, 0x01	; 1
    31aa:	50 40       	sbci	r21, 0x00	; 0
    31ac:	e6 95       	lsr	r30
    31ae:	00 1c       	adc	r0, r0
    31b0:	ca f7       	brpl	.-14     	; 0x31a4 <__divsf3_pse+0x2c>
    31b2:	29 d0       	rcall	.+82     	; 0x3206 <__divsf3_pse+0x8e>
    31b4:	fe 2f       	mov	r31, r30
    31b6:	27 d0       	rcall	.+78     	; 0x3206 <__divsf3_pse+0x8e>
    31b8:	66 0f       	add	r22, r22
    31ba:	77 1f       	adc	r23, r23
    31bc:	88 1f       	adc	r24, r24
    31be:	bb 1f       	adc	r27, r27
    31c0:	26 17       	cp	r18, r22
    31c2:	37 07       	cpc	r19, r23
    31c4:	48 07       	cpc	r20, r24
    31c6:	ab 07       	cpc	r26, r27
    31c8:	b0 e8       	ldi	r27, 0x80	; 128
    31ca:	09 f0       	breq	.+2      	; 0x31ce <__divsf3_pse+0x56>
    31cc:	bb 0b       	sbc	r27, r27
    31ce:	80 2d       	mov	r24, r0
    31d0:	bf 01       	movw	r22, r30
    31d2:	ff 27       	eor	r31, r31
    31d4:	93 58       	subi	r25, 0x83	; 131
    31d6:	5f 4f       	sbci	r21, 0xFF	; 255
    31d8:	2a f0       	brmi	.+10     	; 0x31e4 <__divsf3_pse+0x6c>
    31da:	9e 3f       	cpi	r25, 0xFE	; 254
    31dc:	51 05       	cpc	r21, r1
    31de:	68 f0       	brcs	.+26     	; 0x31fa <__divsf3_pse+0x82>
    31e0:	be c0       	rjmp	.+380    	; 0x335e <__fp_inf>
    31e2:	2d c1       	rjmp	.+602    	; 0x343e <__fp_szero>
    31e4:	5f 3f       	cpi	r21, 0xFF	; 255
    31e6:	ec f3       	brlt	.-6      	; 0x31e2 <__divsf3_pse+0x6a>
    31e8:	98 3e       	cpi	r25, 0xE8	; 232
    31ea:	dc f3       	brlt	.-10     	; 0x31e2 <__divsf3_pse+0x6a>
    31ec:	86 95       	lsr	r24
    31ee:	77 95       	ror	r23
    31f0:	67 95       	ror	r22
    31f2:	b7 95       	ror	r27
    31f4:	f7 95       	ror	r31
    31f6:	9f 5f       	subi	r25, 0xFF	; 255
    31f8:	c9 f7       	brne	.-14     	; 0x31ec <__divsf3_pse+0x74>
    31fa:	88 0f       	add	r24, r24
    31fc:	91 1d       	adc	r25, r1
    31fe:	96 95       	lsr	r25
    3200:	87 95       	ror	r24
    3202:	97 f9       	bld	r25, 7
    3204:	08 95       	ret
    3206:	e1 e0       	ldi	r30, 0x01	; 1
    3208:	66 0f       	add	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	88 1f       	adc	r24, r24
    320e:	bb 1f       	adc	r27, r27
    3210:	62 17       	cp	r22, r18
    3212:	73 07       	cpc	r23, r19
    3214:	84 07       	cpc	r24, r20
    3216:	ba 07       	cpc	r27, r26
    3218:	20 f0       	brcs	.+8      	; 0x3222 <__divsf3_pse+0xaa>
    321a:	62 1b       	sub	r22, r18
    321c:	73 0b       	sbc	r23, r19
    321e:	84 0b       	sbc	r24, r20
    3220:	ba 0b       	sbc	r27, r26
    3222:	ee 1f       	adc	r30, r30
    3224:	88 f7       	brcc	.-30     	; 0x3208 <__divsf3_pse+0x90>
    3226:	e0 95       	com	r30
    3228:	08 95       	ret
    322a:	19 f4       	brne	.+6      	; 0x3232 <__divsf3_pse+0xba>
    322c:	0e f0       	brts	.+2      	; 0x3230 <__divsf3_pse+0xb8>
    322e:	97 c0       	rjmp	.+302    	; 0x335e <__fp_inf>
    3230:	05 c1       	rjmp	.+522    	; 0x343c <__fp_zero>
    3232:	9b c0       	rjmp	.+310    	; 0x336a <__fp_nan>

00003234 <exp>:
    3234:	e9 d0       	rcall	.+466    	; 0x3408 <__fp_splitA>
    3236:	c8 f3       	brcs	.-14     	; 0x322a <__divsf3_pse+0xb2>
    3238:	96 38       	cpi	r25, 0x86	; 134
    323a:	c0 f7       	brcc	.-16     	; 0x322c <__divsf3_pse+0xb4>
    323c:	07 f8       	bld	r0, 7
    323e:	0f 92       	push	r0
    3240:	e8 94       	clt
    3242:	2b e3       	ldi	r18, 0x3B	; 59
    3244:	3a ea       	ldi	r19, 0xAA	; 170
    3246:	48 eb       	ldi	r20, 0xB8	; 184
    3248:	5f e7       	ldi	r21, 0x7F	; 127
    324a:	c6 d1       	rcall	.+908    	; 0x35d8 <__mulsf3_pse>
    324c:	0f 92       	push	r0
    324e:	0f 92       	push	r0
    3250:	0f 92       	push	r0
    3252:	4d b7       	in	r20, 0x3d	; 61
    3254:	5e b7       	in	r21, 0x3e	; 62
    3256:	0f 92       	push	r0
    3258:	7e d1       	rcall	.+764    	; 0x3556 <modf>
    325a:	e8 e6       	ldi	r30, 0x68	; 104
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	88 d0       	rcall	.+272    	; 0x3370 <__fp_powser>
    3260:	4f 91       	pop	r20
    3262:	5f 91       	pop	r21
    3264:	ef 91       	pop	r30
    3266:	ff 91       	pop	r31
    3268:	e5 95       	asr	r30
    326a:	ee 1f       	adc	r30, r30
    326c:	ff 1f       	adc	r31, r31
    326e:	49 f0       	breq	.+18     	; 0x3282 <exp+0x4e>
    3270:	fe 57       	subi	r31, 0x7E	; 126
    3272:	e0 68       	ori	r30, 0x80	; 128
    3274:	44 27       	eor	r20, r20
    3276:	ee 0f       	add	r30, r30
    3278:	44 1f       	adc	r20, r20
    327a:	fa 95       	dec	r31
    327c:	e1 f7       	brne	.-8      	; 0x3276 <exp+0x42>
    327e:	41 95       	neg	r20
    3280:	55 0b       	sbc	r21, r21
    3282:	f0 d0       	rcall	.+480    	; 0x3464 <ldexp>
    3284:	0f 90       	pop	r0
    3286:	07 fe       	sbrs	r0, 7
    3288:	e4 c0       	rjmp	.+456    	; 0x3452 <inverse>
    328a:	08 95       	ret

0000328c <__fixunssfsi>:
    328c:	bd d0       	rcall	.+378    	; 0x3408 <__fp_splitA>
    328e:	88 f0       	brcs	.+34     	; 0x32b2 <__fixunssfsi+0x26>
    3290:	9f 57       	subi	r25, 0x7F	; 127
    3292:	90 f0       	brcs	.+36     	; 0x32b8 <__fixunssfsi+0x2c>
    3294:	b9 2f       	mov	r27, r25
    3296:	99 27       	eor	r25, r25
    3298:	b7 51       	subi	r27, 0x17	; 23
    329a:	a0 f0       	brcs	.+40     	; 0x32c4 <__fixunssfsi+0x38>
    329c:	d1 f0       	breq	.+52     	; 0x32d2 <__fixunssfsi+0x46>
    329e:	66 0f       	add	r22, r22
    32a0:	77 1f       	adc	r23, r23
    32a2:	88 1f       	adc	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	1a f0       	brmi	.+6      	; 0x32ae <__fixunssfsi+0x22>
    32a8:	ba 95       	dec	r27
    32aa:	c9 f7       	brne	.-14     	; 0x329e <__fixunssfsi+0x12>
    32ac:	12 c0       	rjmp	.+36     	; 0x32d2 <__fixunssfsi+0x46>
    32ae:	b1 30       	cpi	r27, 0x01	; 1
    32b0:	81 f0       	breq	.+32     	; 0x32d2 <__fixunssfsi+0x46>
    32b2:	c4 d0       	rcall	.+392    	; 0x343c <__fp_zero>
    32b4:	b1 e0       	ldi	r27, 0x01	; 1
    32b6:	08 95       	ret
    32b8:	c1 c0       	rjmp	.+386    	; 0x343c <__fp_zero>
    32ba:	67 2f       	mov	r22, r23
    32bc:	78 2f       	mov	r23, r24
    32be:	88 27       	eor	r24, r24
    32c0:	b8 5f       	subi	r27, 0xF8	; 248
    32c2:	39 f0       	breq	.+14     	; 0x32d2 <__fixunssfsi+0x46>
    32c4:	b9 3f       	cpi	r27, 0xF9	; 249
    32c6:	cc f3       	brlt	.-14     	; 0x32ba <__fixunssfsi+0x2e>
    32c8:	86 95       	lsr	r24
    32ca:	77 95       	ror	r23
    32cc:	67 95       	ror	r22
    32ce:	b3 95       	inc	r27
    32d0:	d9 f7       	brne	.-10     	; 0x32c8 <__fixunssfsi+0x3c>
    32d2:	3e f4       	brtc	.+14     	; 0x32e2 <__fixunssfsi+0x56>
    32d4:	90 95       	com	r25
    32d6:	80 95       	com	r24
    32d8:	70 95       	com	r23
    32da:	61 95       	neg	r22
    32dc:	7f 4f       	sbci	r23, 0xFF	; 255
    32de:	8f 4f       	sbci	r24, 0xFF	; 255
    32e0:	9f 4f       	sbci	r25, 0xFF	; 255
    32e2:	08 95       	ret

000032e4 <__floatunsisf>:
    32e4:	e8 94       	clt
    32e6:	09 c0       	rjmp	.+18     	; 0x32fa <__floatsisf+0x12>

000032e8 <__floatsisf>:
    32e8:	97 fb       	bst	r25, 7
    32ea:	3e f4       	brtc	.+14     	; 0x32fa <__floatsisf+0x12>
    32ec:	90 95       	com	r25
    32ee:	80 95       	com	r24
    32f0:	70 95       	com	r23
    32f2:	61 95       	neg	r22
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255
    32f6:	8f 4f       	sbci	r24, 0xFF	; 255
    32f8:	9f 4f       	sbci	r25, 0xFF	; 255
    32fa:	99 23       	and	r25, r25
    32fc:	a9 f0       	breq	.+42     	; 0x3328 <__floatsisf+0x40>
    32fe:	f9 2f       	mov	r31, r25
    3300:	96 e9       	ldi	r25, 0x96	; 150
    3302:	bb 27       	eor	r27, r27
    3304:	93 95       	inc	r25
    3306:	f6 95       	lsr	r31
    3308:	87 95       	ror	r24
    330a:	77 95       	ror	r23
    330c:	67 95       	ror	r22
    330e:	b7 95       	ror	r27
    3310:	f1 11       	cpse	r31, r1
    3312:	f8 cf       	rjmp	.-16     	; 0x3304 <__floatsisf+0x1c>
    3314:	fa f4       	brpl	.+62     	; 0x3354 <__floatsisf+0x6c>
    3316:	bb 0f       	add	r27, r27
    3318:	11 f4       	brne	.+4      	; 0x331e <__floatsisf+0x36>
    331a:	60 ff       	sbrs	r22, 0
    331c:	1b c0       	rjmp	.+54     	; 0x3354 <__floatsisf+0x6c>
    331e:	6f 5f       	subi	r22, 0xFF	; 255
    3320:	7f 4f       	sbci	r23, 0xFF	; 255
    3322:	8f 4f       	sbci	r24, 0xFF	; 255
    3324:	9f 4f       	sbci	r25, 0xFF	; 255
    3326:	16 c0       	rjmp	.+44     	; 0x3354 <__floatsisf+0x6c>
    3328:	88 23       	and	r24, r24
    332a:	11 f0       	breq	.+4      	; 0x3330 <__floatsisf+0x48>
    332c:	96 e9       	ldi	r25, 0x96	; 150
    332e:	11 c0       	rjmp	.+34     	; 0x3352 <__floatsisf+0x6a>
    3330:	77 23       	and	r23, r23
    3332:	21 f0       	breq	.+8      	; 0x333c <__floatsisf+0x54>
    3334:	9e e8       	ldi	r25, 0x8E	; 142
    3336:	87 2f       	mov	r24, r23
    3338:	76 2f       	mov	r23, r22
    333a:	05 c0       	rjmp	.+10     	; 0x3346 <__floatsisf+0x5e>
    333c:	66 23       	and	r22, r22
    333e:	71 f0       	breq	.+28     	; 0x335c <__floatsisf+0x74>
    3340:	96 e8       	ldi	r25, 0x86	; 134
    3342:	86 2f       	mov	r24, r22
    3344:	70 e0       	ldi	r23, 0x00	; 0
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	2a f0       	brmi	.+10     	; 0x3354 <__floatsisf+0x6c>
    334a:	9a 95       	dec	r25
    334c:	66 0f       	add	r22, r22
    334e:	77 1f       	adc	r23, r23
    3350:	88 1f       	adc	r24, r24
    3352:	da f7       	brpl	.-10     	; 0x334a <__floatsisf+0x62>
    3354:	88 0f       	add	r24, r24
    3356:	96 95       	lsr	r25
    3358:	87 95       	ror	r24
    335a:	97 f9       	bld	r25, 7
    335c:	08 95       	ret

0000335e <__fp_inf>:
    335e:	97 f9       	bld	r25, 7
    3360:	9f 67       	ori	r25, 0x7F	; 127
    3362:	80 e8       	ldi	r24, 0x80	; 128
    3364:	70 e0       	ldi	r23, 0x00	; 0
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	08 95       	ret

0000336a <__fp_nan>:
    336a:	9f ef       	ldi	r25, 0xFF	; 255
    336c:	80 ec       	ldi	r24, 0xC0	; 192
    336e:	08 95       	ret

00003370 <__fp_powser>:
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	1f 93       	push	r17
    3376:	0f 93       	push	r16
    3378:	ff 92       	push	r15
    337a:	ef 92       	push	r14
    337c:	df 92       	push	r13
    337e:	7b 01       	movw	r14, r22
    3380:	8c 01       	movw	r16, r24
    3382:	68 94       	set
    3384:	05 c0       	rjmp	.+10     	; 0x3390 <__fp_powser+0x20>
    3386:	da 2e       	mov	r13, r26
    3388:	ef 01       	movw	r28, r30
    338a:	24 d1       	rcall	.+584    	; 0x35d4 <__mulsf3x>
    338c:	fe 01       	movw	r30, r28
    338e:	e8 94       	clt
    3390:	a5 91       	lpm	r26, Z+
    3392:	25 91       	lpm	r18, Z+
    3394:	35 91       	lpm	r19, Z+
    3396:	45 91       	lpm	r20, Z+
    3398:	55 91       	lpm	r21, Z+
    339a:	ae f3       	brts	.-22     	; 0x3386 <__fp_powser+0x16>
    339c:	ef 01       	movw	r28, r30
    339e:	8a de       	rcall	.-748    	; 0x30b4 <__addsf3x>
    33a0:	fe 01       	movw	r30, r28
    33a2:	97 01       	movw	r18, r14
    33a4:	a8 01       	movw	r20, r16
    33a6:	da 94       	dec	r13
    33a8:	79 f7       	brne	.-34     	; 0x3388 <__fp_powser+0x18>
    33aa:	df 90       	pop	r13
    33ac:	ef 90       	pop	r14
    33ae:	ff 90       	pop	r15
    33b0:	0f 91       	pop	r16
    33b2:	1f 91       	pop	r17
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <__fp_pscA>:
    33ba:	00 24       	eor	r0, r0
    33bc:	0a 94       	dec	r0
    33be:	16 16       	cp	r1, r22
    33c0:	17 06       	cpc	r1, r23
    33c2:	18 06       	cpc	r1, r24
    33c4:	09 06       	cpc	r0, r25
    33c6:	08 95       	ret

000033c8 <__fp_pscB>:
    33c8:	00 24       	eor	r0, r0
    33ca:	0a 94       	dec	r0
    33cc:	12 16       	cp	r1, r18
    33ce:	13 06       	cpc	r1, r19
    33d0:	14 06       	cpc	r1, r20
    33d2:	05 06       	cpc	r0, r21
    33d4:	08 95       	ret

000033d6 <__fp_round>:
    33d6:	09 2e       	mov	r0, r25
    33d8:	03 94       	inc	r0
    33da:	00 0c       	add	r0, r0
    33dc:	11 f4       	brne	.+4      	; 0x33e2 <__fp_round+0xc>
    33de:	88 23       	and	r24, r24
    33e0:	52 f0       	brmi	.+20     	; 0x33f6 <__fp_round+0x20>
    33e2:	bb 0f       	add	r27, r27
    33e4:	40 f4       	brcc	.+16     	; 0x33f6 <__fp_round+0x20>
    33e6:	bf 2b       	or	r27, r31
    33e8:	11 f4       	brne	.+4      	; 0x33ee <__fp_round+0x18>
    33ea:	60 ff       	sbrs	r22, 0
    33ec:	04 c0       	rjmp	.+8      	; 0x33f6 <__fp_round+0x20>
    33ee:	6f 5f       	subi	r22, 0xFF	; 255
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	8f 4f       	sbci	r24, 0xFF	; 255
    33f4:	9f 4f       	sbci	r25, 0xFF	; 255
    33f6:	08 95       	ret

000033f8 <__fp_split3>:
    33f8:	57 fd       	sbrc	r21, 7
    33fa:	90 58       	subi	r25, 0x80	; 128
    33fc:	44 0f       	add	r20, r20
    33fe:	55 1f       	adc	r21, r21
    3400:	59 f0       	breq	.+22     	; 0x3418 <__fp_splitA+0x10>
    3402:	5f 3f       	cpi	r21, 0xFF	; 255
    3404:	71 f0       	breq	.+28     	; 0x3422 <__fp_splitA+0x1a>
    3406:	47 95       	ror	r20

00003408 <__fp_splitA>:
    3408:	88 0f       	add	r24, r24
    340a:	97 fb       	bst	r25, 7
    340c:	99 1f       	adc	r25, r25
    340e:	61 f0       	breq	.+24     	; 0x3428 <__fp_splitA+0x20>
    3410:	9f 3f       	cpi	r25, 0xFF	; 255
    3412:	79 f0       	breq	.+30     	; 0x3432 <__fp_splitA+0x2a>
    3414:	87 95       	ror	r24
    3416:	08 95       	ret
    3418:	12 16       	cp	r1, r18
    341a:	13 06       	cpc	r1, r19
    341c:	14 06       	cpc	r1, r20
    341e:	55 1f       	adc	r21, r21
    3420:	f2 cf       	rjmp	.-28     	; 0x3406 <__fp_split3+0xe>
    3422:	46 95       	lsr	r20
    3424:	f1 df       	rcall	.-30     	; 0x3408 <__fp_splitA>
    3426:	08 c0       	rjmp	.+16     	; 0x3438 <__fp_splitA+0x30>
    3428:	16 16       	cp	r1, r22
    342a:	17 06       	cpc	r1, r23
    342c:	18 06       	cpc	r1, r24
    342e:	99 1f       	adc	r25, r25
    3430:	f1 cf       	rjmp	.-30     	; 0x3414 <__fp_splitA+0xc>
    3432:	86 95       	lsr	r24
    3434:	71 05       	cpc	r23, r1
    3436:	61 05       	cpc	r22, r1
    3438:	08 94       	sec
    343a:	08 95       	ret

0000343c <__fp_zero>:
    343c:	e8 94       	clt

0000343e <__fp_szero>:
    343e:	bb 27       	eor	r27, r27
    3440:	66 27       	eor	r22, r22
    3442:	77 27       	eor	r23, r23
    3444:	cb 01       	movw	r24, r22
    3446:	97 f9       	bld	r25, 7
    3448:	08 95       	ret

0000344a <__gesf2>:
    344a:	1b d1       	rcall	.+566    	; 0x3682 <__fp_cmp>
    344c:	08 f4       	brcc	.+2      	; 0x3450 <__gesf2+0x6>
    344e:	8f ef       	ldi	r24, 0xFF	; 255
    3450:	08 95       	ret

00003452 <inverse>:
    3452:	9b 01       	movw	r18, r22
    3454:	ac 01       	movw	r20, r24
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	80 e8       	ldi	r24, 0x80	; 128
    345c:	9f e3       	ldi	r25, 0x3F	; 63
    345e:	7d ce       	rjmp	.-774    	; 0x315a <__divsf3>
    3460:	7e cf       	rjmp	.-260    	; 0x335e <__fp_inf>
    3462:	33 c1       	rjmp	.+614    	; 0x36ca <__fp_mpack>

00003464 <ldexp>:
    3464:	d1 df       	rcall	.-94     	; 0x3408 <__fp_splitA>
    3466:	e8 f3       	brcs	.-6      	; 0x3462 <inverse+0x10>
    3468:	99 23       	and	r25, r25
    346a:	d9 f3       	breq	.-10     	; 0x3462 <inverse+0x10>
    346c:	94 0f       	add	r25, r20
    346e:	51 1d       	adc	r21, r1
    3470:	bb f3       	brvs	.-18     	; 0x3460 <inverse+0xe>
    3472:	91 50       	subi	r25, 0x01	; 1
    3474:	50 40       	sbci	r21, 0x00	; 0
    3476:	94 f0       	brlt	.+36     	; 0x349c <ldexp+0x38>
    3478:	59 f0       	breq	.+22     	; 0x3490 <ldexp+0x2c>
    347a:	88 23       	and	r24, r24
    347c:	32 f0       	brmi	.+12     	; 0x348a <ldexp+0x26>
    347e:	66 0f       	add	r22, r22
    3480:	77 1f       	adc	r23, r23
    3482:	88 1f       	adc	r24, r24
    3484:	91 50       	subi	r25, 0x01	; 1
    3486:	50 40       	sbci	r21, 0x00	; 0
    3488:	c1 f7       	brne	.-16     	; 0x347a <ldexp+0x16>
    348a:	9e 3f       	cpi	r25, 0xFE	; 254
    348c:	51 05       	cpc	r21, r1
    348e:	44 f7       	brge	.-48     	; 0x3460 <inverse+0xe>
    3490:	88 0f       	add	r24, r24
    3492:	91 1d       	adc	r25, r1
    3494:	96 95       	lsr	r25
    3496:	87 95       	ror	r24
    3498:	97 f9       	bld	r25, 7
    349a:	08 95       	ret
    349c:	5f 3f       	cpi	r21, 0xFF	; 255
    349e:	ac f0       	brlt	.+42     	; 0x34ca <ldexp+0x66>
    34a0:	98 3e       	cpi	r25, 0xE8	; 232
    34a2:	9c f0       	brlt	.+38     	; 0x34ca <ldexp+0x66>
    34a4:	bb 27       	eor	r27, r27
    34a6:	86 95       	lsr	r24
    34a8:	77 95       	ror	r23
    34aa:	67 95       	ror	r22
    34ac:	b7 95       	ror	r27
    34ae:	08 f4       	brcc	.+2      	; 0x34b2 <ldexp+0x4e>
    34b0:	b1 60       	ori	r27, 0x01	; 1
    34b2:	93 95       	inc	r25
    34b4:	c1 f7       	brne	.-16     	; 0x34a6 <ldexp+0x42>
    34b6:	bb 0f       	add	r27, r27
    34b8:	58 f7       	brcc	.-42     	; 0x3490 <ldexp+0x2c>
    34ba:	11 f4       	brne	.+4      	; 0x34c0 <ldexp+0x5c>
    34bc:	60 ff       	sbrs	r22, 0
    34be:	e8 cf       	rjmp	.-48     	; 0x3490 <ldexp+0x2c>
    34c0:	6f 5f       	subi	r22, 0xFF	; 255
    34c2:	7f 4f       	sbci	r23, 0xFF	; 255
    34c4:	8f 4f       	sbci	r24, 0xFF	; 255
    34c6:	9f 4f       	sbci	r25, 0xFF	; 255
    34c8:	e3 cf       	rjmp	.-58     	; 0x3490 <ldexp+0x2c>
    34ca:	b9 cf       	rjmp	.-142    	; 0x343e <__fp_szero>
    34cc:	0e f0       	brts	.+2      	; 0x34d0 <ldexp+0x6c>
    34ce:	fd c0       	rjmp	.+506    	; 0x36ca <__fp_mpack>
    34d0:	4c cf       	rjmp	.-360    	; 0x336a <__fp_nan>
    34d2:	68 94       	set
    34d4:	44 cf       	rjmp	.-376    	; 0x335e <__fp_inf>

000034d6 <log>:
    34d6:	98 df       	rcall	.-208    	; 0x3408 <__fp_splitA>
    34d8:	c8 f3       	brcs	.-14     	; 0x34cc <ldexp+0x68>
    34da:	99 23       	and	r25, r25
    34dc:	d1 f3       	breq	.-12     	; 0x34d2 <ldexp+0x6e>
    34de:	c6 f3       	brts	.-16     	; 0x34d0 <ldexp+0x6c>
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	1f 93       	push	r17
    34e6:	0f 93       	push	r16
    34e8:	ff 92       	push	r15
    34ea:	c9 2f       	mov	r28, r25
    34ec:	dd 27       	eor	r29, r29
    34ee:	88 23       	and	r24, r24
    34f0:	2a f0       	brmi	.+10     	; 0x34fc <log+0x26>
    34f2:	21 97       	sbiw	r28, 0x01	; 1
    34f4:	66 0f       	add	r22, r22
    34f6:	77 1f       	adc	r23, r23
    34f8:	88 1f       	adc	r24, r24
    34fa:	da f7       	brpl	.-10     	; 0x34f2 <log+0x1c>
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e8       	ldi	r20, 0x80	; 128
    3502:	5f eb       	ldi	r21, 0xBF	; 191
    3504:	9f e3       	ldi	r25, 0x3F	; 63
    3506:	88 39       	cpi	r24, 0x98	; 152
    3508:	20 f0       	brcs	.+8      	; 0x3512 <log+0x3c>
    350a:	80 3e       	cpi	r24, 0xE0	; 224
    350c:	30 f0       	brcs	.+12     	; 0x351a <log+0x44>
    350e:	21 96       	adiw	r28, 0x01	; 1
    3510:	8f 77       	andi	r24, 0x7F	; 127
    3512:	bf dd       	rcall	.-1154   	; 0x3092 <__addsf3>
    3514:	e0 e9       	ldi	r30, 0x90	; 144
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <log+0x4a>
    351a:	bb dd       	rcall	.-1162   	; 0x3092 <__addsf3>
    351c:	ed eb       	ldi	r30, 0xBD	; 189
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	27 df       	rcall	.-434    	; 0x3370 <__fp_powser>
    3522:	8b 01       	movw	r16, r22
    3524:	be 01       	movw	r22, r28
    3526:	ec 01       	movw	r28, r24
    3528:	fb 2e       	mov	r15, r27
    352a:	6f 57       	subi	r22, 0x7F	; 127
    352c:	71 09       	sbc	r23, r1
    352e:	75 95       	asr	r23
    3530:	77 1f       	adc	r23, r23
    3532:	88 0b       	sbc	r24, r24
    3534:	99 0b       	sbc	r25, r25
    3536:	d8 de       	rcall	.-592    	; 0x32e8 <__floatsisf>
    3538:	28 e1       	ldi	r18, 0x18	; 24
    353a:	32 e7       	ldi	r19, 0x72	; 114
    353c:	41 e3       	ldi	r20, 0x31	; 49
    353e:	5f e3       	ldi	r21, 0x3F	; 63
    3540:	49 d0       	rcall	.+146    	; 0x35d4 <__mulsf3x>
    3542:	af 2d       	mov	r26, r15
    3544:	98 01       	movw	r18, r16
    3546:	ae 01       	movw	r20, r28
    3548:	ff 90       	pop	r15
    354a:	0f 91       	pop	r16
    354c:	1f 91       	pop	r17
    354e:	cf 91       	pop	r28
    3550:	df 91       	pop	r29
    3552:	b0 dd       	rcall	.-1184   	; 0x30b4 <__addsf3x>
    3554:	40 cf       	rjmp	.-384    	; 0x33d6 <__fp_round>

00003556 <modf>:
    3556:	fa 01       	movw	r30, r20
    3558:	dc 01       	movw	r26, r24
    355a:	aa 0f       	add	r26, r26
    355c:	bb 1f       	adc	r27, r27
    355e:	9b 01       	movw	r18, r22
    3560:	ac 01       	movw	r20, r24
    3562:	bf 57       	subi	r27, 0x7F	; 127
    3564:	28 f4       	brcc	.+10     	; 0x3570 <modf+0x1a>
    3566:	22 27       	eor	r18, r18
    3568:	33 27       	eor	r19, r19
    356a:	44 27       	eor	r20, r20
    356c:	50 78       	andi	r21, 0x80	; 128
    356e:	1f c0       	rjmp	.+62     	; 0x35ae <modf+0x58>
    3570:	b7 51       	subi	r27, 0x17	; 23
    3572:	88 f4       	brcc	.+34     	; 0x3596 <modf+0x40>
    3574:	ab 2f       	mov	r26, r27
    3576:	00 24       	eor	r0, r0
    3578:	46 95       	lsr	r20
    357a:	37 95       	ror	r19
    357c:	27 95       	ror	r18
    357e:	01 1c       	adc	r0, r1
    3580:	a3 95       	inc	r26
    3582:	d2 f3       	brmi	.-12     	; 0x3578 <modf+0x22>
    3584:	00 20       	and	r0, r0
    3586:	69 f0       	breq	.+26     	; 0x35a2 <modf+0x4c>
    3588:	22 0f       	add	r18, r18
    358a:	33 1f       	adc	r19, r19
    358c:	44 1f       	adc	r20, r20
    358e:	b3 95       	inc	r27
    3590:	da f3       	brmi	.-10     	; 0x3588 <modf+0x32>
    3592:	0d d0       	rcall	.+26     	; 0x35ae <modf+0x58>
    3594:	7d cd       	rjmp	.-1286   	; 0x3090 <__subsf3>
    3596:	61 30       	cpi	r22, 0x01	; 1
    3598:	71 05       	cpc	r23, r1
    359a:	a0 e8       	ldi	r26, 0x80	; 128
    359c:	8a 07       	cpc	r24, r26
    359e:	b9 46       	sbci	r27, 0x69	; 105
    35a0:	30 f4       	brcc	.+12     	; 0x35ae <modf+0x58>
    35a2:	9b 01       	movw	r18, r22
    35a4:	ac 01       	movw	r20, r24
    35a6:	66 27       	eor	r22, r22
    35a8:	77 27       	eor	r23, r23
    35aa:	88 27       	eor	r24, r24
    35ac:	90 78       	andi	r25, 0x80	; 128
    35ae:	30 96       	adiw	r30, 0x00	; 0
    35b0:	21 f0       	breq	.+8      	; 0x35ba <modf+0x64>
    35b2:	20 83       	st	Z, r18
    35b4:	31 83       	std	Z+1, r19	; 0x01
    35b6:	42 83       	std	Z+2, r20	; 0x02
    35b8:	53 83       	std	Z+3, r21	; 0x03
    35ba:	08 95       	ret

000035bc <__mulsf3>:
    35bc:	0b d0       	rcall	.+22     	; 0x35d4 <__mulsf3x>
    35be:	0b cf       	rjmp	.-490    	; 0x33d6 <__fp_round>
    35c0:	fc de       	rcall	.-520    	; 0x33ba <__fp_pscA>
    35c2:	28 f0       	brcs	.+10     	; 0x35ce <__mulsf3+0x12>
    35c4:	01 df       	rcall	.-510    	; 0x33c8 <__fp_pscB>
    35c6:	18 f0       	brcs	.+6      	; 0x35ce <__mulsf3+0x12>
    35c8:	95 23       	and	r25, r21
    35ca:	09 f0       	breq	.+2      	; 0x35ce <__mulsf3+0x12>
    35cc:	c8 ce       	rjmp	.-624    	; 0x335e <__fp_inf>
    35ce:	cd ce       	rjmp	.-614    	; 0x336a <__fp_nan>
    35d0:	11 24       	eor	r1, r1
    35d2:	35 cf       	rjmp	.-406    	; 0x343e <__fp_szero>

000035d4 <__mulsf3x>:
    35d4:	11 df       	rcall	.-478    	; 0x33f8 <__fp_split3>
    35d6:	a0 f3       	brcs	.-24     	; 0x35c0 <__mulsf3+0x4>

000035d8 <__mulsf3_pse>:
    35d8:	95 9f       	mul	r25, r21
    35da:	d1 f3       	breq	.-12     	; 0x35d0 <__mulsf3+0x14>
    35dc:	95 0f       	add	r25, r21
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	55 1f       	adc	r21, r21
    35e2:	62 9f       	mul	r22, r18
    35e4:	f0 01       	movw	r30, r0
    35e6:	72 9f       	mul	r23, r18
    35e8:	bb 27       	eor	r27, r27
    35ea:	f0 0d       	add	r31, r0
    35ec:	b1 1d       	adc	r27, r1
    35ee:	63 9f       	mul	r22, r19
    35f0:	aa 27       	eor	r26, r26
    35f2:	f0 0d       	add	r31, r0
    35f4:	b1 1d       	adc	r27, r1
    35f6:	aa 1f       	adc	r26, r26
    35f8:	64 9f       	mul	r22, r20
    35fa:	66 27       	eor	r22, r22
    35fc:	b0 0d       	add	r27, r0
    35fe:	a1 1d       	adc	r26, r1
    3600:	66 1f       	adc	r22, r22
    3602:	82 9f       	mul	r24, r18
    3604:	22 27       	eor	r18, r18
    3606:	b0 0d       	add	r27, r0
    3608:	a1 1d       	adc	r26, r1
    360a:	62 1f       	adc	r22, r18
    360c:	73 9f       	mul	r23, r19
    360e:	b0 0d       	add	r27, r0
    3610:	a1 1d       	adc	r26, r1
    3612:	62 1f       	adc	r22, r18
    3614:	83 9f       	mul	r24, r19
    3616:	a0 0d       	add	r26, r0
    3618:	61 1d       	adc	r22, r1
    361a:	22 1f       	adc	r18, r18
    361c:	74 9f       	mul	r23, r20
    361e:	33 27       	eor	r19, r19
    3620:	a0 0d       	add	r26, r0
    3622:	61 1d       	adc	r22, r1
    3624:	23 1f       	adc	r18, r19
    3626:	84 9f       	mul	r24, r20
    3628:	60 0d       	add	r22, r0
    362a:	21 1d       	adc	r18, r1
    362c:	82 2f       	mov	r24, r18
    362e:	76 2f       	mov	r23, r22
    3630:	6a 2f       	mov	r22, r26
    3632:	11 24       	eor	r1, r1
    3634:	9f 57       	subi	r25, 0x7F	; 127
    3636:	50 40       	sbci	r21, 0x00	; 0
    3638:	8a f0       	brmi	.+34     	; 0x365c <__mulsf3_pse+0x84>
    363a:	e1 f0       	breq	.+56     	; 0x3674 <__mulsf3_pse+0x9c>
    363c:	88 23       	and	r24, r24
    363e:	4a f0       	brmi	.+18     	; 0x3652 <__mulsf3_pse+0x7a>
    3640:	ee 0f       	add	r30, r30
    3642:	ff 1f       	adc	r31, r31
    3644:	bb 1f       	adc	r27, r27
    3646:	66 1f       	adc	r22, r22
    3648:	77 1f       	adc	r23, r23
    364a:	88 1f       	adc	r24, r24
    364c:	91 50       	subi	r25, 0x01	; 1
    364e:	50 40       	sbci	r21, 0x00	; 0
    3650:	a9 f7       	brne	.-22     	; 0x363c <__mulsf3_pse+0x64>
    3652:	9e 3f       	cpi	r25, 0xFE	; 254
    3654:	51 05       	cpc	r21, r1
    3656:	70 f0       	brcs	.+28     	; 0x3674 <__mulsf3_pse+0x9c>
    3658:	82 ce       	rjmp	.-764    	; 0x335e <__fp_inf>
    365a:	f1 ce       	rjmp	.-542    	; 0x343e <__fp_szero>
    365c:	5f 3f       	cpi	r21, 0xFF	; 255
    365e:	ec f3       	brlt	.-6      	; 0x365a <__mulsf3_pse+0x82>
    3660:	98 3e       	cpi	r25, 0xE8	; 232
    3662:	dc f3       	brlt	.-10     	; 0x365a <__mulsf3_pse+0x82>
    3664:	86 95       	lsr	r24
    3666:	77 95       	ror	r23
    3668:	67 95       	ror	r22
    366a:	b7 95       	ror	r27
    366c:	f7 95       	ror	r31
    366e:	e7 95       	ror	r30
    3670:	9f 5f       	subi	r25, 0xFF	; 255
    3672:	c1 f7       	brne	.-16     	; 0x3664 <__mulsf3_pse+0x8c>
    3674:	fe 2b       	or	r31, r30
    3676:	88 0f       	add	r24, r24
    3678:	91 1d       	adc	r25, r1
    367a:	96 95       	lsr	r25
    367c:	87 95       	ror	r24
    367e:	97 f9       	bld	r25, 7
    3680:	08 95       	ret

00003682 <__fp_cmp>:
    3682:	99 0f       	add	r25, r25
    3684:	00 08       	sbc	r0, r0
    3686:	55 0f       	add	r21, r21
    3688:	aa 0b       	sbc	r26, r26
    368a:	e0 e8       	ldi	r30, 0x80	; 128
    368c:	fe ef       	ldi	r31, 0xFE	; 254
    368e:	16 16       	cp	r1, r22
    3690:	17 06       	cpc	r1, r23
    3692:	e8 07       	cpc	r30, r24
    3694:	f9 07       	cpc	r31, r25
    3696:	c0 f0       	brcs	.+48     	; 0x36c8 <__fp_cmp+0x46>
    3698:	12 16       	cp	r1, r18
    369a:	13 06       	cpc	r1, r19
    369c:	e4 07       	cpc	r30, r20
    369e:	f5 07       	cpc	r31, r21
    36a0:	98 f0       	brcs	.+38     	; 0x36c8 <__fp_cmp+0x46>
    36a2:	62 1b       	sub	r22, r18
    36a4:	73 0b       	sbc	r23, r19
    36a6:	84 0b       	sbc	r24, r20
    36a8:	95 0b       	sbc	r25, r21
    36aa:	39 f4       	brne	.+14     	; 0x36ba <__fp_cmp+0x38>
    36ac:	0a 26       	eor	r0, r26
    36ae:	61 f0       	breq	.+24     	; 0x36c8 <__fp_cmp+0x46>
    36b0:	23 2b       	or	r18, r19
    36b2:	24 2b       	or	r18, r20
    36b4:	25 2b       	or	r18, r21
    36b6:	21 f4       	brne	.+8      	; 0x36c0 <__fp_cmp+0x3e>
    36b8:	08 95       	ret
    36ba:	0a 26       	eor	r0, r26
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <__fp_cmp+0x3e>
    36be:	a1 40       	sbci	r26, 0x01	; 1
    36c0:	a6 95       	lsr	r26
    36c2:	8f ef       	ldi	r24, 0xFF	; 255
    36c4:	81 1d       	adc	r24, r1
    36c6:	81 1d       	adc	r24, r1
    36c8:	08 95       	ret

000036ca <__fp_mpack>:
    36ca:	9f 3f       	cpi	r25, 0xFF	; 255
    36cc:	31 f0       	breq	.+12     	; 0x36da <__fp_mpack_finite+0xc>

000036ce <__fp_mpack_finite>:
    36ce:	91 50       	subi	r25, 0x01	; 1
    36d0:	20 f4       	brcc	.+8      	; 0x36da <__fp_mpack_finite+0xc>
    36d2:	87 95       	ror	r24
    36d4:	77 95       	ror	r23
    36d6:	67 95       	ror	r22
    36d8:	b7 95       	ror	r27
    36da:	88 0f       	add	r24, r24
    36dc:	91 1d       	adc	r25, r1
    36de:	96 95       	lsr	r25
    36e0:	87 95       	ror	r24
    36e2:	97 f9       	bld	r25, 7
    36e4:	08 95       	ret

000036e6 <malloc>:
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	82 30       	cpi	r24, 0x02	; 2
    36ec:	91 05       	cpc	r25, r1
    36ee:	10 f4       	brcc	.+4      	; 0x36f4 <malloc+0xe>
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <__flp>
    36f8:	f0 91 9c 04 	lds	r31, 0x049C	; 0x80049c <__flp+0x1>
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	c0 e0       	ldi	r28, 0x00	; 0
    3702:	d0 e0       	ldi	r29, 0x00	; 0
    3704:	30 97       	sbiw	r30, 0x00	; 0
    3706:	11 f1       	breq	.+68     	; 0x374c <malloc+0x66>
    3708:	40 81       	ld	r20, Z
    370a:	51 81       	ldd	r21, Z+1	; 0x01
    370c:	48 17       	cp	r20, r24
    370e:	59 07       	cpc	r21, r25
    3710:	c0 f0       	brcs	.+48     	; 0x3742 <malloc+0x5c>
    3712:	48 17       	cp	r20, r24
    3714:	59 07       	cpc	r21, r25
    3716:	61 f4       	brne	.+24     	; 0x3730 <malloc+0x4a>
    3718:	82 81       	ldd	r24, Z+2	; 0x02
    371a:	93 81       	ldd	r25, Z+3	; 0x03
    371c:	20 97       	sbiw	r28, 0x00	; 0
    371e:	19 f0       	breq	.+6      	; 0x3726 <malloc+0x40>
    3720:	9b 83       	std	Y+3, r25	; 0x03
    3722:	8a 83       	std	Y+2, r24	; 0x02
    3724:	2b c0       	rjmp	.+86     	; 0x377c <malloc+0x96>
    3726:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <__flp+0x1>
    372a:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <__flp>
    372e:	26 c0       	rjmp	.+76     	; 0x377c <malloc+0x96>
    3730:	21 15       	cp	r18, r1
    3732:	31 05       	cpc	r19, r1
    3734:	19 f0       	breq	.+6      	; 0x373c <malloc+0x56>
    3736:	42 17       	cp	r20, r18
    3738:	53 07       	cpc	r21, r19
    373a:	18 f4       	brcc	.+6      	; 0x3742 <malloc+0x5c>
    373c:	9a 01       	movw	r18, r20
    373e:	be 01       	movw	r22, r28
    3740:	df 01       	movw	r26, r30
    3742:	ef 01       	movw	r28, r30
    3744:	02 80       	ldd	r0, Z+2	; 0x02
    3746:	f3 81       	ldd	r31, Z+3	; 0x03
    3748:	e0 2d       	mov	r30, r0
    374a:	dc cf       	rjmp	.-72     	; 0x3704 <malloc+0x1e>
    374c:	21 15       	cp	r18, r1
    374e:	31 05       	cpc	r19, r1
    3750:	09 f1       	breq	.+66     	; 0x3794 <malloc+0xae>
    3752:	28 1b       	sub	r18, r24
    3754:	39 0b       	sbc	r19, r25
    3756:	24 30       	cpi	r18, 0x04	; 4
    3758:	31 05       	cpc	r19, r1
    375a:	90 f4       	brcc	.+36     	; 0x3780 <malloc+0x9a>
    375c:	12 96       	adiw	r26, 0x02	; 2
    375e:	8d 91       	ld	r24, X+
    3760:	9c 91       	ld	r25, X
    3762:	13 97       	sbiw	r26, 0x03	; 3
    3764:	61 15       	cp	r22, r1
    3766:	71 05       	cpc	r23, r1
    3768:	21 f0       	breq	.+8      	; 0x3772 <malloc+0x8c>
    376a:	fb 01       	movw	r30, r22
    376c:	93 83       	std	Z+3, r25	; 0x03
    376e:	82 83       	std	Z+2, r24	; 0x02
    3770:	04 c0       	rjmp	.+8      	; 0x377a <malloc+0x94>
    3772:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <__flp+0x1>
    3776:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <__flp>
    377a:	fd 01       	movw	r30, r26
    377c:	32 96       	adiw	r30, 0x02	; 2
    377e:	44 c0       	rjmp	.+136    	; 0x3808 <malloc+0x122>
    3780:	fd 01       	movw	r30, r26
    3782:	e2 0f       	add	r30, r18
    3784:	f3 1f       	adc	r31, r19
    3786:	81 93       	st	Z+, r24
    3788:	91 93       	st	Z+, r25
    378a:	22 50       	subi	r18, 0x02	; 2
    378c:	31 09       	sbc	r19, r1
    378e:	2d 93       	st	X+, r18
    3790:	3c 93       	st	X, r19
    3792:	3a c0       	rjmp	.+116    	; 0x3808 <malloc+0x122>
    3794:	20 91 99 04 	lds	r18, 0x0499	; 0x800499 <__brkval>
    3798:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <__brkval+0x1>
    379c:	23 2b       	or	r18, r19
    379e:	41 f4       	brne	.+16     	; 0x37b0 <malloc+0xca>
    37a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    37a4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    37a8:	30 93 9a 04 	sts	0x049A, r19	; 0x80049a <__brkval+0x1>
    37ac:	20 93 99 04 	sts	0x0499, r18	; 0x800499 <__brkval>
    37b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    37b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    37b8:	21 15       	cp	r18, r1
    37ba:	31 05       	cpc	r19, r1
    37bc:	41 f4       	brne	.+16     	; 0x37ce <malloc+0xe8>
    37be:	2d b7       	in	r18, 0x3d	; 61
    37c0:	3e b7       	in	r19, 0x3e	; 62
    37c2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    37c6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    37ca:	24 1b       	sub	r18, r20
    37cc:	35 0b       	sbc	r19, r21
    37ce:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <__brkval>
    37d2:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <__brkval+0x1>
    37d6:	e2 17       	cp	r30, r18
    37d8:	f3 07       	cpc	r31, r19
    37da:	a0 f4       	brcc	.+40     	; 0x3804 <malloc+0x11e>
    37dc:	2e 1b       	sub	r18, r30
    37de:	3f 0b       	sbc	r19, r31
    37e0:	28 17       	cp	r18, r24
    37e2:	39 07       	cpc	r19, r25
    37e4:	78 f0       	brcs	.+30     	; 0x3804 <malloc+0x11e>
    37e6:	ac 01       	movw	r20, r24
    37e8:	4e 5f       	subi	r20, 0xFE	; 254
    37ea:	5f 4f       	sbci	r21, 0xFF	; 255
    37ec:	24 17       	cp	r18, r20
    37ee:	35 07       	cpc	r19, r21
    37f0:	48 f0       	brcs	.+18     	; 0x3804 <malloc+0x11e>
    37f2:	4e 0f       	add	r20, r30
    37f4:	5f 1f       	adc	r21, r31
    37f6:	50 93 9a 04 	sts	0x049A, r21	; 0x80049a <__brkval+0x1>
    37fa:	40 93 99 04 	sts	0x0499, r20	; 0x800499 <__brkval>
    37fe:	81 93       	st	Z+, r24
    3800:	91 93       	st	Z+, r25
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <malloc+0x122>
    3804:	e0 e0       	ldi	r30, 0x00	; 0
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	cf 01       	movw	r24, r30
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	08 95       	ret

00003810 <free>:
    3810:	0f 93       	push	r16
    3812:	1f 93       	push	r17
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	09 f4       	brne	.+2      	; 0x381e <free+0xe>
    381c:	8c c0       	rjmp	.+280    	; 0x3936 <free+0x126>
    381e:	fc 01       	movw	r30, r24
    3820:	32 97       	sbiw	r30, 0x02	; 2
    3822:	13 82       	std	Z+3, r1	; 0x03
    3824:	12 82       	std	Z+2, r1	; 0x02
    3826:	00 91 9b 04 	lds	r16, 0x049B	; 0x80049b <__flp>
    382a:	10 91 9c 04 	lds	r17, 0x049C	; 0x80049c <__flp+0x1>
    382e:	01 15       	cp	r16, r1
    3830:	11 05       	cpc	r17, r1
    3832:	81 f4       	brne	.+32     	; 0x3854 <free+0x44>
    3834:	20 81       	ld	r18, Z
    3836:	31 81       	ldd	r19, Z+1	; 0x01
    3838:	82 0f       	add	r24, r18
    383a:	93 1f       	adc	r25, r19
    383c:	20 91 99 04 	lds	r18, 0x0499	; 0x800499 <__brkval>
    3840:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <__brkval+0x1>
    3844:	28 17       	cp	r18, r24
    3846:	39 07       	cpc	r19, r25
    3848:	79 f5       	brne	.+94     	; 0x38a8 <free+0x98>
    384a:	f0 93 9a 04 	sts	0x049A, r31	; 0x80049a <__brkval+0x1>
    384e:	e0 93 99 04 	sts	0x0499, r30	; 0x800499 <__brkval>
    3852:	71 c0       	rjmp	.+226    	; 0x3936 <free+0x126>
    3854:	d8 01       	movw	r26, r16
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	ae 17       	cp	r26, r30
    385c:	bf 07       	cpc	r27, r31
    385e:	50 f4       	brcc	.+20     	; 0x3874 <free+0x64>
    3860:	12 96       	adiw	r26, 0x02	; 2
    3862:	2d 91       	ld	r18, X+
    3864:	3c 91       	ld	r19, X
    3866:	13 97       	sbiw	r26, 0x03	; 3
    3868:	ad 01       	movw	r20, r26
    386a:	21 15       	cp	r18, r1
    386c:	31 05       	cpc	r19, r1
    386e:	09 f1       	breq	.+66     	; 0x38b2 <free+0xa2>
    3870:	d9 01       	movw	r26, r18
    3872:	f3 cf       	rjmp	.-26     	; 0x385a <free+0x4a>
    3874:	9d 01       	movw	r18, r26
    3876:	da 01       	movw	r26, r20
    3878:	33 83       	std	Z+3, r19	; 0x03
    387a:	22 83       	std	Z+2, r18	; 0x02
    387c:	60 81       	ld	r22, Z
    387e:	71 81       	ldd	r23, Z+1	; 0x01
    3880:	86 0f       	add	r24, r22
    3882:	97 1f       	adc	r25, r23
    3884:	82 17       	cp	r24, r18
    3886:	93 07       	cpc	r25, r19
    3888:	69 f4       	brne	.+26     	; 0x38a4 <free+0x94>
    388a:	ec 01       	movw	r28, r24
    388c:	28 81       	ld	r18, Y
    388e:	39 81       	ldd	r19, Y+1	; 0x01
    3890:	26 0f       	add	r18, r22
    3892:	37 1f       	adc	r19, r23
    3894:	2e 5f       	subi	r18, 0xFE	; 254
    3896:	3f 4f       	sbci	r19, 0xFF	; 255
    3898:	31 83       	std	Z+1, r19	; 0x01
    389a:	20 83       	st	Z, r18
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	9b 81       	ldd	r25, Y+3	; 0x03
    38a0:	93 83       	std	Z+3, r25	; 0x03
    38a2:	82 83       	std	Z+2, r24	; 0x02
    38a4:	45 2b       	or	r20, r21
    38a6:	29 f4       	brne	.+10     	; 0x38b2 <free+0xa2>
    38a8:	f0 93 9c 04 	sts	0x049C, r31	; 0x80049c <__flp+0x1>
    38ac:	e0 93 9b 04 	sts	0x049B, r30	; 0x80049b <__flp>
    38b0:	42 c0       	rjmp	.+132    	; 0x3936 <free+0x126>
    38b2:	13 96       	adiw	r26, 0x03	; 3
    38b4:	fc 93       	st	X, r31
    38b6:	ee 93       	st	-X, r30
    38b8:	12 97       	sbiw	r26, 0x02	; 2
    38ba:	ed 01       	movw	r28, r26
    38bc:	49 91       	ld	r20, Y+
    38be:	59 91       	ld	r21, Y+
    38c0:	9e 01       	movw	r18, r28
    38c2:	24 0f       	add	r18, r20
    38c4:	35 1f       	adc	r19, r21
    38c6:	e2 17       	cp	r30, r18
    38c8:	f3 07       	cpc	r31, r19
    38ca:	71 f4       	brne	.+28     	; 0x38e8 <free+0xd8>
    38cc:	80 81       	ld	r24, Z
    38ce:	91 81       	ldd	r25, Z+1	; 0x01
    38d0:	84 0f       	add	r24, r20
    38d2:	95 1f       	adc	r25, r21
    38d4:	02 96       	adiw	r24, 0x02	; 2
    38d6:	11 96       	adiw	r26, 0x01	; 1
    38d8:	9c 93       	st	X, r25
    38da:	8e 93       	st	-X, r24
    38dc:	82 81       	ldd	r24, Z+2	; 0x02
    38de:	93 81       	ldd	r25, Z+3	; 0x03
    38e0:	13 96       	adiw	r26, 0x03	; 3
    38e2:	9c 93       	st	X, r25
    38e4:	8e 93       	st	-X, r24
    38e6:	12 97       	sbiw	r26, 0x02	; 2
    38e8:	e0 e0       	ldi	r30, 0x00	; 0
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	d8 01       	movw	r26, r16
    38ee:	12 96       	adiw	r26, 0x02	; 2
    38f0:	8d 91       	ld	r24, X+
    38f2:	9c 91       	ld	r25, X
    38f4:	13 97       	sbiw	r26, 0x03	; 3
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	19 f0       	breq	.+6      	; 0x3900 <free+0xf0>
    38fa:	f8 01       	movw	r30, r16
    38fc:	8c 01       	movw	r16, r24
    38fe:	f6 cf       	rjmp	.-20     	; 0x38ec <free+0xdc>
    3900:	8d 91       	ld	r24, X+
    3902:	9c 91       	ld	r25, X
    3904:	98 01       	movw	r18, r16
    3906:	2e 5f       	subi	r18, 0xFE	; 254
    3908:	3f 4f       	sbci	r19, 0xFF	; 255
    390a:	82 0f       	add	r24, r18
    390c:	93 1f       	adc	r25, r19
    390e:	20 91 99 04 	lds	r18, 0x0499	; 0x800499 <__brkval>
    3912:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <__brkval+0x1>
    3916:	28 17       	cp	r18, r24
    3918:	39 07       	cpc	r19, r25
    391a:	69 f4       	brne	.+26     	; 0x3936 <free+0x126>
    391c:	30 97       	sbiw	r30, 0x00	; 0
    391e:	29 f4       	brne	.+10     	; 0x392a <free+0x11a>
    3920:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <__flp+0x1>
    3924:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <__flp>
    3928:	02 c0       	rjmp	.+4      	; 0x392e <free+0x11e>
    392a:	13 82       	std	Z+3, r1	; 0x03
    392c:	12 82       	std	Z+2, r1	; 0x02
    392e:	10 93 9a 04 	sts	0x049A, r17	; 0x80049a <__brkval+0x1>
    3932:	00 93 99 04 	sts	0x0499, r16	; 0x800499 <__brkval>
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
    393e:	08 95       	ret

00003940 <memcpy>:
    3940:	fb 01       	movw	r30, r22
    3942:	dc 01       	movw	r26, r24
    3944:	02 c0       	rjmp	.+4      	; 0x394a <memcpy+0xa>
    3946:	01 90       	ld	r0, Z+
    3948:	0d 92       	st	X+, r0
    394a:	41 50       	subi	r20, 0x01	; 1
    394c:	50 40       	sbci	r21, 0x00	; 0
    394e:	d8 f7       	brcc	.-10     	; 0x3946 <memcpy+0x6>
    3950:	08 95       	ret

00003952 <memset>:
    3952:	dc 01       	movw	r26, r24
    3954:	01 c0       	rjmp	.+2      	; 0x3958 <memset+0x6>
    3956:	6d 93       	st	X+, r22
    3958:	41 50       	subi	r20, 0x01	; 1
    395a:	50 40       	sbci	r21, 0x00	; 0
    395c:	e0 f7       	brcc	.-8      	; 0x3956 <memset+0x4>
    395e:	08 95       	ret

00003960 <eeprom_read_byte>:
    3960:	f9 99       	sbic	0x1f, 1	; 31
    3962:	fe cf       	rjmp	.-4      	; 0x3960 <eeprom_read_byte>
    3964:	92 bd       	out	0x22, r25	; 34
    3966:	81 bd       	out	0x21, r24	; 33
    3968:	f8 9a       	sbi	0x1f, 0	; 31
    396a:	99 27       	eor	r25, r25
    396c:	80 b5       	in	r24, 0x20	; 32
    396e:	08 95       	ret

00003970 <eeprom_write_byte>:
    3970:	26 2f       	mov	r18, r22

00003972 <eeprom_write_r18>:
    3972:	f9 99       	sbic	0x1f, 1	; 31
    3974:	fe cf       	rjmp	.-4      	; 0x3972 <eeprom_write_r18>
    3976:	1f ba       	out	0x1f, r1	; 31
    3978:	92 bd       	out	0x22, r25	; 34
    397a:	81 bd       	out	0x21, r24	; 33
    397c:	20 bd       	out	0x20, r18	; 32
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	fa 9a       	sbi	0x1f, 2	; 31
    3984:	f9 9a       	sbi	0x1f, 1	; 31
    3986:	0f be       	out	0x3f, r0	; 63
    3988:	01 96       	adiw	r24, 0x01	; 1
    398a:	08 95       	ret

0000398c <__do_global_dtors>:
    398c:	10 e0       	ldi	r17, 0x00	; 0
    398e:	c5 ea       	ldi	r28, 0xA5	; 165
    3990:	d0 e0       	ldi	r29, 0x00	; 0
    3992:	03 c0       	rjmp	.+6      	; 0x399a <__do_global_dtors+0xe>
    3994:	fe 01       	movw	r30, r28
    3996:	67 db       	rcall	.-2354   	; 0x3066 <__tablejump2__>
    3998:	21 96       	adiw	r28, 0x01	; 1
    399a:	c6 3a       	cpi	r28, 0xA6	; 166
    399c:	d1 07       	cpc	r29, r17
    399e:	d1 f7       	brne	.-12     	; 0x3994 <__do_global_dtors+0x8>
    39a0:	f8 94       	cli

000039a2 <__stop_program>:
    39a2:	ff cf       	rjmp	.-2      	; 0x39a2 <__stop_program>
